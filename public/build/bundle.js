/*! For license information please see bundle.js.LICENSE.txt */
!function(){var e={570:function(e){e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function r(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=r;var s={},a={};function i(e,t){var n,r,i;return t?(i=0<=(e>>>=0)&&e<256)&&(r=a[e])?r:(n=u(e,(0|e)<0?-1:0,!0),i&&(a[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(r=s[e])?r:(n=u(e,e<0?-1:0,!1),i&&(s[e]=n),n)}function o(e,t){if(isNaN(e))return t?b:g;if(t){if(e<0)return b;if(e>=p)return $}else{if(e<=-f)return k;if(e+1>=f)return v}return e<0?o(-e,t).neg():u(e%d|0,e/d|0,t)}function u(e,t,r){return new n(e,t,r)}n.fromInt=i,n.fromNumber=o,n.fromBits=u;var l=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return c(e.substring(1),t,n).neg();for(var s=o(l(n,8)),a=g,i=0;i<e.length;i+=8){var u=Math.min(8,e.length-i),h=parseInt(e.substring(i,i+u),n);if(u<8){var d=o(l(n,u));a=a.mul(d).add(o(h))}else a=(a=a.mul(s)).add(o(h))}return a.unsigned=t,a}function h(e,t){return"number"==typeof e?o(e,t):"string"==typeof e?c(e,t):u(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=h;var d=4294967296,p=d*d,f=p/2,m=i(1<<24),g=i(0);n.ZERO=g;var b=i(0,!0);n.UZERO=b;var y=i(1);n.ONE=y;var x=i(1,!0);n.UONE=x;var w=i(-1);n.NEG_ONE=w;var v=u(-1,2147483647,!1);n.MAX_VALUE=v;var $=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=$;var k=u(0,-2147483648,!1);n.MIN_VALUE=k;var I=n.prototype;I.toInt=function(){return this.unsigned?this.low>>>0:this.low},I.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},I.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(k)){var t=o(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var s=o(l(e,6),this.unsigned),a=this,i="";;){var u=a.div(s),c=(a.sub(u.mul(s)).toInt()>>>0).toString(e);if((a=u).isZero())return c+i;for(;c.length<6;)c="0"+c;i=""+c+i}},I.getHighBits=function(){return this.high},I.getHighBitsUnsigned=function(){return this.high>>>0},I.getLowBits=function(){return this.low},I.getLowBitsUnsigned=function(){return this.low>>>0},I.getNumBitsAbs=function(){if(this.isNegative())return this.eq(k)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&!(e&1<<t);t--);return 0!=this.high?t+33:t+1},I.isZero=function(){return 0===this.high&&0===this.low},I.eqz=I.isZero,I.isNegative=function(){return!this.unsigned&&this.high<0},I.isPositive=function(){return this.unsigned||this.high>=0},I.isOdd=function(){return!(1&~this.low)},I.isEven=function(){return!(1&this.low)},I.equals=function(e){return r(e)||(e=h(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},I.eq=I.equals,I.notEquals=function(e){return!this.eq(e)},I.neq=I.notEquals,I.ne=I.notEquals,I.lessThan=function(e){return this.comp(e)<0},I.lt=I.lessThan,I.lessThanOrEqual=function(e){return this.comp(e)<=0},I.lte=I.lessThanOrEqual,I.le=I.lessThanOrEqual,I.greaterThan=function(e){return this.comp(e)>0},I.gt=I.greaterThan,I.greaterThanOrEqual=function(e){return this.comp(e)>=0},I.gte=I.greaterThanOrEqual,I.ge=I.greaterThanOrEqual,I.compare=function(e){if(r(e)||(e=h(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},I.comp=I.compare,I.negate=function(){return!this.unsigned&&this.eq(k)?k:this.not().add(y)},I.neg=I.negate,I.add=function(e){r(e)||(e=h(e));var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,a=65535&this.low,i=e.high>>>16,o=65535&e.high,l=e.low>>>16,c=0,d=0,p=0,f=0;return p+=(f+=a+(65535&e.low))>>>16,d+=(p+=s+l)>>>16,c+=(d+=n+o)>>>16,c+=t+i,u((p&=65535)<<16|(f&=65535),(c&=65535)<<16|(d&=65535),this.unsigned)},I.subtract=function(e){return r(e)||(e=h(e)),this.add(e.neg())},I.sub=I.subtract,I.multiply=function(e){if(this.isZero())return g;if(r(e)||(e=h(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(k))return e.isOdd()?k:g;if(e.eq(k))return this.isOdd()?k:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return o(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,s=65535&this.high,a=this.low>>>16,i=65535&this.low,l=e.high>>>16,c=65535&e.high,d=e.low>>>16,p=65535&e.low,f=0,b=0,y=0,x=0;return y+=(x+=i*p)>>>16,b+=(y+=a*p)>>>16,y&=65535,b+=(y+=i*d)>>>16,f+=(b+=s*p)>>>16,b&=65535,f+=(b+=a*d)>>>16,b&=65535,f+=(b+=i*c)>>>16,f+=n*p+s*d+a*c+i*l,u((y&=65535)<<16|(x&=65535),(f&=65535)<<16|(b&=65535),this.unsigned)},I.mul=I.multiply,I.divide=function(e){if(r(e)||(e=h(e)),e.isZero())throw Error("division by zero");var n,s,a;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?b:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return b;if(e.gt(this.shru(1)))return x;a=b}else{if(this.eq(k))return e.eq(y)||e.eq(w)?k:e.eq(k)?y:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?y:w:(s=this.sub(e.mul(n)),a=n.add(s.div(e)));if(e.eq(k))return this.unsigned?b:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=g}for(s=this;s.gte(e);){n=Math.max(1,Math.floor(s.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(n)/Math.LN2),c=i<=48?1:l(2,i-48),d=o(n),p=d.mul(e);p.isNegative()||p.gt(s);)p=(d=o(n-=c,this.unsigned)).mul(e);d.isZero()&&(d=y),a=a.add(d),s=s.sub(p)}return a},I.div=I.divide,I.modulo=function(e){return r(e)||(e=h(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},I.mod=I.modulo,I.rem=I.modulo,I.not=function(){return u(~this.low,~this.high,this.unsigned)},I.and=function(e){return r(e)||(e=h(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},I.or=function(e){return r(e)||(e=h(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},I.xor=function(e){return r(e)||(e=h(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},I.shiftLeft=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},I.shl=I.shiftLeft,I.shiftRight=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},I.shr=I.shiftRight,I.shiftRightUnsigned=function(e){if(r(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned)},I.shru=I.shiftRightUnsigned,I.shr_u=I.shiftRightUnsigned,I.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},I.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},I.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},I.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},I.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},391:function(e,t,n){var r=n(180),s=n(181),a=n(31),i=n(67),o=n(833),u=n(717),l=n(801);l.alea=r,l.xor128=s,l.xorwow=a,l.xorshift7=i,l.xor4096=o,l.tychei=u,e.exports=l},180:function(e,t,n){var r;!function(e,s){function a(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function i(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function o(e,t){var n=new a(e),r=t&&t.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&i(r,n),s.state=function(){return i(n,{})}),s}s&&s.exports?s.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(t,n,t,s))||(s.exports=r):this.alea=o}(0,e=n.nmd(e),n.amdD)},717:function(e,t,n){var r;!function(e,s){function a(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function o(e,t){var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&i(r,n),s.state=function(){return i(n,{})}),s}s&&s.exports?s.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(t,n,t,s))||(s.exports=r):this.tychei=o}(0,e=n.nmd(e),n.amdD)},181:function(e,t,n){var r;!function(e,s){function a(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function o(e,t){var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&i(r,n),s.state=function(){return i(n,{})}),s}s&&s.exports?s.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(t,n,t,s))||(s.exports=r):this.xor128=o}(0,e=n.nmd(e),n.amdD)},833:function(e,t,n){var r;!function(e,s){function a(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,i,o=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;e.w=i,e.X=o,e.i=s}(t,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function o(e,t){null==e&&(e=+new Date);var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.X&&i(r,n),s.state=function(){return i(n,{})}),s}s&&s.exports?s.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(t,n,t,s))||(s.exports=r):this.xor4096=o}(0,e=n.nmd(e),n.amdD)},67:function(e,t,n){var r;!function(e,s){function a(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function o(e,t){null==e&&(e=+new Date);var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.x&&i(r,n),s.state=function(){return i(n,{})}),s}s&&s.exports?s.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(t,n,t,s))||(s.exports=r):this.xorshift7=o}(0,e=n.nmd(e),n.amdD)},31:function(e,t,n){var r;!function(e,s){function a(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function o(e,t){var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&i(r,n),s.state=function(){return i(n,{})}),s}s&&s.exports?s.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(t,n,t,s))||(s.exports=r):this.xorwow=o}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var r;!function(s,a,i){var o,u=256,l=i.pow(u,6),c=i.pow(2,52),h=2*c,d=u-1;function p(e,t,n){var r=[],d=b(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,y(a)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(u):(e=new Uint8Array(u),(s.crypto||s.msCrypto).getRandomValues(e)),y(e)}catch(e){var t=s.navigator,n=t&&t.plugins;return[+new Date,s,n,s.screen,y(a)]}}():e,3),r),p=new f(r),x=function(){for(var e=p.g(6),t=l,n=0;e<c;)e=(e+n)*u,t*=u,n=p.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|p.g(4)},x.quick=function(){return p.g(4)/4294967296},x.double=x,b(y(p.S),a),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,p),e.state=function(){return m(p,{})}),n?(i.random=e,t):e})(x,d,"global"in t?t.global:this==i,t.state)}function f(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);s<u;)i[s]=s++;for(s=0;s<u;s++)i[s]=i[a=d&a+e[s%n]+(t=i[s])],i[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,i=r.S;e--;)t=i[s=d&s+1],n=n*u+i[d&(i[s]=i[a=d&a+t])+(i[a]=t)];return r.i=s,r.j=a,n})(u)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(g(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\0"}function b(e,t){for(var n,r=e+"",s=0;s<r.length;)t[d&s]=d&(n^=19*t[d&s])+r.charCodeAt(s++);return y(t)}function y(e){return String.fromCharCode.apply(0,e)}if(b(i.random(),a),e.exports){e.exports=p;try{o=n(234)}catch(e){}}else void 0===(r=function(){return p}.call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)},98:function(e,t,n){"use strict";e.exports=n.p+"acc7c9658281d9575199.wasm"},817:function(){},590:function(){},530:function(){},108:function(){},551:function(){},234:function(){}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.m=e,n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},n.p="/build/",n.b=document.baseURI||self.location.href,function(){"use strict";var e={};n.r(e),n.d(e,{assertParamsValid:function(){return cy},computeFlatOffset:function(){return ky},computeOutShape:function(){return dy},getNormalizedAxes:function(){return gy},isSliceContinous:function(){return $y},maskToAxes:function(){return hy},parseSliceParams:function(){return Iy},sliceInfo:function(){return Sy},startForAxis:function(){return wy},startIndicesWithElidedDims:function(){return by},stopForAxis:function(){return vy},stopIndicesWithElidedDims:function(){return yy},stridesForAxis:function(){return xy},stridesWithElidedDims:function(){return py}});var t={};n.r(t),n.d(t,{collectGatherOpShapeInfo:function(){return P$},computeOutShape:function(){return B$},segOpComputeOptimalWindowSize:function(){return L$}});var r={};n.r(r),n.d(r,{ERF_A1:function(){return n$},ERF_A2:function(){return r$},ERF_A3:function(){return s$},ERF_A4:function(){return a$},ERF_A5:function(){return i$},ERF_P:function(){return t$},PARALLELIZE_THRESHOLD:function(){return Wv},RowPartitionType:function(){return zv},SELU_SCALE:function(){return e$},SELU_SCALEALPHA:function(){return Qv},applyActivation:function(){return Uw},assertAndGetBroadcastShape:function(){return Kb},assertAxesAreInnerMostDims:function(){return Fx},assertParamsConsistent:function(){return Ov},assignToTypedArray:function(){return d$},axesAreInnerMostDims:function(){return Rx},calculateShapes:function(){return Jv},checkEinsumDimSizes:function(){return v$},checkPadOnDimRoundingMode:function(){return Gy},combineLocations:function(){return Ax},combineRaggedTensorToTensorShapes:function(){return Mv},complexWithEvenIndex:function(){return l$},complexWithOddIndex:function(){return c$},computeConv2DInfo:function(){return Dy},computeConv3DInfo:function(){return Oy},computeDefaultPad:function(){return Fy},computeDilation2DInfo:function(){return Ny},computeOptimalWindowSize:function(){return Uv},computeOutAndReduceShapes:function(){return Dx},computeOutShape:function(){return Fv},computePool2DInfo:function(){return Ry},computePool3DInfo:function(){return Ay},convertConv2DDataFormat:function(){return Vy},decodeEinsumEquation:function(){return x$},eitherStridesOrDilationsAreOne:function(){return Wy},expandShapeToKeepDim:function(){return Ox},exponent:function(){return f$},exponents:function(){return p$},fromStringArrayToUint8:function(){return U$},fromUint8ToStringArray:function(){return W$},getAxesPermutation:function(){return zx},getBroadcastDims:function(){return jb},getComplexWithIndex:function(){return h$},getEinsumComputePath:function(){return $$},getEinsumPermutation:function(){return w$},getFusedBiasGradient:function(){return Ww},getFusedDyActivation:function(){return Pw},getImageCenter:function(){return Vv},getInnerMostAxes:function(){return Lx},getPermuted:function(){return Hv},getRaggedRank:function(){return Bv},getReductionAxes:function(){return qb},getReshaped:function(){return Gv},getReshapedPermuted:function(){return jv},getRowPartitionTypesHelper:function(){return Lv},getSliceBeginCoords:function(){return qv},getSliceSize:function(){return Kv},getSparseFillEmptyRowsIndicesDenseShapeMismatch:function(){return _$},getSparseFillEmptyRowsNegativeIndexErrorMessage:function(){return C$},getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:function(){return T$},getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:function(){return R$},getSparseReshapeInputOutputMismatchErrorMessage:function(){return D$},getSparseReshapeInputOutputMultipleErrorMessage:function(){return A$},getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:function(){return E$},getSparseReshapeNegativeOutputDimErrorMessage:function(){return N$},getSparseSegmentReductionIndicesOutOfRangeErrorMessage:function(){return M$},getSparseSegmentReductionNegativeSegmentIdsErrorMessage:function(){return O$},getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:function(){return F$},getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:function(){return z$},getUndoAxesPermutation:function(){return Mx},isIdentityPermutation:function(){return k$},log:function(){return lm},mergeRealAndImagArrays:function(){return o$},prepareAndValidate:function(){return Xv},prepareSplitSize:function(){return S$},segment_util:function(){return t},shouldFuse:function(){return Vw},slice_util:function(){return e},splitRealAndImagArrays:function(){return u$},stridesOrDilationsArePositive:function(){return Uy},tupleValuesAreOne:function(){return Py},upcastType:function(){return cg},validateDefaultValueShape:function(){return Pv},validateInput:function(){return Zv},validateUpdateShape:function(){return Yv},warn:function(){return um}});var s={};n.r(s),n.d(s,{mx:function(){return gA},XI:function(){return uD},Nk:function(){return lD},f6:function(){return hD},ct:function(){return hA},YG:function(){return fD},hH:function(){return wD},z3:function(){return sO},sG:function(){return mO},uM:function(){return wO},vS:function(){return MO},qB:function(){return HO},GG:function(){return qO},lg:function(){return JO},rq:function(){return XO},cu:function(){return hF},WR:function(){return uF},GE:function(){return fF},px:function(){return gF},jC:function(){return RF},He:function(){return OF},hE:function(){return GF},BF:function(){return YD},Dk:function(){return ez},cl:function(){return uz},_B:function(){return vz},ub:function(){return Iz},_f:function(){return Cz},Ku:function(){return Dz},qy:function(){return Fz},Zy:function(){return qz},bu:function(){return Yz},zv:function(){return nA},dH:function(){return SA},HS:function(){return sD},yH:function(){return gM},l3:function(){return yM},z9:function(){return wM},x6:function(){return SM},_m:function(){return AM},eW:function(){return zM},GK:function(){return BM},SP:function(){return UM},yr:function(){return GM},dl:function(){return _O},Dw:function(){return YM},xT:function(){return eL},_X:function(){return AA},wz:function(){return oL}}),new Set;const a="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;class i{_listeners=(()=>"WeakMap"in a?new WeakMap:void 0)();_observer=void 0;options;constructor(e){this.options=e}observe(e,t){return this._listeners.set(e,t),this._getObserver().observe(e,this.options),()=>{this._listeners.delete(e),this._observer.unobserve(e)}}_getObserver(){return this._observer??(this._observer=new ResizeObserver((e=>{for(const t of e)i.entries.set(t.target,t),this._listeners.get(t.target)?.(t)})))}}i.entries="WeakMap"in a?new WeakMap:void 0;let o,u=!1;function l(e,t){e.appendChild(t)}function c(e,t,n){e.insertBefore(t,n||null)}function h(e){e.parentNode&&e.parentNode.removeChild(e)}function d(e){return document.createElement(e)}function p(e){return document.createTextNode(e)}function f(){return p(" ")}function m(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function g(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function b(e,t){t=""+t,e.data!==t&&(e.data=t)}function y(e,t){e.value=null==t?"":t}function x(){}function w(e){return e()}function v(){return Object.create(null)}function $(e){e.forEach(w)}function k(e){return"function"==typeof e}function I(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}function S(e,t,n){e.$$.on_destroy.push(function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];if(null==e){for(const e of n)e(void 0);return x}const s=e.subscribe(...n);return s.unsubscribe?()=>s.unsubscribe():s}(t,n))}function _(e){o=e}function C(e){(function(){if(!o)throw new Error("Function called outside component initialization");return o})().$$.on_mount.push(e)}new Map;const T=[],E=[];let N=[];const R=[],A=Promise.resolve();let D=!1;function O(e){N.push(e)}const F=new Set;let z=0;function M(){if(0!==z)return;const e=o;do{try{for(;z<T.length;){const e=T[z];z++,_(e),L(e.$$)}}catch(e){throw T.length=0,z=0,e}for(_(null),T.length=0,z=0;E.length;)E.pop()();for(let e=0;e<N.length;e+=1){const t=N[e];F.has(t)||(F.add(t),t())}N.length=0}while(T.length);for(;R.length;)R.pop()();D=!1,F.clear(),_(e)}function L(e){if(null!==e.fragment){e.update(),$(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(O)}}const B=new Set;let P,W;function U(e,t){e&&e.i&&(B.delete(e),e.i(t))}function V(e,t,n,r){if(e&&e.o){if(B.has(e))return;B.add(e),P.c.push((()=>{B.delete(e),r&&(n&&e.d(1),r())})),e.o(t)}else r&&r()}function G(e){e&&e.c()}function H(e,t,n){const{fragment:r,after_update:s}=e.$$;r&&r.m(t,n),O((()=>{const t=e.$$.on_mount.map(w).filter(k);e.$$.on_destroy?e.$$.on_destroy.push(...t):$(t),e.$$.on_mount=[]})),s.forEach(O)}function j(e,t){const n=e.$$;null!==n.fragment&&(function(e){const t=[],n=[];N.forEach((r=>-1===e.indexOf(r)?t.push(r):n.push(r))),n.forEach((e=>e())),N=t}(n.after_update),$(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function q(e,t,n,r,s,a){let i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,l=arguments.length>7&&void 0!==arguments[7]?arguments[7]:[-1];const c=o;_(e);const d=e.$$={fragment:null,ctx:[],props:a,update:x,not_equal:s,bound:v(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(c?c.$$.context:[])),callbacks:v(),dirty:l,skip_bound:!1,root:t.target||c.$$.root};i&&i(d.root);let p=!1;if(d.ctx=n?n(e,t.props||{},(function(t,n){const r=!(arguments.length<=2)&&arguments.length-2?arguments.length<=2?void 0:arguments[2]:n;return d.ctx&&s(d.ctx[t],d.ctx[t]=r)&&(!d.skip_bound&&d.bound[t]&&d.bound[t](r),p&&function(e,t){-1===e.$$.dirty[0]&&(T.push(e),D||(D=!0,A.then(M)),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(e,t)),n})):[],d.update(),p=!0,$(d.before_update),d.fragment=!!r&&r(d.ctx),t.target){if(t.hydrate){u=!0;const e=(f=t.target,Array.from(f.childNodes));d.fragment&&d.fragment.l(e),e.forEach(h)}else d.fragment&&d.fragment.c();t.intro&&U(e.$$.fragment),H(e,t.target,t.anchor),u=!1,M()}var f;_(c)}function K(e,t,n,r){const s=n[e]?.type;if(t="Boolean"===s&&"boolean"!=typeof t?null!=t:t,!r||!n[e])return t;if("toAttribute"===r)switch(s){case"Object":case"Array":return null==t?null:JSON.stringify(t);case"Boolean":return t?"":null;case"Number":return null==t?null:t;default:return t}else switch(s){case"Object":case"Array":return t&&JSON.parse(t);case"Boolean":default:return t;case"Number":return null!=t?+t:t}}new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","inert","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]),"function"==typeof HTMLElement&&(W=class extends HTMLElement{$$ctor;$$s;$$c;$$cn=!1;$$d={};$$r=!1;$$p_d={};$$l={};$$l_u=(()=>new Map)();constructor(e,t,n){super(),this.$$ctor=e,this.$$s=t,n&&this.attachShadow({mode:"open"})}addEventListener(e,t,n){if(this.$$l[e]=this.$$l[e]||[],this.$$l[e].push(t),this.$$c){const n=this.$$c.$on(e,t);this.$$l_u.set(t,n)}super.addEventListener(e,t,n)}removeEventListener(e,t,n){if(super.removeEventListener(e,t,n),this.$$c){const e=this.$$l_u.get(t);e&&(e(),this.$$l_u.delete(t))}}async connectedCallback(){if(this.$$cn=!0,!this.$$c){if(await Promise.resolve(),!this.$$cn||this.$$c)return;function e(e){return()=>{let t;return{c:function(){t=d("slot"),"default"!==e&&g(t,"name",e)},m:function(e,n){c(e,t,n)},d:function(e){e&&h(t)}}}}const t={},n=function(e){const t={};return e.childNodes.forEach((e=>{t[e.slot||"default"]=!0})),t}(this);for(const s of this.$$s)s in n&&(t[s]=[e(s)]);for(const a of this.attributes){const i=this.$$g_p(a.name);i in this.$$d||(this.$$d[i]=K(i,a.value,this.$$p_d,"toProp"))}for(const o in this.$$p_d)o in this.$$d||void 0===this[o]||(this.$$d[o]=this[o],delete this[o]);this.$$c=new this.$$ctor({target:this.shadowRoot||this,props:{...this.$$d,$$slots:t,$$scope:{ctx:[]}}});const r=()=>{this.$$r=!0;for(const e in this.$$p_d)if(this.$$d[e]=this.$$c.$$.ctx[this.$$c.$$.props[e]],this.$$p_d[e].reflect){const t=K(e,this.$$d[e],this.$$p_d,"toAttribute");null==t?this.removeAttribute(this.$$p_d[e].attribute||e):this.setAttribute(this.$$p_d[e].attribute||e,t)}this.$$r=!1};this.$$c.$$.after_update.push(r),r();for(const u in this.$$l)for(const l of this.$$l[u]){const p=this.$$c.$on(u,l);this.$$l_u.set(l,p)}this.$$l={}}}attributeChangedCallback(e,t,n){this.$$r||(e=this.$$g_p(e),this.$$d[e]=K(e,n,this.$$p_d,"toProp"),this.$$c?.$set({[e]:this.$$d[e]}))}disconnectedCallback(){this.$$cn=!1,Promise.resolve().then((()=>{!this.$$cn&&this.$$c&&(this.$$c.$destroy(),this.$$c=void 0)}))}$$g_p(e){return Object.keys(this.$$p_d).find((t=>this.$$p_d[t].attribute===e||!this.$$p_d[t].attribute&&t.toLowerCase()===e))||e}});class X{$$=void 0;$$set=void 0;$destroy(){j(this,1),this.$destroy=x}$on(e,t){if(!k(t))return x;const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){var t;this.$$set&&(t=e,0!==Object.keys(t).length)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}"undefined"!=typeof window&&(window.__svelte||(window.__svelte={v:new Set})).v.add("4");var Y,Z,J,Q,ee,te,ne,re,se,ae,ie,oe,ue,le,ce,he,de,pe,fe,me,ge,be,ye,xe,we,ve,$e,ke,Ie,Se,_e,Ce,Te,Ee=Object.defineProperty,Ne=Object.getOwnPropertyDescriptor,Re=Object.getOwnPropertyNames,Ae=Object.prototype.hasOwnProperty,De=(Y=function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')},typeof require<"u"?require:typeof Proxy<"u"?new Proxy(Y,{get:(e,t)=>(typeof require<"u"?require:e)[t]}):Y),Oe=(e,t)=>()=>(e&&(t=e(e=0)),t),Fe=(e,t)=>{for(var n in t)Ee(e,n,{get:t[n],enumerable:!0})},ze=e=>((e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let n of Re(t))!Ae.call(e,n)&&undefined!==n&&Ee(e,n,{get:()=>t[n],enumerable:!(r=Ne(t,n))||r.enumerable});return e})(Ee({},"__esModule",{value:!0}),e),Me=Oe((()=>{Z=new Map,J=[],Q=(e,t,n)=>{if(!t||"function"!=typeof t.init||"function"!=typeof t.createInferenceSessionHandler)throw new TypeError("not a valid backend");{let r=Z.get(e);if(void 0===r)Z.set(e,{backend:t,priority:n});else{if(r.priority>n)return;if(r.priority===n&&r.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${n}`)}if(n>=0){let t=J.indexOf(e);-1!==t&&J.splice(t,1);for(let t=0;t<J.length;t++)if(Z.get(J[t]).priority<=n)return void J.splice(t,0,e);J.push(e)}}},ee=async e=>{let t=Z.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{let n=!!t.initPromise;try{return n||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(e){return n||(t.error=`${e}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},te=async e=>{let t,n=e.executionProviders||[],r=n.map((e=>"string"==typeof e?e:e.name)),s=0===r.length?J:r,a=[],i=new Set;for(let e of s){let n=await ee(e);"string"==typeof n?a.push({name:e,err:n}):(t||(t=n),t===n&&i.add(e))}if(!t)throw new Error(`no available backend found. ERR: ${a.map((e=>`[${e.name}] ${e.err}`)).join(", ")}`);for(let{name:e,err:t}of a)r.includes(e)&&console.warn(`removing requested execution provider "${e}" from session options because it is not available: ${t}`);let o=n.filter((e=>i.has("string"==typeof e?e:e.name)));return[t,new Proxy(e,{get:(e,t)=>"executionProviders"===t?o:Reflect.get(e,t)})]}})),Le=Oe((()=>{Me()})),Be=Oe((()=>{ne="1.19.0-dev.20240730-530a2d7b41"})),Pe=Oe((()=>{Be(),re="warning",se={wasm:{},webgl:{},webgpu:{},versions:{common:ne},set logLevel(e){if(void 0!==e){if("string"!=typeof e||-1===["verbose","info","warning","error","fatal"].indexOf(e))throw new Error(`Unsupported logging level: ${e}`);re=e}},get logLevel(){return re}},Object.defineProperty(se,"logLevel",{enumerable:!0})})),We=Oe((()=>{Pe(),ae=se})),Ue=Oe((()=>{ie=(e,t)=>{let n=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);n.width=e.dims[3],n.height=e.dims[2];let r=n.getContext("2d");if(null!=r){let s,a;void 0!==t?.tensorLayout&&"NHWC"===t.tensorLayout?(s=e.dims[2],a=e.dims[3]):(s=e.dims[3],a=e.dims[2]);let i,o,u=void 0!==t?.format?t.format:"RGB",l=t?.norm;void 0===l||void 0===l.mean?i=[255,255,255,255]:"number"==typeof l.mean?i=[l.mean,l.mean,l.mean,l.mean]:(i=[l.mean[0],l.mean[1],l.mean[2],0],void 0!==l.mean[3]&&(i[3]=l.mean[3])),void 0===l||void 0===l.bias?o=[0,0,0,0]:"number"==typeof l.bias?o=[l.bias,l.bias,l.bias,l.bias]:(o=[l.bias[0],l.bias[1],l.bias[2],0],void 0!==l.bias[3]&&(o[3]=l.bias[3]));let c=a*s,h=0,d=c,p=2*c,f=-1;"RGBA"===u?(h=0,d=c,p=2*c,f=3*c):"RGB"===u?(h=0,d=c,p=2*c):"RBG"===u&&(h=0,p=c,d=2*c);for(let t=0;t<a;t++)for(let n=0;n<s;n++){let s=(e.data[h++]-o[0])*i[0],a=(e.data[d++]-o[1])*i[1],u=(e.data[p++]-o[2])*i[2],l=-1===f?255:(e.data[f++]-o[3])*i[3];r.fillStyle="rgba("+s+","+a+","+u+","+l+")",r.fillRect(n,t,1,1)}if("toDataURL"in n)return n.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")},oe=(e,t)=>{let n,r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");if(null==r)throw new Error("Can not access image data");{let s,a,i;void 0!==t?.tensorLayout&&"NHWC"===t.tensorLayout?(s=e.dims[2],a=e.dims[1],i=e.dims[3]):(s=e.dims[3],a=e.dims[2],i=e.dims[1]);let o,u,l=void 0!==t&&void 0!==t.format?t.format:"RGB",c=t?.norm;void 0===c||void 0===c.mean?o=[255,255,255,255]:"number"==typeof c.mean?o=[c.mean,c.mean,c.mean,c.mean]:(o=[c.mean[0],c.mean[1],c.mean[2],255],void 0!==c.mean[3]&&(o[3]=c.mean[3])),void 0===c||void 0===c.bias?u=[0,0,0,0]:"number"==typeof c.bias?u=[c.bias,c.bias,c.bias,c.bias]:(u=[c.bias[0],c.bias[1],c.bias[2],0],void 0!==c.bias[3]&&(u[3]=c.bias[3]));let h=a*s;if(void 0!==t&&(void 0!==t.format&&4===i&&"RGBA"!==t.format||3===i&&"RGB"!==t.format&&"BGR"!==t.format))throw new Error("Tensor format doesn't match input tensor dims");let d=4,p=0,f=1,m=2,g=3,b=0,y=h,x=2*h,w=-1;"RGBA"===l?(b=0,y=h,x=2*h,w=3*h):"RGB"===l?(b=0,y=h,x=2*h):"RBG"===l&&(b=0,x=h,y=2*h),n=r.createImageData(s,a);for(let t=0;t<a*s;p+=d,f+=d,m+=d,g+=d,t++)n.data[p]=(e.data[b++]-u[0])*o[0],n.data[f]=(e.data[y++]-u[1])*o[1],n.data[m]=(e.data[x++]-u[2])*o[2],n.data[g]=-1===w?255:(e.data[w++]-u[3])*o[3]}return n}})),Ve=Oe((()=>{je(),ue=(e,t)=>{if(void 0===e)throw new Error("Image buffer must be defined");if(void 0===t.height||void 0===t.width)throw new Error("Image height and width must be defined");if("NHWC"===t.tensorLayout)throw new Error("NHWC Tensor layout is not supported yet");let n,r,{height:s,width:a}=t,i=t.norm??{mean:255,bias:0};n="number"==typeof i.mean?[i.mean,i.mean,i.mean,i.mean]:[i.mean[0],i.mean[1],i.mean[2],i.mean[3]??255],r="number"==typeof i.bias?[i.bias,i.bias,i.bias,i.bias]:[i.bias[0],i.bias[1],i.bias[2],i.bias[3]??0];let o=void 0!==t.format?t.format:"RGBA",u=void 0!==t.tensorFormat&&void 0!==t.tensorFormat?t.tensorFormat:"RGB",l=s*a,c="RGBA"===u?new Float32Array(4*l):new Float32Array(3*l),h=4,d=0,p=1,f=2,m=3,g=0,b=l,y=2*l,x=-1;"RGB"===o&&(h=3,d=0,p=1,f=2,m=-1),"RGBA"===u?x=3*l:"RBG"===u?(g=0,y=l,b=2*l):"BGR"===u&&(y=0,b=l,g=2*l);for(let t=0;t<l;t++,d+=h,f+=h,p+=h,m+=h)c[g++]=(e[d]+r[0])/n[0],c[b++]=(e[p]+r[1])/n[1],c[y++]=(e[f]+r[2])/n[2],-1!==x&&-1!==m&&(c[x++]=(e[m]+r[3])/n[3]);return new xe("float32",c,"RGBA"===u?[1,4,s,a]:[1,3,s,a])},le=async(e,t)=>{let n,r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,s=typeof ImageData<"u"&&e instanceof ImageData,a=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,i="string"==typeof e,o=t??{},u=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},l=e=>e instanceof HTMLCanvasElement||e instanceof OffscreenCanvas?e.getContext("2d"):null;if(r){let r=u();r.width=e.width,r.height=e.height;let s=l(r);if(null==s)throw new Error("Can not access image data");{let r=e.height,a=e.width;if(void 0!==t&&void 0!==t.resizedHeight&&void 0!==t.resizedWidth&&(r=t.resizedHeight,a=t.resizedWidth),void 0!==t){if(o=t,void 0!==t.tensorFormat)throw new Error("Image input config format must be RGBA for HTMLImageElement");o.tensorFormat="RGBA",o.height=r,o.width=a}else o.tensorFormat="RGBA",o.height=r,o.width=a;s.drawImage(e,0,0),n=s.getImageData(0,0,a,r).data}}else{if(!s){if(a){if(void 0===t)throw new Error("Please provide image config with format for Imagebitmap");let r=u();r.width=e.width,r.height=e.height;let s=l(r);if(null!=s){let t=e.height,r=e.width;return s.drawImage(e,0,0,r,t),n=s.getImageData(0,0,r,t).data,o.height=t,o.width=r,ue(n,o)}throw new Error("Can not access image data")}if(i)return new Promise(((t,n)=>{let r=u(),s=l(r);if(!e||!s)return n();let a=new Image;a.crossOrigin="Anonymous",a.src=e,a.onload=()=>{r.width=a.width,r.height=a.height,s.drawImage(a,0,0,r.width,r.height);let e=s.getImageData(0,0,r.width,r.height);o.height=r.height,o.width=r.width,t(ue(e.data,o))}}));throw new Error("Input data provided is not supported - aborted tensor creation")}{let r,s;if(void 0!==t&&void 0!==t.resizedWidth&&void 0!==t.resizedHeight?(r=t.resizedHeight,s=t.resizedWidth):(r=e.height,s=e.width),void 0!==t&&(o=t),o.format="RGBA",o.height=r,o.width=s,void 0!==t){let t=u();t.width=s,t.height=r;let a=l(t);if(null==a)throw new Error("Can not access image data");a.putImageData(e,0,0),n=a.getImageData(0,0,s,r).data}else n=e.data}}if(void 0!==n)return ue(n,o);throw new Error("Input data provided is not supported - aborted tensor creation")},ce=(e,t)=>{let{width:n,height:r,download:s,dispose:a}=t;return new xe({location:"texture",type:"float32",texture:e,dims:[1,r,n,4],download:s,dispose:a})},he=(e,t)=>{let{dataType:n,dims:r,download:s,dispose:a}=t;return new xe({location:"gpu-buffer",type:n??"float32",gpuBuffer:e,dims:r,download:s,dispose:a})},de=(e,t,n)=>new xe({location:"cpu-pinned",type:e,data:t,dims:n??[t.length]})})),Ge=Oe((()=>{pe=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),fe=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),me=!1,ge=()=>{if(!me){me=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,n=typeof Float16Array<"u"&&Float16Array.from;e&&(pe.set("int64",BigInt64Array),fe.set(BigInt64Array,"int64")),t&&(pe.set("uint64",BigUint64Array),fe.set(BigUint64Array,"uint64")),n?(pe.set("float16",Float16Array),fe.set(Float16Array,"float16")):pe.set("float16",Uint16Array)}}})),He=Oe((()=>{je(),be=e=>{let t=1;for(let n=0;n<e.length;n++){let r=e[n];if("number"!=typeof r||!Number.isSafeInteger(r))throw new TypeError(`dims[${n}] must be an integer, got: ${r}`);if(r<0)throw new RangeError(`dims[${n}] must be a non-negative integer, got: ${r}`);t*=r}return t},ye=(e,t)=>{switch(e.location){case"cpu":return new xe(e.type,e.data,t);case"cpu-pinned":return new xe({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new xe({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new xe({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}})),je=Oe((()=>{Ue(),Ve(),Ge(),He(),xe=class{constructor(e,t,n){let r,s;if(ge(),"object"==typeof e&&"location"in e)switch(this.dataLocation=e.location,r=e.type,s=e.dims,e.location){case"cpu-pinned":{let t=pe.get(r);if(!t)throw new TypeError(`unsupported type "${r}" to create tensor from pinned buffer`);if(!(e.data instanceof t))throw new TypeError(`buffer should be of type ${t.name}`);this.cpuData=e.data;break}case"texture":if("float32"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break;case"gpu-buffer":if("float32"!==r&&"float16"!==r&&"int32"!==r&&"int64"!==r&&"uint32"!==r&&"uint8"!==r&&"bool"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let a,i;if("string"==typeof e)if(r=e,i=n,"string"===e){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");a=t}else{let n=pe.get(e);if(void 0===n)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if("float16"===e&&n===Uint16Array)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");a="uint64"===e||"int64"===e?n.from(t,BigInt):n.from(t)}else{if(!(t instanceof n))throw new TypeError(`A ${r} tensor's data must be type of ${n}`);a=t}}else if(i=t,Array.isArray(e)){if(0===e.length)throw new TypeError("Tensor type cannot be inferred from an empty array.");let t=typeof e[0];if("string"===t)r="string",a=e;else{if("boolean"!==t)throw new TypeError(`Invalid element type of data array: ${t}.`);r="bool",a=Uint8Array.from(e)}}else{let t=fe.get(e.constructor);if(void 0===t)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);r=t,a=e}if(void 0===i)i=[a.length];else if(!Array.isArray(i))throw new TypeError("A tensor's dims must be a number array");s=i,this.cpuData=a,this.dataLocation="cpu"}let a=be(s);if(this.cpuData&&a!==this.cpuData.length)throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);this.type=r,this.dims=s,this.size=a}static async fromImage(e,t){return le(e,t)}static fromTexture(e,t){return ce(e,t)}static fromGpuBuffer(e,t){return he(e,t)}static fromPinnedBuffer(e,t,n){return de(e,t,n)}toDataURL(e){return ie(this,e)}toImageData(e){return oe(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if("none"===this.dataLocation)throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return ye(this,e)}}})),qe=Oe((()=>{je(),we=xe})),Ke=Oe((()=>{Pe(),ve=(e,t)=>{(typeof se.trace>"u"?!se.wasm.trace:!se.trace)||console.timeStamp(`${e}::ORT::${t}`)},$e=(e,t)=>{let n=(new Error).stack?.split(/\r\n|\r|\n/g)||[],r=!1;for(let s=0;s<n.length;s++){if(r&&!n[s].includes("TRACE_FUNC")){let r=`FUNC_${e}::${n[s].trim().split(" ")[1]}`;return t&&(r+=`::${t}`),void ve("CPU",r)}n[s].includes("TRACE_FUNC")&&(r=!0)}},ke=e=>{(typeof se.trace>"u"?!se.wasm.trace:!se.trace)||$e("BEGIN",e)},Ie=e=>{(typeof se.trace>"u"?!se.wasm.trace:!se.trace)||$e("END",e)}})),Xe=Oe((()=>{Me(),qe(),Ke(),Se=class e{constructor(e){this.handler=e}async run(e,t,n){ke();let r={},s={};if("object"!=typeof e||null===e||e instanceof we||Array.isArray(e))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if("object"==typeof t){if(null===t)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof we)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(0===t.length)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(let e of t){if("string"!=typeof e)throw new TypeError("'fetches' must be a string array or an object.");if(-1===this.outputNames.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);r[e]=null}if("object"==typeof n&&null!==n)s=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let e=!1,i=Object.getOwnPropertyNames(t);for(let n of this.outputNames)if(-1!==i.indexOf(n)){let s=t[n];(null===s||s instanceof we)&&(e=!0,a=!1,r[n]=s)}if(e){if("object"==typeof n&&null!==n)s=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else s=t}}else if(typeof t<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let t of this.inputNames)if(typeof e[t]>"u")throw new Error(`input '${t}' is missing in 'feeds'.`);if(a)for(let e of this.outputNames)r[e]=null;let i=await this.handler.run(e,r,s),o={};for(let e in i)if(Object.hasOwnProperty.call(i,e)){let t=i[e];o[e]=t instanceof we?t:new we(t.type,t.data,t.dims)}return Ie(),o}async release(){return this.handler.dispose()}static async create(t,n,r,s){ke();let a,i={};if("string"==typeof t){if(a=t,"object"==typeof n&&null!==n)i=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(a=t,"object"==typeof n&&null!==n)i=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{if(!(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{let e=t,o=0,u=t.byteLength;if("object"==typeof n&&null!==n)i=n;else if("number"==typeof n){if(o=n,!Number.isSafeInteger(o))throw new RangeError("'byteOffset' must be an integer.");if(o<0||o>=e.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${e.byteLength}).`);if(u=t.byteLength-o,"number"==typeof r){if(u=r,!Number.isSafeInteger(u))throw new RangeError("'byteLength' must be an integer.");if(u<=0||o+u>e.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${e.byteLength-o}].`);if("object"==typeof s&&null!==s)i=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else if(typeof r<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof n<"u")throw new TypeError("'options' must be an object.");a=new Uint8Array(e,o,u)}}let[o,u]=await te(i),l=await o.createInferenceSessionHandler(a,u);return Ie(),new e(l)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}})),Ye=Oe((()=>{Xe(),_e=Se})),Ze=Oe((()=>{})),Je=Oe((()=>{})),Qe=Oe((()=>{})),et=Oe((()=>{})),tt=Oe((()=>{Me(),qe(),Ce=class e{constructor(e,t,n){this.handler=e,this.hasOptimizerModel=t,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,n){let r=t.evalModel||"",s=t.optimizerModel||"",a=n||{},[i,o]=await te(a);if(i.createTrainingSessionHandler){let n=await i.createTrainingSessionHandler(t.checkpointState,t.trainModel,r,s,o);return new e(n,!!t.optimizerModel,!!t.evalModel)}throw new Error("Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.")}typeNarrowingForRunStep(e,t,n,r,s){let a={},i={};if("object"!=typeof n||null===n||n instanceof we||Array.isArray(n))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let o=!0;if("object"==typeof r){if(null===r)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof we)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(0===r.length)throw new TypeError("'fetches' cannot be an empty array.");o=!1;for(let e of r){if("string"!=typeof e)throw new TypeError("'fetches' must be a string array or an object.");if(-1===t.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);a[e]=null}if("object"==typeof s&&null!==s)i=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else{let e=!1,n=Object.getOwnPropertyNames(r);for(let s of t)if(-1!==n.indexOf(s)){let t=r[s];(null===t||t instanceof we)&&(e=!0,o=!1,a[s]=t)}if(e){if("object"==typeof s&&null!==s)i=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else i=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let t of e)if(typeof n[t]>"u")throw new Error(`input '${t}' is missing in 'feeds'.`);if(o)for(let e of t)a[e]=null;return[a,i]}convertHandlerReturnTypeToMapOfTensors(e){let t={};for(let n in e)if(Object.hasOwnProperty.call(e,n)){let r=e[n];t[n]=r instanceof we?r:new we(r.type,r.data,r.dims)}return t}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(e,t,n){let[r,s]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,e,t,n),a=await this.handler.runTrainStep(e,r,s);return this.convertHandlerReturnTypeToMapOfTensors(a)}async runOptimizerStep(e){if(!this.hasOptimizerModel)throw new Error("This TrainingSession has no OptimizerModel loaded.");await this.handler.runOptimizerStep(e||{})}async runEvalStep(e,t,n){if(this.hasEvalModel){let[r,s]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,e,t,n),a=await this.handler.runEvalStep(e,r,s);return this.convertHandlerReturnTypeToMapOfTensors(a)}throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(e=!0){return this.handler.getParametersSize(e)}async loadParametersBuffer(e,t=!0){let n=await this.getParametersSize(t);if(e.length!==4*n)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(e,t)}async getContiguousParameters(e=!0){return this.handler.getContiguousParameters(e)}async release(){return this.handler.dispose()}}})),nt=Oe((()=>{tt(),Te=Ce}));Fe({},{InferenceSession:()=>_e,TRACE:()=>ve,TRACE_FUNC_BEGIN:()=>ke,TRACE_FUNC_END:()=>Ie,Tensor:()=>we,TrainingSession:()=>Te,env:()=>ae,registerBackend:()=>Q});var rt=Oe((()=>{Le(),We(),Ye(),qe(),Ze(),Je(),Ke(),Qe(),et(),nt()})),st=Oe((()=>{})),at={};Fe(at,{default:()=>ut});var it,ot,ut,lt=Oe((()=>{Qc(),sl(),rl(),it="ort-wasm-proxy-worker",(ot=globalThis.self?.name===it)&&(self.onmessage=e=>{let{type:t,in:n}=e.data;try{switch(t){case"init-wasm":Tt(n.wasm).then((()=>{yc(n).then((()=>{postMessage({type:t})}),(e=>{postMessage({type:t,err:e})}))}),(e=>{postMessage({type:t,err:e})}));break;case"init-ep":{let{epName:e,env:r}=n;xc(r,e).then((()=>{postMessage({type:t})}),(e=>{postMessage({type:t,err:e})}));break}case"copy-from":{let{buffer:e}=n,r=$c(e);postMessage({type:t,out:r});break}case"create":{let{model:e,options:r}=n;kc(e,r).then((e=>{postMessage({type:t,out:e})}),(e=>{postMessage({type:t,err:e})}));break}case"release":Ic(n),postMessage({type:t});break;case"run":{let{sessionId:e,inputIndices:r,inputs:s,outputIndices:a,options:i}=n;_c(e,r,s,a,new Array(a.length).fill(null),i).then((e=>{e.some((e=>"cpu"!==e[3]))?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:e},Tc([...s,...e]))}),(e=>{postMessage({type:t,err:e})}));break}case"end-profiling":Cc(n),postMessage({type:t})}}catch(e){postMessage({type:t,err:e})}}),ut=ot?null:e=>new Worker(e??ft,{type:"module",name:it})})),ct={};Fe(ct,{default:()=>pt});var ht,dt,pt,ft,mt,gt,bt,yt,xt,wt,vt,$t,kt,It,St,_t,Ct,Tt,Et,Nt,Rt,At,Dt,Ot,Ft,zt,Mt,Lt,Bt,Pt,Wt,Ut,Vt,Gt,Ht,jt,qt,Kt,Xt,Yt,Zt,Jt,Qt,en,tn,nn,rn,sn,an,on,un,ln,cn,hn,dn,pn,fn,mn,gn,bn,yn,xn,wn,vn,$n,kn,In,Sn,_n,Cn,Tn,En,Nn,Rn,An,Dn,On,Fn,zn,Mn,Ln,Bn,Pn,Wn,Un,Vn,Gn,Hn,jn,qn,Kn,Xn,Yn,Zn,Jn,Qn,er,tr,nr,rr,sr,ar,ir,or,ur,lr,cr,hr,dr,pr,fr,mr,gr,br,yr,xr,wr,vr,$r,kr,Ir,Sr,_r,Cr,Tr,Er,Nr,Rr,Ar,Dr,Or,Fr,zr,Mr,Lr,Br,Pr,Wr,Ur,Vr,Gr,Hr,jr,qr,Kr,Xr,Yr,Zr,Jr,Qr,es,ts,ns,rs,ss,as,is,os,us,ls,cs,hs,ds,ps,fs,ms,gs,bs,ys,xs,ws,vs,$s,ks,Is,Ss,_s,Cs,Ts,Es,Ns,Rs,As,Ds,Os,Fs,zs,Ms,Ls,Bs,Ps,Ws,Us,Vs,Gs,Hs,js,qs,Ks,Xs,Ys,Zs,Js,Qs,ea,ta,na,ra,sa,aa,ia,oa,ua,la,ca,ha,da,pa,fa,ma,ga,ba,ya,xa,wa,va,$a,ka,Ia,Sa,_a,Ca,Ta,Ea,Na,Ra,Aa,Da,Oa,Fa,za,Ma,La,Ba,Pa,Wa,Ua,Va,Ga,Ha,ja,qa,Ka,Xa,Ya,Za,Ja,Qa,ei,ti,ni,ri,si,ai,ii,oi,ui,li,ci,hi,di,pi,fi,mi,gi,bi,yi,xi,wi,vi,$i,ki,Ii,Si,_i,Ci,Ti,Ei,Ni,Ri,Ai,Di,Oi,Fi,zi,Mi,Li,Bi,Pi,Wi,Ui,Vi,Gi,Hi,ji,qi,Ki,Xi,Yi,Zi,Ji,Qi,eo,to,no,ro,so,ao,io,oo,uo,lo,co,ho,po,fo,mo,go,bo,yo,xo,wo,vo,$o,ko,Io,So,_o,Co,To,Eo,No,Ro,Ao,Do,Oo,Fo,zo,Mo,Lo,Bo,Po,Wo,Uo,Vo,Go,Ho,jo,qo,Ko,Xo,Yo,Zo,Jo,Qo,eu,tu,nu,ru,su,au,iu,ou,uu,lu,cu,hu,du,pu,fu,mu,gu,bu,yu,xu,wu,vu,$u,ku,Iu,Su,_u,Cu,Tu,Eu,Nu,Ru,Au,Du,Ou,Fu,zu,Mu,Lu,Bu,Pu,Wu,Uu,Vu,Gu,Hu,ju,qu,Ku,Xu,Yu,Zu,Ju,Qu,el,tl,nl=Oe((()=>{ht="file:///Users/focus/Projects/krea/webgpu-sam2/svelte-webpack/node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs",dt=async function(e={}){function t(){return R.buffer!=O.buffer&&H(),O}function r(){return R.buffer!=O.buffer&&H(),F}function s(){return R.buffer!=O.buffer&&H(),z}function a(){return R.buffer!=O.buffer&&H(),M}function i(){return R.buffer!=O.buffer&&H(),L}function o(){return R.buffer!=O.buffer&&H(),B}function u(){return R.buffer!=O.buffer&&H(),P}function l(){return R.buffer!=O.buffer&&H(),V}var c,h,d=Object.assign({},e),p=new Promise(((e,t)=>{c=e,h=t})),f="object"==typeof window,m="function"==typeof importScripts,g=m&&"em-pthread"==self.name;d.mountExternalData=(e,t)=>{(d.Fb||(d.Fb=new Map)).set(e,t)},d.unmountExternalData=()=>{delete d.Fb};var b=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,shared:!0}).buffer.constructor;let y=()=>{let e=(e,t,n)=>(...r)=>{let s=qt,a=t?.();r=e(...r);let i=t?.();return a!==i&&(e=i,n(a),t=n=null),qt!=s?new Promise(((e,t)=>{Qt={resolve:e,reject:t}})):r},t=e=>async(...t)=>{try{if(d.Eb)throw Error("Session already started");let n=d.Eb={bc:t[0],errors:[]},r=await e(...t);if(d.Eb!==n)throw Error("Session mismatch");d.Mb?.flush();let s=n.errors;if(0<s.length){let e=await Promise.all(s);if(e=e.filter((e=>e)),0<e.length)throw Error(e.join("\n"))}return r}finally{d.Eb=null}};d._OrtCreateSession=e(d._OrtCreateSession,(()=>d._OrtCreateSession),(e=>d._OrtCreateSession=e)),d._OrtRun=t(e(d._OrtRun,(()=>d._OrtRun),(e=>d._OrtRun=e))),d._OrtRunWithBinding=t(e(d._OrtRunWithBinding,(()=>d._OrtRunWithBinding),(e=>d._OrtRunWithBinding=e))),d._OrtBindInput=e(d._OrtBindInput,(()=>d._OrtBindInput),(e=>d._OrtBindInput=e)),y=void 0};d.jsepInit=(e,t)=>{if(y?.(),"webgpu"===e){[d.Mb,d.Tb,d.Xb,d.Nb,d.Wb,d.jb,d.Yb,d.$b,d.Ub,d.Vb,d.Zb]=t;let e=d.Mb;d.jsepRegisterBuffer=(t,n,r,s)=>e.registerBuffer(t,n,r,s),d.jsepGetBuffer=t=>e.getBuffer(t),d.jsepCreateDownloader=(t,n,r)=>e.createDownloader(t,n,r),d.jsepOnReleaseSession=t=>{e.onReleaseSession(t)},d.jsepOnRunStart=t=>e.onRunStart(t)}};var x,w,v=Object.assign({},d),$=(e,t)=>{throw t},k="";(f||m)&&(m?k=self.location.href:typeof document<"u"&&document.currentScript&&(k=document.currentScript.src),ht&&(k=ht),k=k.startsWith("blob:")?"":k.substr(0,k.replace(/[?#].*/,"").lastIndexOf("/")+1),m&&(w=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),x=(e,t,n)=>{var r=new XMLHttpRequest;r.open("GET",e,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var I,S=console.log.bind(console),_=console.error.bind(console),C=S,T=_;if(Object.assign(d,v),v=null,g){let e=function(t){try{var n=t.data,r=n.cmd;if("load"===r){let t=[];self.onmessage=e=>t.push(e),self.startWorker=()=>{postMessage({cmd:"loaded"});for(let n of t)e(n);self.onmessage=e};for(let e of n.handlers)d[e]&&!d[e].proxy||(d[e]=(...t)=>{postMessage({Lb:"callHandler",kc:e,args:t})},"print"==e&&(C=d[e]),"printErr"==e&&(T=d[e]));R=n.wasmMemory,H(),E(n.wasmModule)}else if("run"===r){kr(n.pthread_ptr,0,0,1,0,0),Ft(n.pthread_ptr),_e(),$e(),N||(yr(),N=!0);try{Ce(n.start_routine,n.arg)}catch(e){if("unwind"!=e)throw e}}else"cancel"===r?wr()&&Cr(-1):"setimmediate"!==n.target&&("checkMailbox"===r?N&&zt():r&&(T(`worker: received unknown command ${r}`),T(n)))}catch(e){throw Ir(),e}};var E,N=!1;T=function(...e){e=e.join(" "),console.error(e)},self.alert=function(...e){postMessage({Lb:"alert",text:e.join(" "),mc:wr()})},d.instantiateWasm=(e,t)=>new Promise((e=>{E=n=>{n=new WebAssembly.Instance(n,ae()),t(n),e()}})),self.onunhandledrejection=e=>{throw e.reason||e},self.onmessage=e}d.wasmBinary&&(I=d.wasmBinary);var R,A,D,O,F,z,M,L,B,P,W,U,V,G=!1;function H(){var e=R.buffer;d.HEAP8=O=new Int8Array(e),d.HEAP16=z=new Int16Array(e),d.HEAPU8=F=new Uint8Array(e),d.HEAPU16=M=new Uint16Array(e),d.HEAP32=L=new Int32Array(e),d.HEAPU32=B=new Uint32Array(e),d.HEAPF32=P=new Float32Array(e),d.HEAPF64=V=new Float64Array(e),d.HEAP64=W=new BigInt64Array(e),d.HEAPU64=U=new BigUint64Array(e)}if(!g){if(!((R=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0})).buffer instanceof b))throw T("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");H()}var j=[],q=[],K=[],X=0,Y=null,Z=null;function J(){if(0==--X&&(null!==Y&&(clearInterval(Y),Y=null),Z)){var e=Z;Z=null,e()}}function Q(e){throw T(e="Aborted("+e+")"),G=!0,D=1,e=new WebAssembly.RuntimeError(e+". Build with -sASSERTIONS for more info."),h(e),e}var ee,te=e=>e.startsWith("data:application/octet-stream;base64,"),ne=e=>e.startsWith("file://");function re(e){if(e==ee&&I)return new Uint8Array(I);if(w)return w(e);throw"both async and sync fetching of the wasm failed"}function se(e,t,n){return function(e){if(!I&&(f||m)){if("function"==typeof fetch&&!ne(e))return fetch(e,{credentials:"same-origin"}).then((t=>{if(!t.ok)throw`failed to load wasm binary file at '${e}'`;return t.arrayBuffer()})).catch((()=>re(e)));if(x)return new Promise(((t,n)=>{x(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>re(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then(n,(e=>{T(`failed to asynchronously prepare wasm: ${e}`),Q(e)}))}function ae(){return{a:{M:ue,za:oe,b:Ee,$:Re,z:Fe,pa:ze,X:Pe,Z:We,qa:Ue,na:Ve,ga:Ge,ma:He,J:je,Y:qe,V:Ke,oa:Xe,W:Ye,va:Qe,D:it,P:ut,O:bt,C:xt,s:wt,p:vt,E:$t,y:Nt,Q:Rt,ta:At,ja:Dt,T:Mt,aa:Bt,F:Pt,ia:Ft,sa:Wt,u:Gt,B:nn,o:sn,m:un,c:dt,n:cn,k:fn,Aa:mn,r:gn,f:bn,v:yn,l:xn,g:wn,i:vn,j:$n,h:kn,e:In,da:Sn,ea:En,fa:Nn,ba:Rn,ca:An,S:Dn,d:zn,N:Mn,G:Ln,K:Bn,w:Pn,ra:Un,U:Vn,t:Wn,x:Gn,L:Hn,R:jn,ya:Yn,xa:Zn,ka:tr,la:nr,_:ge,A:rr,I:sr,ha:ar,H:or,a:R,wa:fe,ua:hr,q:dr}}}var ie={849252:(e,t,n,s)=>{if(void 0===d||!d.Fb)return 1;if((e=Oe(e>>>0)).startsWith("./")&&(e=e.substring(2)),!(e=d.Fb.get(e)))return 2;if(s>>>=0,(t>>>=0)+(n>>>=0)>e.byteLength)return 3;try{return r().set(e.subarray(t,t+n),s>>>0),0}catch{return 4}},849753:()=>{d.Ub()},849784:()=>{d.Vb()},849813:()=>{d.Zb()},849838:e=>d.Tb(e),849871:e=>d.Xb(e),849903:(e,t,n)=>{d.Nb(e,t,n,!0)},849942:(e,t,n)=>{d.Nb(e,t,n)},849975:()=>typeof wasmOffsetConverter<"u",850032:e=>{d.jb("Abs",e,void 0)},850083:e=>{d.jb("Neg",e,void 0)},850134:e=>{d.jb("Floor",e,void 0)},850187:e=>{d.jb("Ceil",e,void 0)},850239:e=>{d.jb("Reciprocal",e,void 0)},850297:e=>{d.jb("Sqrt",e,void 0)},850349:e=>{d.jb("Exp",e,void 0)},850400:e=>{d.jb("Erf",e,void 0)},850451:e=>{d.jb("Sigmoid",e,void 0)},850506:(e,t,n)=>{d.jb("HardSigmoid",e,{alpha:t,beta:n})},850585:e=>{d.jb("Log",e,void 0)},850636:e=>{d.jb("Sin",e,void 0)},850687:e=>{d.jb("Cos",e,void 0)},850738:e=>{d.jb("Tan",e,void 0)},850789:e=>{d.jb("Asin",e,void 0)},850841:e=>{d.jb("Acos",e,void 0)},850893:e=>{d.jb("Atan",e,void 0)},850945:e=>{d.jb("Sinh",e,void 0)},850997:e=>{d.jb("Cosh",e,void 0)},851049:e=>{d.jb("Asinh",e,void 0)},851102:e=>{d.jb("Acosh",e,void 0)},851155:e=>{d.jb("Atanh",e,void 0)},851208:e=>{d.jb("Tanh",e,void 0)},851260:e=>{d.jb("Not",e,void 0)},851311:(e,t,n)=>{d.jb("Clip",e,{min:t,max:n})},851380:e=>{d.jb("Clip",e,void 0)},851432:(e,t)=>{d.jb("Elu",e,{alpha:t})},851490:e=>{d.jb("Relu",e,void 0)},851542:(e,t)=>{d.jb("LeakyRelu",e,{alpha:t})},851606:(e,t)=>{d.jb("ThresholdedRelu",e,{alpha:t})},851676:(e,t)=>{d.jb("Cast",e,{to:t})},851734:e=>{d.jb("Add",e,void 0)},851785:e=>{d.jb("Sub",e,void 0)},851836:e=>{d.jb("Mul",e,void 0)},851887:e=>{d.jb("Div",e,void 0)},851938:e=>{d.jb("Pow",e,void 0)},851989:e=>{d.jb("Equal",e,void 0)},852042:e=>{d.jb("Greater",e,void 0)},852097:e=>{d.jb("GreaterOrEqual",e,void 0)},852159:e=>{d.jb("Less",e,void 0)},852211:e=>{d.jb("LessOrEqual",e,void 0)},852270:(e,t,n,r,s)=>{d.jb("ReduceMean",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(i().subarray(r>>>0,s>>>0)):[]})},852429:(e,t,n,r,s)=>{d.jb("ReduceMax",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(i().subarray(r>>>0,s>>>0)):[]})},852587:(e,t,n,r,s)=>{d.jb("ReduceMin",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(i().subarray(r>>>0,s>>>0)):[]})},852745:(e,t,n,r,s)=>{d.jb("ReduceProd",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(i().subarray(r>>>0,s>>>0)):[]})},852904:(e,t,n,r,s)=>{d.jb("ReduceSum",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(i().subarray(r>>>0,s>>>0)):[]})},853062:(e,t,n,r,s)=>{d.jb("ReduceL1",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(i().subarray(r>>>0,s>>>0)):[]})},853219:(e,t,n,r,s)=>{d.jb("ReduceL2",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(i().subarray(r>>>0,s>>>0)):[]})},853376:(e,t,n,r,s)=>{d.jb("ReduceLogSum",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(i().subarray(r>>>0,s>>>0)):[]})},853537:(e,t,n,r,s)=>{d.jb("ReduceSumSquare",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(i().subarray(r>>>0,s>>>0)):[]})},853701:(e,t,n,r,s)=>{d.jb("ReduceLogSumExp",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(i().subarray(r>>>0,s>>>0)):[]})},853865:e=>{d.jb("Where",e,void 0)},853918:(e,t,n)=>{d.jb("Transpose",e,{perm:t?Array.from(i().subarray(t>>>0,n>>>0)):[]})},854026:(e,t,n,r)=>{d.jb("DepthToSpace",e,{blocksize:t,mode:Oe(n),format:r?"NHWC":"NCHW"})},854159:(e,t,n,r)=>{d.jb("DepthToSpace",e,{blocksize:t,mode:Oe(n),format:r?"NHWC":"NCHW"})},854292:(e,n,r,s,a,o,u,l,c,h,p,f,m,g,b)=>{d.jb("ConvTranspose",e,{format:c?"NHWC":"NCHW",autoPad:n,dilations:[r],group:s,kernelShape:[a],pads:[o,u],strides:[l],wIsConst:()=>!!t()[h>>>0],outputPadding:p?Array.from(i().subarray(p>>>0,f>>>0)):[],outputShape:m?Array.from(i().subarray(m>>>0,g>>>0)):[],activation:Oe(b)})},854693:(e,n,r,s,a,o,u,l,c,h,p,f,m,g)=>{d.jb("ConvTranspose",e,{format:l?"NHWC":"NCHW",autoPad:n,dilations:Array.from(i().subarray(r>>>0,2+(r>>>0)>>>0)),group:s,kernelShape:Array.from(i().subarray(a>>>0,2+(a>>>0)>>>0)),pads:Array.from(i().subarray(o>>>0,4+(o>>>0)>>>0)),strides:Array.from(i().subarray(u>>>0,2+(u>>>0)>>>0)),wIsConst:()=>!!t()[c>>>0],outputPadding:h?Array.from(i().subarray(h>>>0,p>>>0)):[],outputShape:f?Array.from(i().subarray(f>>>0,m>>>0)):[],activation:Oe(g)})},855258:(e,n,r,s,a,o,u,l,c,h,p,f,m,g,b)=>{d.jb("ConvTranspose",e,{format:c?"NHWC":"NCHW",autoPad:n,dilations:[r],group:s,kernelShape:[a],pads:[o,u],strides:[l],wIsConst:()=>!!t()[h>>>0],outputPadding:p?Array.from(i().subarray(p>>>0,f>>>0)):[],outputShape:m?Array.from(i().subarray(m>>>0,g>>>0)):[],activation:Oe(b)})},855659:(e,n,r,s,a,o,u,l,c,h,p,f,m,g)=>{d.jb("ConvTranspose",e,{format:l?"NHWC":"NCHW",autoPad:n,dilations:Array.from(i().subarray(r>>>0,2+(r>>>0)>>>0)),group:s,kernelShape:Array.from(i().subarray(a>>>0,2+(a>>>0)>>>0)),pads:Array.from(i().subarray(o>>>0,4+(o>>>0)>>>0)),strides:Array.from(i().subarray(u>>>0,2+(u>>>0)>>>0)),wIsConst:()=>!!t()[c>>>0],outputPadding:h?Array.from(i().subarray(h>>>0,p>>>0)):[],outputShape:f?Array.from(i().subarray(f>>>0,m>>>0)):[],activation:Oe(g)})},856224:(e,t)=>{d.jb("GlobalAveragePool",e,{format:t?"NHWC":"NCHW"})},856315:(e,t,n,r,s,a,i,o,u,l,c,h,p,f,m,g)=>{d.jb("AveragePool",e,{format:g?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:s,dilations:[a,i],kernel_shape:[o,u],pads:[l,c,h,p],strides:[f,m]})},856599:(e,t)=>{d.jb("GlobalAveragePool",e,{format:t?"NHWC":"NCHW"})},856690:(e,t,n,r,s,a,i,o,u,l,c,h,p,f,m,g)=>{d.jb("AveragePool",e,{format:g?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:s,dilations:[a,i],kernel_shape:[o,u],pads:[l,c,h,p],strides:[f,m]})},856974:(e,t)=>{d.jb("GlobalMaxPool",e,{format:t?"NHWC":"NCHW"})},857061:(e,t,n,r,s,a,i,o,u,l,c,h,p,f,m,g)=>{d.jb("MaxPool",e,{format:g?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:s,dilations:[a,i],kernel_shape:[o,u],pads:[l,c,h,p],strides:[f,m]})},857341:(e,t)=>{d.jb("GlobalMaxPool",e,{format:t?"NHWC":"NCHW"})},857428:(e,t,n,r,s,a,i,o,u,l,c,h,p,f,m,g)=>{d.jb("MaxPool",e,{format:g?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:s,dilations:[a,i],kernel_shape:[o,u],pads:[l,c,h,p],strides:[f,m]})},857708:(e,t,n,r,s)=>{d.jb("Gemm",e,{alpha:t,beta:n,transA:r,transB:s})},857812:e=>{d.jb("MatMul",e,void 0)},857866:(e,t,n,r)=>{d.jb("ArgMax",e,{keepDims:!!t,selectLastIndex:!!n,axis:r})},857974:(e,t,n,r)=>{d.jb("ArgMin",e,{keepDims:!!t,selectLastIndex:!!n,axis:r})},858082:(e,t)=>{d.jb("Softmax",e,{axis:t})},858145:(e,t)=>{d.jb("Concat",e,{axis:t})},858205:(e,t,n,r,s)=>{d.jb("Split",e,{axis:t,numOutputs:n,splitSizes:r?Array.from(i().subarray(r>>>0,s>>>0)):[]})},858345:e=>{d.jb("Expand",e,void 0)},858399:(e,t)=>{d.jb("Gather",e,{axis:Number(t)})},858470:(e,t)=>{d.jb("GatherElements",e,{axis:Number(t)})},858549:(e,t,n,r,s,a,o,u,l,c,h)=>{d.jb("Resize",e,{antialias:t,axes:n?Array.from(i().subarray(n>>>0,r>>>0)):[],coordinateTransformMode:Oe(s),cubicCoeffA:a,excludeOutside:o,extrapolationValue:u,keepAspectRatioPolicy:Oe(l),mode:Oe(c),nearestMode:Oe(h)})},858895:(e,t,n,r,s,a,o)=>{d.jb("Slice",e,{starts:t?Array.from(i().subarray(t>>>0,n>>>0)):[],ends:r?Array.from(i().subarray(r>>>0,s>>>0)):[],axes:a?Array.from(i().subarray(a>>>0,o>>>0)):[]})},859111:e=>{d.jb("Tile",e,void 0)},859163:(e,t,n)=>{d.jb("InstanceNormalization",e,{epsilon:t,format:n?"NHWC":"NCHW"})},859277:(e,t,n)=>{d.jb("InstanceNormalization",e,{epsilon:t,format:n?"NHWC":"NCHW"})},859391:e=>{d.jb("Range",e,void 0)},859444:(e,t)=>{d.jb("Einsum",e,{equation:Oe(t)})},859525:(e,t,n,r,s)=>{d.jb("Pad",e,{mode:t,value:n,pads:r?Array.from(i().subarray(r>>>0,s>>>0)):[]})},859652:(e,t,n,r,s,a)=>{d.jb("BatchNormalization",e,{epsilon:t,momentum:n,spatial:!!s,trainingMode:!!r,format:a?"NHWC":"NCHW"})},859821:(e,t,n,r,s,a)=>{d.jb("BatchNormalization",e,{epsilon:t,momentum:n,spatial:!!s,trainingMode:!!r,format:a?"NHWC":"NCHW"})},859990:(e,t,n)=>{d.jb("CumSum",e,{exclusive:Number(t),reverse:Number(n)})},860087:(e,t,n,r,s,a,o,u,l)=>{d.jb("Attention",e,{numHeads:t,isUnidirectional:n,maskFilterValue:r,scale:s,doRotary:a,qkvHiddenSizes:o?Array.from(i().subarray(Number(u)>>>0,Number(u)+o>>>0)):[],pastPresentShareBuffer:!!l})},860359:e=>{d.jb("BiasAdd",e,void 0)},860414:e=>{d.jb("BiasSplitGelu",e,void 0)},860475:e=>{d.jb("FastGelu",e,void 0)},860531:(e,n,r,s,a,o,l,c,h,p,f,m,g,b,y,x)=>{d.jb("Conv",e,{format:m?"NHWC":"NCHW",auto_pad:n,dilations:r?Array.from(i().subarray(r>>>0,s>>>0)):[],group:a,kernel_shape:o?Array.from(i().subarray(o>>>0,l>>>0)):[],pads:c?Array.from(i().subarray(c>>>0,h>>>0)):[],strides:p?Array.from(i().subarray(p>>>0,f>>>0)):[],w_is_const:()=>!!t()[g>>>0],activation:Oe(b),activation_params:y?Array.from(u().subarray(y>>>0,x>>>0)):[]})},861027:e=>{d.jb("Gelu",e,void 0)},861079:(e,t,n,r)=>{d.jb("GroupQueryAttention",e,{numHeads:t,kvNumHeads:n,scale:r})},861192:(e,t,n,r)=>{d.jb("LayerNormalization",e,{axis:t,epsilon:n,simplified:!!r})},861303:(e,t,n,r)=>{d.jb("LayerNormalization",e,{axis:t,epsilon:n,simplified:!!r})},861414:(e,t,n,r,s,a)=>{d.jb("MatMulNBits",e,{k:t,n:n,accuracyLevel:r,bits:s,blockSize:a})},861541:(e,t,n,r,s,a)=>{d.jb("MultiHeadAttention",e,{numHeads:t,isUnidirectional:n,maskFilterValue:r,scale:s,doRotary:a})},861700:(e,t)=>{d.jb("QuickGelu",e,{alpha:t})},861764:(e,t,n,r,s)=>{d.jb("RotaryEmbedding",e,{interleaved:!!t,numHeads:n,rotaryEmbeddingDim:r,scale:s})},861903:(e,t,n)=>{d.jb("SkipLayerNormalization",e,{epsilon:t,simplified:!!n})},862005:e=>{d.Yb(e)},862039:(e,t)=>d.$b(e,t,d.Eb.bc,d.Eb.errors),862151:(e,t,n)=>{d.jb("SkipLayerNormalization",e,{epsilon:t,simplified:!!n})}};function oe(e,t,n){return tn((async()=>{await d.Wb(e,t,n)}))}function ue(){return typeof wasmOffsetConverter<"u"}function le(e){this.name="ExitStatus",this.message=`Program terminated with exit(${e})`,this.status=e}var ce=e=>{e.terminate(),e.onmessage=()=>{}},he=e=>{0==be.length&&(Ie(),ke(be[0]));var t=be.pop();if(!t)return 6;ye.push(t),we[e.Ab]=t,t.Ab=e.Ab;var n={cmd:"run",start_routine:e.cc,arg:e.Pb,pthread_ptr:e.Ab};return t.postMessage(n,e.ic),0},de=0,pe=(e,t,...n)=>{for(var r=2*n.length,s=Ar(),a=Rr(8*r),i=a>>>3,o=0;o<n.length;o++){var u=n[o];"bigint"==typeof u?(W[i+2*o]=1n,W[i+2*o+1]=u):(W[i+2*o]=0n,l()[i+2*o+1>>>0]=u)}return e=Sr(e,0,r,a,t),Nr(s),e};function fe(e){if(g)return pe(0,1,e);if(D=e,!(0<de)){for(var t of ye)ce(t);for(t of be)ce(t);be=[],ye=[],we=[],G=!0}$(e,new le(e))}function me(e){if(g)return pe(1,0,e);ge(e)}var ge=e=>{if(D=e,g)throw me(e),"unwind";fe(e)},be=[],ye=[],xe=[],we={},ve=e=>{var t=e.Ab;delete we[t],be.push(e),ye.splice(ye.indexOf(e),1),e.Ab=0,_r(t)};function $e(){xe.forEach((e=>e()))}var ke=e=>new Promise((t=>{e.onmessage=n=>{var r=(n=n.data).cmd;if(n.targetThread&&n.targetThread!=wr()){var s=we[n.targetThread];s?s.postMessage(n,n.transferList):T(`Internal error! Worker sent a message "${r}" to target pthread ${n.targetThread}, but that thread no longer exists!`)}else"checkMailbox"===r?zt():"spawnThread"===r?he(n):"cleanupThread"===r?ve(we[n.thread]):"killThread"===r?(n=n.thread,r=we[n],delete we[n],ce(r),_r(n),ye.splice(ye.indexOf(r),1),r.Ab=0):"cancelThread"===r?we[n.thread].postMessage({cmd:"cancel"}):"loaded"===r?(e.loaded=!0,t(e)):"alert"===r?alert(`Thread ${n.threadId}: ${n.text}`):"setimmediate"===n.target?e.postMessage(n):"callHandler"===r?d[n.handler](...n.args):r&&T(`worker sent an unknown command ${r}`)},e.onerror=e=>{throw T(`worker sent an error! ${e.filename}:${e.lineno}: ${e.message}`),e};var n,r=[];for(n of[])d.hasOwnProperty(n)&&r.push(n);e.postMessage({cmd:"load",handlers:r,wasmMemory:R,wasmModule:A})}));function Ie(){var e=new Worker(new URL("file:///Users/focus/Projects/krea/webgpu-sam2/svelte-webpack/node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs"),{type:"module",workerData:"em-pthread",name:"em-pthread"});be.push(e)}var Se=e=>{for(;0<e.length;)e.shift()(d)},_e=()=>{var e=wr(),t=o()[e+52>>>2>>>0];e=o()[e+56>>>2>>>0],Er(t,t-e),Nr(t)},Ce=(e,t)=>{de=0,e=Dr(e,t),0<de?D=e:Cr(e)};class Te{constructor(e){this.Ib=e-24}}function Ee(e,t,n){var r=new Te(e>>>=0);throw t>>>=0,n>>>=0,o()[r.Ib+16>>>2>>>0]=0,o()[r.Ib+4>>>2>>>0]=t,o()[r.Ib+8>>>2>>>0]=n,e}function Ne(e,t,n,r){return g?pe(2,1,e,t,n,r):Re(e,t,n,r)}function Re(e,t,n,r){if(e>>>=0,t>>>=0,n>>>=0,r>>>=0,void 0===b)return T("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var s=[];return g&&0===s.length?Ne(e,t,n,r):(e={cc:n,Ab:e,Pb:r,ic:s},g?(e.Lb="spawnThread",postMessage(e,s),0):he(e))}var Ae=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,De=(e,t,n)=>{var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&Ae)return Ae.decode(e.buffer instanceof b?e.slice(t,n):e.subarray(t,n));for(r="";t<n;){var s=e[t++];if(128&s){var a=63&e[t++];if(192==(224&s))r+=String.fromCharCode((31&s)<<6|a);else{var i=63&e[t++];65536>(s=224==(240&s)?(15&s)<<12|a<<6|i:(7&s)<<18|a<<12|i<<6|63&e[t++])?r+=String.fromCharCode(s):(s-=65536,r+=String.fromCharCode(55296|s>>10,56320|1023&s))}}else r+=String.fromCharCode(s)}return r},Oe=(e,t)=>(e>>>=0)?De(r(),e,t):"";function Fe(e,t,n){return g?pe(3,1,e,t,n):0}function ze(e,t){if(g)return pe(4,1,e,t)}var Me=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t},Le=(e,t,n,r)=>{if(!(0<r))return 0;var s=n>>>=0;r=n+r-1;for(var a=0;a<e.length;++a){var i=e.charCodeAt(a);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++a)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-s},Be=(e,t,n)=>Le(e,r(),t,n);function Pe(e,t){if(g)return pe(5,1,e,t)}function We(e,t,n){if(g)return pe(6,1,e,t,n)}function Ue(e,t,n){return g?pe(7,1,e,t,n):0}function Ve(e,t){if(g)return pe(8,1,e,t)}function Ge(e,t,n){if(g)return pe(9,1,e,t,n)}function He(e,t,n,r){if(g)return pe(10,1,e,t,n,r)}function je(e,t,n,r){if(g)return pe(11,1,e,t,n,r)}function qe(e,t,n,r){if(g)return pe(12,1,e,t,n,r)}function Ke(e){if(g)return pe(13,1,e)}function Xe(e,t){if(g)return pe(14,1,e,t)}function Ye(e,t,n){if(g)return pe(15,1,e,t,n)}var Ze,Je,Qe=()=>{Q("")},et=e=>{for(var t="";r()[e>>>0];)t+=Ze[r()[e++>>>0]];return t},tt={},nt={},rt={};function st(e,t,n={}){if(!("argPackAdvance"in t))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(e,t,n={}){var r=t.name;if(!e)throw new Je(`type "${r}" must have a positive integer typeid pointer`);if(nt.hasOwnProperty(e)){if(n.Rb)return;throw new Je(`Cannot register type '${r}' twice`)}nt[e]=t,delete rt[e],tt.hasOwnProperty(e)&&(t=tt[e],delete tt[e],t.forEach((e=>e())))}(e,t,n)}var at=(e,n,u)=>{switch(n){case 1:return u?e=>t()[e>>>0]:e=>r()[e>>>0];case 2:return u?e=>s()[e>>>1>>>0]:e=>a()[e>>>1>>>0];case 4:return u?e=>i()[e>>>2>>>0]:e=>o()[e>>>2>>>0];case 8:return u?e=>W[e>>>3]:e=>U[e>>>3];default:throw new TypeError(`invalid integer width (${n}): ${e}`)}};function it(e,t,n){n>>>=0,st(e>>>=0,{name:t=et(t>>>0),fromWireType:e=>e,toWireType:function(e,t){if("bigint"!=typeof t&&"number"!=typeof t)throw t=null===t?"null":"object"==(e=typeof t)||"array"===e||"function"===e?t.toString():""+t,new TypeError(`Cannot convert "${t}" to ${this.name}`);return"number"==typeof t&&(t=BigInt(t)),t},argPackAdvance:ot,readValueFromPointer:at(t,n,-1==t.indexOf("u")),Db:null})}var ot=8;function ut(e,t,n,s){st(e>>>=0,{name:t=et(t>>>0),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?n:s},argPackAdvance:ot,readValueFromPointer:function(e){return this.fromWireType(r()[e>>>0])},Db:null})}var lt=[],ct=[];function dt(e){9<(e>>>=0)&&0==--ct[e+1]&&(ct[e]=void 0,lt.push(e))}var pt=e=>{if(!e)throw new Je("Cannot use deleted val. handle = "+e);return ct[e]},ft=e=>{switch(e){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let t=lt.pop()||ct.length;return ct[t]=e,ct[t+1]=1,t}};function mt(e){return this.fromWireType(o()[e>>>2>>>0])}var gt={name:"emscripten::val",fromWireType:e=>{var t=pt(e);return dt(e),t},toWireType:(e,t)=>ft(t),argPackAdvance:ot,readValueFromPointer:mt,Db:null};function bt(e){return st(e>>>0,gt)}var yt=(e,t)=>{switch(t){case 4:return function(e){return this.fromWireType(u()[e>>>2>>>0])};case 8:return function(e){return this.fromWireType(l()[e>>>3>>>0])};default:throw new TypeError(`invalid float width (${t}): ${e}`)}};function xt(e,t,n){n>>>=0,st(e>>>=0,{name:t=et(t>>>0),fromWireType:e=>e,toWireType:(e,t)=>t,argPackAdvance:ot,readValueFromPointer:yt(t,n),Db:null})}function wt(e,t,n,r,s){if(e>>>=0,n>>>=0,t=et(t>>>0),-1===s&&(s=4294967295),s=e=>e,0===r){var a=32-8*n;s=e=>e<<a>>>a}var i=t.includes("unsigned")?function(e,t){return t>>>0}:function(e,t){return t};st(e,{name:t,fromWireType:s,toWireType:i,argPackAdvance:ot,readValueFromPointer:at(t,n,0!==r),Db:null})}function vt(e,n,r){function s(e){var n=o()[e>>>2>>>0];return e=o()[e+4>>>2>>>0],new a(t().buffer,e,n)}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][n];st(e>>>=0,{name:r=et(r>>>0),fromWireType:s,argPackAdvance:ot,readValueFromPointer:s},{Rb:!0})}function $t(e,t){e>>>=0;var n="std::string"===(t=et(t>>>0));st(e,{name:t,fromWireType:function(e){var t=o()[e>>>2>>>0],s=e+4;if(n)for(var a=s,i=0;i<=t;++i){var u=s+i;if(i==t||0==r()[u>>>0]){if(a=Oe(a,u-a),void 0===l)var l=a;else l+=String.fromCharCode(0),l+=a;a=u+1}}else{for(l=Array(t),i=0;i<t;++i)l[i]=String.fromCharCode(r()[s+i>>>0]);l=l.join("")}return $r(e),l},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var s="string"==typeof t;if(!(s||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array))throw new Je("Cannot pass non-string to std::string");var a=n&&s?Me(t):t.length,i=vr(4+a+1),u=i+4;if(o()[i>>>2>>>0]=a,n&&s)Be(t,u,a+1);else if(s)for(s=0;s<a;++s){var l=t.charCodeAt(s);if(255<l)throw $r(u),new Je("String has UTF-16 code units that do not fit in 8 bits");r()[u+s>>>0]=l}else for(s=0;s<a;++s)r()[u+s>>>0]=t[s];return null!==e&&e.push($r,i),i},argPackAdvance:ot,readValueFromPointer:mt,Db(e){$r(e)}})}var kt=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,It=(e,t)=>{for(var n=e>>1,i=n+t/2;!(n>=i)&&a()[n>>>0];)++n;if(32<(n<<=1)-e&&kt)return kt.decode(r().slice(e,n));for(n="",i=0;!(i>=t/2);++i){var o=s()[e+2*i>>>1>>>0];if(0==o)break;n+=String.fromCharCode(o)}return n},St=(e,t,n)=>{if(n??=2147483647,2>n)return 0;var r=t;n=(n-=2)<2*e.length?n/2:e.length;for(var a=0;a<n;++a){var i=e.charCodeAt(a);s()[t>>>1>>>0]=i,t+=2}return s()[t>>>1>>>0]=0,t-r},_t=e=>2*e.length,Ct=(e,t)=>{for(var n=0,r="";!(n>=t/4);){var s=i()[e+4*n>>>2>>>0];if(0==s)break;++n,65536<=s?(s-=65536,r+=String.fromCharCode(55296|s>>10,56320|1023&s)):r+=String.fromCharCode(s)}return r},Tt=(e,t,n)=>{if(t>>>=0,n??=2147483647,4>n)return 0;var r=t;n=r+n-4;for(var s=0;s<e.length;++s){var a=e.charCodeAt(s);if(55296<=a&&57343>=a&&(a=65536+((1023&a)<<10)|1023&e.charCodeAt(++s)),i()[t>>>2>>>0]=a,(t+=4)+4>n)break}return i()[t>>>2>>>0]=0,t-r},Et=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&++n,t+=4}return t};function Nt(e,t,n){if(e>>>=0,t>>>=0,n=et(n>>>=0),2===t)var r=It,s=St,i=_t,u=e=>a()[e>>>1>>>0];else 4===t&&(r=Ct,s=Tt,i=Et,u=e=>o()[e>>>2>>>0]);st(e,{name:n,fromWireType:e=>{for(var n,s=o()[e>>>2>>>0],a=e+4,i=0;i<=s;++i){var l=e+4+i*t;i!=s&&0!=u(l)||(a=r(a,l-a),void 0===n?n=a:(n+=String.fromCharCode(0),n+=a),a=l+t)}return $r(e),n},toWireType:(e,r)=>{if("string"!=typeof r)throw new Je(`Cannot pass non-string to C++ string type ${n}`);var a=i(r),u=vr(4+a+t);return o()[u>>>2>>>0]=a/t,s(r,u+4,a+t),null!==e&&e.push($r,u),u},argPackAdvance:ot,readValueFromPointer:mt,Db(e){$r(e)}})}function Rt(e,t){st(e>>>=0,{Sb:!0,name:t=et(t>>>0),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})}var At=()=>1;function Dt(e){kr(e>>>0,!m,1,!f,131072,!1),$e()}var Ot=e=>{if(!G)try{if(e(),!(0<de))try{g?Cr(D):ge(D)}catch(e){e instanceof le||"unwind"==e||$(1,e)}}catch(e){e instanceof le||"unwind"==e||$(1,e)}};function Ft(e){e>>>=0,"function"==typeof Atomics.jc&&(Atomics.jc(i(),e>>>2,e).value.then(zt),e+=128,Atomics.store(i(),e>>>2,1))}var zt=()=>{var e=wr();e&&(Ft(e),Ot(Tr))};function Mt(e,t){(e>>>=0)==t>>>0?setTimeout(zt):g?postMessage({targetThread:e,cmd:"checkMailbox"}):(e=we[e])&&e.postMessage({cmd:"checkMailbox"})}var Lt=[];function Bt(e,t,n,r,s){for(t>>>=0,r/=2,Lt.length=r,n=s>>>0>>>3,s=0;s<r;s++)Lt[s]=W[n+2*s]?W[n+2*s+1]:l()[n+2*s+1>>>0];return(t?ie[t]:mr[e])(...Lt)}function Pt(e){e>>>=0,g?postMessage({cmd:"cleanupThread",thread:e}):ve(we[e])}function Wt(e){}var Ut=(e,t)=>{var n=nt[e];if(void 0===n)throw e=br(e),n=et(e),$r(e),new Je(`${t} has unknown type ${n}`);return n},Vt=(e,t,n)=>{var r=[];return e=e.toWireType(r,n),r.length&&(o()[t>>>2>>>0]=ft(r)),e};function Gt(e,t,n){return t>>>=0,n>>>=0,e=pt(e>>>0),t=Ut(t,"emval::as"),Vt(t,n,e)}var Ht=e=>{try{e()}catch(e){Q(e)}},jt=0,qt=null,Kt=0,Xt=[],Yt={},Zt={},Jt=0,Qt=null,en=[];function tn(e){return function(){if(!G){if(0===jt){var t=!1,n=!1;e().then(((e=0)=>{if(!G&&(Kt=e,t=!0,n)){jt=2,Ht((()=>zr(qt))),typeof Browser<"u"&&Browser.Jb.Qb&&Browser.Jb.resume(),e=!1;try{var r=(o=i()[qt+8>>>2>>>0],o=gr[Zt[o]],--de,o())}catch(o){r=o,e=!0}var s=!1;if(!qt){var a=Qt;a&&(Qt=null,(e?a.reject:a.resolve)(r),s=!0)}if(e&&!s)throw r}var o})),n=!0,t||(jt=1,qt=function(){var e=vr(65548),t=e+12;o()[e>>>2>>>0]=t,o()[e+4>>>2>>>0]=t+65536,t=Xt[0];var n=Yt[t];return void 0===n&&(n=Jt++,Yt[t]=n,Zt[n]=t),t=n,i()[e+8>>>2>>>0]=t,e}(),typeof Browser<"u"&&Browser.Jb.Qb&&Browser.Jb.pause(),Ht((()=>Or(qt))))}else 2===jt?(jt=0,Ht(Mr),$r(qt),qt=null,en.forEach(Ot)):Q(`invalid state: ${jt}`);return Kt}}()}function nn(e){return e>>>=0,tn((()=>(e=pt(e)).then(ft)))}var rn=[];function sn(e,t,n,r){return n>>>=0,r>>>=0,(e=rn[e>>>0])(null,t=pt(t>>>0),n,r)}var an={},on=e=>{var t=an[e];return void 0===t?et(e):t};function un(e,t,n,r,s){return n>>>=0,r>>>=0,s>>>=0,(e=rn[e>>>0])(t=pt(t>>>0),t[n=on(n)],r,s)}var ln=()=>"object"==typeof globalThis?globalThis:Function("return this")();function cn(e){return 0==(e>>>=0)?ft(ln()):(e=on(e),ft(ln()[e]))}var hn=e=>{var t=rn.length;return rn.push(e),t},dn=(e,t)=>{for(var n=Array(e),r=0;r<e;++r)n[r]=Ut(o()[t+4*r>>>2>>>0],"parameter "+r);return n},pn=(e,t)=>Object.defineProperty(t,"name",{value:e});function fn(e,t,n){var r=(t=dn(e,t>>>0)).shift();e--;var s="return function (obj, func, destructorsRef, args) {\n",a=0,i=[];0===n&&i.push("obj");for(var o=["retType"],u=[r],l=0;l<e;++l)i.push("arg"+l),o.push("argType"+l),u.push(t[l]),s+=`  var arg${l} = argType${l}.readValueFromPointer(args${a?"+"+a:""});\n`,a+=t[l].argPackAdvance;return s+=`  var rv = ${1===n?"new func":"func.call"}(${i.join(", ")});\n`,r.Sb||(o.push("emval_returnValue"),u.push(Vt),s+="  return emval_returnValue(retType, destructorsRef, rv);\n"),o.push(s+"};\n"),e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof t} which is not a function`);var n=pn(t.name||"unknownFunctionName",(function(){}));return n.prototype=t.prototype,n=new n,(e=t.apply(n,e))instanceof Object?e:n}(o)(...u),n=`methodCaller<(${t.map((e=>e.name)).join(", ")}) => ${r.name}>`,hn(pn(n,e))}function mn(e){return e=on(e>>>0),ft(d[e])}function gn(e,t){return t>>>=0,e=pt(e>>>0),t=pt(t),ft(e[t])}function bn(e){9<(e>>>=0)&&(ct[e+1]+=1)}function yn(){return ft([])}function xn(e){e=pt(e>>>0);for(var t=Array(e.length),n=0;n<e.length;n++)t[n]=e[n];return ft(t)}function wn(e){return ft(on(e>>>0))}function vn(){return ft({})}function $n(e){for(var t=pt(e>>>=0);t.length;){var n=t.pop();t.pop()(n)}dt(e)}function kn(e,t,n){t>>>=0,n>>>=0,e=pt(e>>>0),t=pt(t),n=pt(n),e[t]=n}function In(e,t){return t>>>=0,e=(e=Ut(e>>>0,"_emval_take_value")).readValueFromPointer(t),ft(e)}function Sn(e,t){e=-9007199254740992>e||9007199254740992<e?NaN:Number(e),t>>>=0,e=new Date(1e3*e),i()[t>>>2>>>0]=e.getUTCSeconds(),i()[t+4>>>2>>>0]=e.getUTCMinutes(),i()[t+8>>>2>>>0]=e.getUTCHours(),i()[t+12>>>2>>>0]=e.getUTCDate(),i()[t+16>>>2>>>0]=e.getUTCMonth(),i()[t+20>>>2>>>0]=e.getUTCFullYear()-1900,i()[t+24>>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[t+28>>>2>>>0]=e}var _n=e=>e%4==0&&(e%100!=0||e%400==0),Cn=[0,31,60,91,121,152,182,213,244,274,305,335],Tn=[0,31,59,90,120,151,181,212,243,273,304,334];function En(e,t){e=-9007199254740992>e||9007199254740992<e?NaN:Number(e),t>>>=0,e=new Date(1e3*e),i()[t>>>2>>>0]=e.getSeconds(),i()[t+4>>>2>>>0]=e.getMinutes(),i()[t+8>>>2>>>0]=e.getHours(),i()[t+12>>>2>>>0]=e.getDate(),i()[t+16>>>2>>>0]=e.getMonth(),i()[t+20>>>2>>>0]=e.getFullYear()-1900,i()[t+24>>>2>>>0]=e.getDay();var n=(_n(e.getFullYear())?Cn:Tn)[e.getMonth()]+e.getDate()-1|0;i()[t+28>>>2>>>0]=n,i()[t+36>>>2>>>0]=-60*e.getTimezoneOffset(),n=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(n!=r&&e.getTimezoneOffset()==Math.min(r,n)),i()[t+32>>>2>>>0]=e}function Nn(e){e>>>=0;var t=new Date(i()[e+20>>>2>>>0]+1900,i()[e+16>>>2>>>0],i()[e+12>>>2>>>0],i()[e+8>>>2>>>0],i()[e+4>>>2>>>0],i()[e>>>2>>>0],0),n=i()[e+32>>>2>>>0],r=t.getTimezoneOffset(),s=new Date(t.getFullYear(),6,1).getTimezoneOffset(),a=new Date(t.getFullYear(),0,1).getTimezoneOffset(),o=Math.min(a,s);return 0>n?i()[e+32>>>2>>>0]=+(s!=a&&o==r):0<n!=(o==r)&&(s=Math.max(a,s),t.setTime(t.getTime()+6e4*((0<n?o:s)-r))),i()[e+24>>>2>>>0]=t.getDay(),n=(_n(t.getFullYear())?Cn:Tn)[t.getMonth()]+t.getDate()-1|0,i()[e+28>>>2>>>0]=n,i()[e>>>2>>>0]=t.getSeconds(),i()[e+4>>>2>>>0]=t.getMinutes(),i()[e+8>>>2>>>0]=t.getHours(),i()[e+12>>>2>>>0]=t.getDate(),i()[e+16>>>2>>>0]=t.getMonth(),i()[e+20>>>2>>>0]=t.getYear(),e=t.getTime(),BigInt(isNaN(e)?-1:e/1e3)}function Rn(e,t,n,r,s,a,i){return g?pe(16,1,e,t,n,r,s,a,i):-52}function An(e,t,n,r,s,a){if(g)return pe(17,1,e,t,n,r,s,a)}function Dn(e,t,n,r){e>>>=0,t>>>=0,n>>>=0,r>>>=0;var s=(new Date).getFullYear(),a=new Date(s,0,1),u=new Date(s,6,1);s=a.getTimezoneOffset();var l=u.getTimezoneOffset(),c=Math.max(s,l);o()[e>>>2>>>0]=60*c,i()[t>>>2>>>0]=+(s!=l),a=(e=e=>e.toLocaleTimeString(void 0,{hour12:!1,timeZoneName:"short"}).split(" ")[1])(a),u=e(u),l<s?(Be(a,n,17),Be(u,r,17)):(Be(a,r,17),Be(u,n,17))}var On=[],Fn=(e,t)=>{On.length=0;for(var n;n=r()[e++>>>0];){var s=105!=n;t+=(s&=112!=n)&&t%8?4:0,On.push(112==n?o()[t>>>2>>>0]:106==n?W[t>>>3]:105==n?i()[t>>>2>>>0]:l()[t>>>3>>>0]),t+=s?8:4}return On};function zn(e,t,n){return e>>>=0,t=Fn(t>>>0,n>>>0),ie[e](...t)}function Mn(e,t,n){return e>>>=0,t=Fn(t>>>0,n>>>0),ie[e](...t)}var Ln=()=>{},Bn=()=>Date.now();function Pn(e,t){return T(Oe(e>>>0,t>>>0))}var Wn,Un=()=>{throw de+=1,"unwind"};function Vn(){return 4294901760}Wn=()=>performance.timeOrigin+performance.now();var Gn=()=>navigator.hardwareConcurrency;function Hn(){return Q("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function jn(e){e>>>=0;var t=r().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var s=t*(1+.2/n);s=Math.min(s,e+100663296);var a=Math;s=Math.max(e,s);e:{a=(a.min.call(a,4294901760,s+(65536-s%65536)%65536)-R.buffer.byteLength+65535)/65536;try{R.grow(a),H();var i=1;break e}catch{}i=void 0}if(i)return!0}return!1}var qn=()=>(Q("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),Kn={},Xn=e=>{e.forEach((e=>{var t=qn();t&&(Kn[t]=e)}))};function Yn(){var e=Error().stack.toString().split("\n");return"Error"==e[0]&&e.shift(),Xn(e),Kn.Ob=qn(),Kn.ac=e,Kn.Ob}function Zn(e,t,n){if(e>>>=0,t>>>=0,Kn.Ob==e)var r=Kn.ac;else"Error"==(r=Error().stack.toString().split("\n"))[0]&&r.shift(),Xn(r);for(var s=3;r[s]&&qn()!=e;)++s;for(e=0;e<n&&r[e+s];++e)i()[t+4*e>>>2>>>0]=qn();return e}var Jn,Qn={},er=()=>{if(!Jn){var e,t={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:"./this.program"};for(e in Qn)void 0===Qn[e]?delete t[e]:t[e]=Qn[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);Jn=n}return Jn};function tr(e,n){if(g)return pe(18,1,e,n);e>>>=0,n>>>=0;var r=0;return er().forEach(((s,a)=>{var i=n+r;for(a=o()[e+4*a>>>2>>>0]=i,i=0;i<s.length;++i)t()[a++>>>0]=s.charCodeAt(i);t()[a>>>0]=0,r+=s.length+1})),0}function nr(e,t){if(g)return pe(19,1,e,t);e>>>=0,t>>>=0;var n=er();o()[e>>>2>>>0]=n.length;var r=0;return n.forEach((e=>r+=e.length+1)),o()[t>>>2>>>0]=r,0}function rr(e){return g?pe(20,1,e):52}function sr(e,t,n,r){return g?pe(21,1,e,t,n,r):52}function ar(e,t,n,r){return g?pe(22,1,e,t,n,r):70}var ir=[null,[],[]];function or(e,t,n,s){if(g)return pe(23,1,e,t,n,s);t>>>=0,n>>>=0,s>>>=0;for(var a=0,i=0;i<n;i++){var u=o()[t>>>2>>>0],l=o()[t+4>>>2>>>0];t+=8;for(var c=0;c<l;c++){var h=r()[u+c>>>0],d=ir[e];0===h||10===h?((1===e?C:T)(De(d,0)),d.length=0):d.push(h)}a+=l}return o()[s>>>2>>>0]=a,0}var ur=[31,29,31,30,31,30,31,31,30,31,30,31],lr=[31,28,31,30,31,30,31,31,30,31,30,31],cr=(e,n)=>{t().set(e,n>>>0)};function hr(e,t,n,r){function s(e,t,n){for(e="number"==typeof e?e.toString():e||"";e.length<t;)e=n[0]+e;return e}function a(e,t){return s(e,t,"0")}function u(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function l(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var t=e.Bb;for(e=new Date(new Date(e.Cb+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(_n(e.getFullYear())?ur:lr)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=l(new Date(e.getFullYear(),0,4)),n=l(n),0>=u(t,e)?0>=u(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0,r>>>=0;var h=o()[r+40>>>2>>>0];for(var d in r={fc:i()[r>>>2>>>0],ec:i()[r+4>>>2>>>0],Gb:i()[r+8>>>2>>>0],Kb:i()[r+12>>>2>>>0],Hb:i()[r+16>>>2>>>0],Cb:i()[r+20>>>2>>>0],ub:i()[r+24>>>2>>>0],Bb:i()[r+28>>>2>>>0],nc:i()[r+32>>>2>>>0],dc:i()[r+36>>>2>>>0],hc:h?Oe(h):""},n=Oe(n),h={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})n=n.replace(new RegExp(d,"g"),h[d]);var p,f,m="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),g="January February March April May June July August September October November December".split(" ");for(d in h={"%a":e=>m[e.ub].substring(0,3),"%A":e=>m[e.ub],"%b":e=>g[e.Hb].substring(0,3),"%B":e=>g[e.Hb],"%C":e=>a((e.Cb+1900)/100|0,2),"%d":e=>a(e.Kb,2),"%e":e=>s(e.Kb,2," "),"%g":e=>c(e).toString().substring(2),"%G":c,"%H":e=>a(e.Gb,2),"%I":e=>(0==(e=e.Gb)?e=12:12<e&&(e-=12),a(e,2)),"%j":e=>{for(var t=0,n=0;n<=e.Hb-1;t+=(_n(e.Cb+1900)?ur:lr)[n++]);return a(e.Kb+t,3)},"%m":e=>a(e.Hb+1,2),"%M":e=>a(e.ec,2),"%n":()=>"\n","%p":e=>0<=e.Gb&&12>e.Gb?"AM":"PM","%S":e=>a(e.fc,2),"%t":()=>"\t","%u":e=>e.ub||7,"%U":e=>a(Math.floor((e.Bb+7-e.ub)/7),2),"%V":e=>{var t=Math.floor((e.Bb+7-(e.ub+6)%7)/7);if(2>=(e.ub+371-e.Bb-2)%7&&t++,t)53==t&&(4==(n=(e.ub+371-e.Bb)%7)||3==n&&_n(e.Cb)||(t=1));else{t=52;var n=(e.ub+7-e.Bb-1)%7;(4==n||5==n&&_n(e.Cb%400-1))&&t++}return a(t,2)},"%w":e=>e.ub,"%W":e=>a(Math.floor((e.Bb+7-(e.ub+6)%7)/7),2),"%y":e=>(e.Cb+1900).toString().substring(2),"%Y":e=>e.Cb+1900,"%z":e=>(0<=(e=e.dc)?"+":"-")+("0000"+((e=Math.abs(e)/60)/60*100+e%60)).slice(-4),"%Z":e=>e.hc,"%%":()=>"%"},n=n.replace(/%%/g,"\0\0"),h)n.includes(d)&&(n=n.replace(new RegExp(d,"g"),h[d](r)));return p=n=n.replace(/\0\0/g,"%"),f=Array(Me(p)+1),Le(p,f,0,f.length),(d=f).length>t?0:(cr(d,e),d.length-1)}function dr(e,t,n,r){return hr(e>>>0,t>>>0,n>>>0,r>>>0)}g||function(){for(var e=d.numThreads-1;e--;)Ie();j.unshift((()=>{var e;X++,e=()=>J(),g?e():Promise.all(be.map(ke)).then(e)}))}();for(var pr=Array(256),fr=0;256>fr;++fr)pr[fr]=String.fromCharCode(fr);Ze=pr,Je=d.BindingError=class extends Error{constructor(e){super(e),this.name="BindingError"}},d.InternalError=class extends Error{constructor(e){super(e),this.name="InternalError"}},ct.push(0,1,void 0,1,null,1,!0,1,!1,1),d.count_emval_handles=()=>ct.length/2-5-lt.length;var mr=[fe,me,Ne,Fe,ze,Pe,We,Ue,Ve,Ge,He,je,qe,Ke,Xe,Ye,Rn,An,tr,nr,rr,sr,ar,or],gr=function(){function e(e,t){return gr=e.exports,gr=function(){var e=gr,t={};for(let[n,r]of Object.entries(e))t[n]="function"==typeof r?(...e)=>{Xt.push(n);try{return r(...e)}finally{G||(Xt.pop(),qt&&1===jt&&0===Xt.length&&(jt=0,de+=1,Ht(Fr),typeof Fibers<"u"&&Fibers.oc()))}}:r;return t}(),n=gr,r=e=>t=>e(t)>>>0,s=e=>()=>e()>>>0,(n=Object.assign({},n)).Ca=r(n.Ca),n.fb=s(n.fb),n.gb=r(n.gb),n.emscripten_main_runtime_thread_id=s(n.emscripten_main_runtime_thread_id),n.sb=r(n.sb),n.tb=s(n.tb),gr=n,xe.push(gr.ib),q.unshift(gr.Ba),A=t,J(),gr;var n,r,s}var t,r,s,a=ae();if(X++,d.instantiateWasm)try{return d.instantiateWasm(a,e)}catch(t){T(`Module.instantiateWasm callback failed with error: ${t}`),h(t)}return ee||=d.locateFile?te("ort-wasm-simd-threaded.jsep.wasm")?"ort-wasm-simd-threaded.jsep.wasm":d.locateFile?d.locateFile("ort-wasm-simd-threaded.jsep.wasm",k):k+"ort-wasm-simd-threaded.jsep.wasm":new URL(n(98),n.b).href,(t=a,r=function(t){e(t.instance,t.module)},s=ee,I||"function"!=typeof WebAssembly.instantiateStreaming||te(s)||ne(s)||"function"!=typeof fetch?se(s,t,r):fetch(s,{credentials:"same-origin"}).then((e=>WebAssembly.instantiateStreaming(e,t).then(r,(function(e){return T(`wasm streaming compile failed: ${e}`),T("falling back to ArrayBuffer instantiation"),se(s,t,r)}))))).catch(h),{}}(),br=e=>(br=gr.Ca)(e),yr=()=>(yr=gr.Da)();d._OrtInit=(e,t)=>(d._OrtInit=gr.Ea)(e,t),d._OrtGetLastError=(e,t)=>(d._OrtGetLastError=gr.Fa)(e,t),d._OrtCreateSessionOptions=(e,t,n,r,s,a,i,o,u,l)=>(d._OrtCreateSessionOptions=gr.Ga)(e,t,n,r,s,a,i,o,u,l),d._OrtAppendExecutionProvider=(e,t)=>(d._OrtAppendExecutionProvider=gr.Ha)(e,t),d._OrtAddFreeDimensionOverride=(e,t,n)=>(d._OrtAddFreeDimensionOverride=gr.Ia)(e,t,n),d._OrtAddSessionConfigEntry=(e,t,n)=>(d._OrtAddSessionConfigEntry=gr.Ja)(e,t,n),d._OrtReleaseSessionOptions=e=>(d._OrtReleaseSessionOptions=gr.Ka)(e),d._OrtCreateSession=(e,t,n)=>(d._OrtCreateSession=gr.La)(e,t,n),d._OrtReleaseSession=e=>(d._OrtReleaseSession=gr.Ma)(e),d._OrtGetInputOutputCount=(e,t,n)=>(d._OrtGetInputOutputCount=gr.Na)(e,t,n),d._OrtGetInputName=(e,t)=>(d._OrtGetInputName=gr.Oa)(e,t),d._OrtGetOutputName=(e,t)=>(d._OrtGetOutputName=gr.Pa)(e,t),d._OrtFree=e=>(d._OrtFree=gr.Qa)(e),d._OrtCreateTensor=(e,t,n,r,s,a)=>(d._OrtCreateTensor=gr.Ra)(e,t,n,r,s,a),d._OrtGetTensorData=(e,t,n,r,s)=>(d._OrtGetTensorData=gr.Sa)(e,t,n,r,s),d._OrtReleaseTensor=e=>(d._OrtReleaseTensor=gr.Ta)(e),d._OrtCreateRunOptions=(e,t,n,r)=>(d._OrtCreateRunOptions=gr.Ua)(e,t,n,r),d._OrtAddRunConfigEntry=(e,t,n)=>(d._OrtAddRunConfigEntry=gr.Va)(e,t,n),d._OrtReleaseRunOptions=e=>(d._OrtReleaseRunOptions=gr.Wa)(e),d._OrtCreateBinding=e=>(d._OrtCreateBinding=gr.Xa)(e),d._OrtBindInput=(e,t,n)=>(d._OrtBindInput=gr.Ya)(e,t,n),d._OrtBindOutput=(e,t,n,r)=>(d._OrtBindOutput=gr.Za)(e,t,n,r),d._OrtClearBoundOutputs=e=>(d._OrtClearBoundOutputs=gr._a)(e),d._OrtReleaseBinding=e=>(d._OrtReleaseBinding=gr.$a)(e),d._OrtRunWithBinding=(e,t,n,r,s)=>(d._OrtRunWithBinding=gr.ab)(e,t,n,r,s),d._OrtRun=(e,t,n,r,s,a,i,o)=>(d._OrtRun=gr.bb)(e,t,n,r,s,a,i,o),d._OrtEndProfiling=e=>(d._OrtEndProfiling=gr.cb)(e),d._JsepOutput=(e,t,n)=>(d._JsepOutput=gr.db)(e,t,n),d._JsepGetNodeName=e=>(d._JsepGetNodeName=gr.eb)(e);var xr,wr=()=>(wr=gr.fb)(),vr=d._malloc=e=>(vr=d._malloc=gr.gb)(e),$r=d._free=e=>($r=d._free=gr.hb)(e),kr=(e,t,n,r,s,a)=>(kr=gr.kb)(e,t,n,r,s,a),Ir=()=>(Ir=gr.lb)(),Sr=(e,t,n,r,s)=>(Sr=gr.mb)(e,t,n,r,s),_r=e=>(_r=gr.nb)(e),Cr=e=>(Cr=gr.ob)(e),Tr=()=>(Tr=gr.pb)(),Er=(e,t)=>(Er=gr.qb)(e,t),Nr=e=>(Nr=gr.rb)(e),Rr=e=>(Rr=gr.sb)(e),Ar=()=>(Ar=gr.tb)(),Dr=d.dynCall_ii=(e,t)=>(Dr=d.dynCall_ii=gr.vb)(e,t),Or=e=>(Or=gr.wb)(e),Fr=()=>(Fr=gr.xb)(),zr=e=>(zr=gr.yb)(e),Mr=()=>(Mr=gr.zb)();function Lr(){0<X||(g?(c(d),g||Se(q),startWorker(d)):(Se(j),0<X||xr||(xr=!0,d.calledRun=!0,G||(g||Se(q),c(d),g||Se(K)))))}return d.___start_em_js=862253,d.___stop_em_js=862475,d.stackSave=()=>Ar(),d.stackRestore=e=>Nr(e),d.stackAlloc=e=>Rr(e),d.UTF8ToString=Oe,d.stringToUTF8=Be,d.lengthBytesUTF8=Me,Z=function e(){xr||Lr(),xr||(Z=e)},Lr(),p},pt=dt,"em-pthread"===globalThis.self?.name&&dt()})),rl=Oe((()=>{st(),ft="file:///Users/focus/Projects/krea/webgpu-sam2/svelte-webpack/node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs",mt=typeof location>"u"?void 0:location.origin,gt=(e,t)=>{try{let n=t??ft;return(n?new URL(e,n):new URL(e)).origin===mt}catch{return!1}},bt=async e=>{let t=await(await fetch(e,{credentials:"same-origin"})).blob();return URL.createObjectURL(t)},yt=(lt(),ze(at)).default,xt=async()=>{if(!ft)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(gt(ft))return[void 0,yt()];let e=await bt(ft);return[e,yt(e)]},wt=(nl(),ze(ct)).default,vt=async(e,t,n)=>[void 0,wt]})),sl=Oe((()=>{rl(),kt=!1,It=!1,St=!1,_t=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},Ct=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Tt=async e=>{if(kt)return Promise.resolve();if(It)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(St)throw new Error("previous call to 'initializeWebAssembly()' failed.");It=!0;let t=e.initTimeout,n=e.numThreads;if(!Ct())throw new Error("WebAssembly SIMD is not supported in the current environment.");let r=_t();n>1&&!r&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+n+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=n=1);let s=e.wasmPaths,a="string"==typeof s?s:void 0,i=s?.mjs,o=i?.href??i,u=s?.wasm,l=u?.href??u,c=e.wasmBinary,[h,d]=await vt(o,a,n>1),p=!1,f=[];if(t>0&&f.push(new Promise((e=>{setTimeout((()=>{p=!0,e()}),t)}))),f.push(new Promise(((e,t)=>{let r={numThreads:n};c?r.wasmBinary=c:(l||a)&&(r.locateFile=(e,t)=>l??(a??t)+e),d(r).then((t=>{It=!1,kt=!0,$t=t,e(),h&&URL.revokeObjectURL(h)}),(e=>{It=!1,St=!0,t(e)}))}))),await Promise.race(f),p)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Et=()=>{if(kt&&$t)return $t;throw new Error("WebAssembly is not initialized yet.")}})),al=Oe((()=>{sl(),Nt=(e,t)=>{let n=Et(),r=n.lengthBytesUTF8(e)+1,s=n._malloc(r);return n.stringToUTF8(e,s,r),t.push(s),s},Rt=(e,t,n,r)=>{if("object"==typeof e&&null!==e){if(n.has(e))throw new Error("Circular reference in options");n.add(e)}Object.entries(e).forEach((([e,s])=>{let a=t?t+e:e;if("object"==typeof s)Rt(s,a+".",n,r);else if("string"==typeof s||"number"==typeof s)r(a,s.toString());else{if("boolean"!=typeof s)throw new Error("Can't handle extra config type: "+typeof s);r(a,s?"1":"0")}}))},At=e=>{let t=Et(),n=t.stackSave();try{let n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);let r=t.HEAP32[n/4],s=t.HEAPU32[n/4+1],a=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${r}, ERROR_MESSAGE: ${a}`)}finally{t.stackRestore(n)}}})),il=Oe((()=>{sl(),al(),Dt=e=>{let t=Et(),n=0,r=[],s=e||{};try{if(void 0===e?.logSeverityLevel)s.logSeverityLevel=2;else if("number"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===e?.logVerbosityLevel)s.logVerbosityLevel=0;else if("number"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===e?.terminate&&(s.terminate=!1);let a=0;return void 0!==e?.tag&&(a=Nt(e.tag,r)),n=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,a),0===n&&At("Can't create run options."),void 0!==e?.extra&&Rt(e.extra,"",new WeakSet,((e,s)=>{let a=Nt(e,r),i=Nt(s,r);0!==t._OrtAddRunConfigEntry(n,a,i)&&At(`Can't set a run config entry: ${e} - ${s}.`)})),[n,r]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),r.forEach((e=>t._free(e))),e}}})),ol=Oe((()=>{sl(),al(),Ot=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Ft=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},zt=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some((e=>"webgpu"===("string"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)},Mt=(e,t,n)=>{for(let r of t){let t="string"==typeof r?r:r.name;switch(t){case"webnn":if(t="WEBNN","string"!=typeof r){let t=r?.deviceType;if(t){let r=Nt("deviceType",n),s=Nt(t,n);0!==Et()._OrtAddSessionConfigEntry(e,r,s)&&At(`Can't set a session config entry: 'deviceType' - ${t}.`)}}break;case"webgpu":if(t="JS","string"!=typeof r){let t=r;if(t?.preferredLayout){if("NCHW"!==t.preferredLayout&&"NHWC"!==t.preferredLayout)throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${t.preferredLayout}`);let r=Nt("preferredLayout",n),s=Nt(t.preferredLayout,n);0!==Et()._OrtAddSessionConfigEntry(e,r,s)&&At(`Can't set a session config entry: 'preferredLayout' - ${t.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${t}`)}let s=Nt(t,n);0!==Et()._OrtAppendExecutionProvider(e,s)&&At(`Can't append execution provider: ${t}.`)}},Lt=e=>{let t=Et(),n=0,r=[],s=e||{};zt(s);try{let e=Ot(s.graphOptimizationLevel??"all"),a=Ft(s.executionMode??"sequential"),i="string"==typeof s.logId?Nt(s.logId,r):0,o=s.logSeverityLevel??2;if(!Number.isInteger(o)||o<0||o>4)throw new Error(`log serverity level is not valid: ${o}`);let u=s.logVerbosityLevel??0;if(!Number.isInteger(u)||u<0||u>4)throw new Error(`log verbosity level is not valid: ${u}`);let l="string"==typeof s.optimizedModelFilePath?Nt(s.optimizedModelFilePath,r):0;if(n=t._OrtCreateSessionOptions(e,!!s.enableCpuMemArena,!!s.enableMemPattern,a,!!s.enableProfiling,0,i,o,u,l),0===n&&At("Can't create session options."),s.executionProviders&&Mt(n,s.executionProviders,r),void 0!==s.enableGraphCapture){if("boolean"!=typeof s.enableGraphCapture)throw new Error(`enableGraphCapture must be a boolean value: ${s.enableGraphCapture}`);let e=Nt("enableGraphCapture",r),a=Nt(s.enableGraphCapture.toString(),r);0!==t._OrtAddSessionConfigEntry(n,e,a)&&At(`Can't set a session config entry: 'enableGraphCapture' - ${s.enableGraphCapture}.`)}if(s.freeDimensionOverrides)for(let[e,a]of Object.entries(s.freeDimensionOverrides)){if("string"!=typeof e)throw new Error(`free dimension override name must be a string: ${e}`);if("number"!=typeof a||!Number.isInteger(a)||a<0)throw new Error(`free dimension override value must be a non-negative integer: ${a}`);let s=Nt(e,r);0!==t._OrtAddFreeDimensionOverride(n,s,a)&&At(`Can't set a free dimension override: ${e} - ${a}.`)}return void 0!==s.extra&&Rt(s.extra,"",new WeakSet,((e,s)=>{let a=Nt(e,r),i=Nt(s,r);0!==t._OrtAddSessionConfigEntry(n,a,i)&&At(`Can't set a session config entry: ${e} - ${s}.`)})),[n,r]}catch(e){throw 0!==n&&t._OrtReleaseSessionOptions(n),r.forEach((e=>t._free(e))),e}}})),ul=Oe((()=>{Bt=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Pt=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},Wt=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Ut=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Vt=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Gt=e=>"float32"===e||"float16"===e||"int32"===e||"int64"===e||"uint32"===e||"uint8"===e||"bool"===e,Ht=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}})),ll=Oe((()=>{st(),jt=async e=>{if("string"==typeof e){let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let n=t.headers.get("Content-Length"),r=n?parseInt(n,10):0;if(r<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let n,s=t.body.getReader();try{n=new ArrayBuffer(r)}catch(e){if(!(e instanceof RangeError))throw e;{let e=Math.ceil(r/65536);n=new WebAssembly.Memory({initial:e,maximum:e}).buffer}}let a=0;for(;;){let{done:e,value:t}=await s.read();if(e)break;let r=t.byteLength;new Uint8Array(n,a,r).set(t),a+=r}return new Uint8Array(n,0,r)}}return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}})),cl=Oe((()=>{ul(),qt=["V","I","W","E","F"],Kt=(e,t)=>{console.log(`[${qt[e]},${(new Date).toISOString()}]${t}`)},Zt=(e,t)=>{Xt=e,Yt=t},Jt=(e,t)=>{let n=Vt(e);n>=Vt(Xt)&&Kt(n,"function"==typeof t?t():t)},Qt=(...e)=>{Yt&&Jt(...e)}})),hl=Oe((()=>{ul(),en=(e,t)=>new(Ut(t))(e)})),dl=Oe((()=>{})),pl=Oe((()=>{cl(),dl(),tn=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),nn=[],rn=e=>16*Math.ceil(e/16),sn=e=>{for(let t=0;t<nn.length;t++){let n=nn[t];if(e<=n)return n}return 16*Math.ceil(e/16)},an=1,on=()=>an++,un=async(e,t,n,r)=>{let s=rn(n),a=e.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let i=e.getCommandEncoder();e.endComputePass(),i.copyBufferToBuffer(t,0,a,0,s),e.flush(),await a.mapAsync(GPUMapMode.READ);let o=a.getMappedRange();if(r){let e=r();return e.set(new Uint8Array(o,0,n)),e}return new Uint8Array(o.slice(0,n))}finally{a.destroy()}},ln=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map;for(let[e]of tn)nn.push(e),this.freeBuffers.set(e,[]),this.freeUniformBuffers.set(e,[])}upload(e,t){let n=t.buffer,r=t.byteOffset,s=t.byteLength,a=rn(s),i=this.storageCache.get(e);if(!i)throw new Error("gpu data for uploading does not exist");if(i.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${i.originalSize}, data size=${s}`);let o=this.backend.device.createBuffer({mappedAtCreation:!0,size:a,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),u=o.getMappedRange();new Uint8Array(u).set(new Uint8Array(n,r,s)),o.unmap();let l=this.backend.getCommandEncoder();this.backend.endComputePass(),l.copyBufferToBuffer(o,0,i.gpuData.buffer,0,a),Qt("verbose",(()=>`[WebGPU] GpuDataManager.upload(id=${e})`)),this.buffersForUploadingPending.push(o)}memcpy(e,t){let n=this.storageCache.get(e);if(!n)throw new Error("source gpu data for memcpy does not exist");let r=this.storageCache.get(t);if(!r)throw new Error("destination gpu data for memcpy does not exist");if(n.originalSize!==r.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=rn(n.originalSize),a=this.backend.getCommandEncoder();this.backend.endComputePass(),a.copyBufferToBuffer(n.gpuData.buffer,0,r.gpuData.buffer,0,s)}registerExternalBuffer(e,t,n){let r;if(n){if(r=this.externalBuffers.get(n),void 0===r)throw new Error("previous buffer is not registered");if(e===n)return Qt("verbose",(()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${r}, buffer is the same, skip.`)),r;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error("Registering a different external buffer under graph capture mode is not supported yet.\n             Please use the previous external buffer!");this.externalBuffers.delete(n)}else r=on();return this.storageCache.set(r,{gpuData:{id:r,type:0,buffer:e},originalSize:t}),this.externalBuffers.set(e,r),Qt("verbose",(()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${r}, registered.`)),r}unregisterExternalBuffer(e){let t=this.externalBuffers.get(e);void 0!==t&&(this.storageCache.delete(t),this.externalBuffers.delete(e),Qt("verbose",(()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${t}`)))}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let n,r=sn(e),s=(t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,a=(t&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||a){let e=(s?this.freeBuffers:this.freeUniformBuffers).get(r);n=e&&e.length>0?e.pop():this.backend.device.createBuffer({size:r,usage:t})}else n=this.backend.device.createBuffer({size:r,usage:t});let i={id:on(),type:0,buffer:n};return this.storageCache.set(i.id,{gpuData:i,originalSize:e}),Qt("verbose",(()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${i.id}`)),i}get(e){return this.storageCache.get(e)?.gpuData}release(e){let t=this.storageCache.get(e);if(!t)throw new Error("releasing data does not exist");return Qt("verbose",(()=>`[WebGPU] GpuDataManager.release(id=${e}), gpuDataId=${t.gpuData.id}`)),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),t.originalSize}async download(e,t){let n=this.storageCache.get(e);if(!n)throw new Error("data does not exist");await un(this.backend,n.gpuData.buffer,n.originalSize,t)}refreshPendingBuffers(){for(let e of this.buffersForUploadingPending)e.destroy();if(this.buffersForUploadingPending=[],0!==this.buffersPending.length)if("default"===this.backend.sessionStatus){for(let e of this.buffersPending){let t=tn.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let n=this.freeBuffers.get(e.size)||[];void 0===t||n.length>=t?e.destroy():n.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let n=this.freeUniformBuffers.get(e.size)||[];void 0===t||n.length>=t?e.destroy():n.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let t of this.buffersPending)e.push(t);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.freeUniformBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.storageCache.forEach((e=>{e.gpuData.buffer.destroy()})),this.capturedPendingBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(e){let t=this.capturedPendingBuffers.get(e);t&&(t.forEach((e=>{e.destroy()})),this.capturedPendingBuffers.delete(e))}},cn=(...e)=>new ln(...e)})),fl=Oe((()=>{hn=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map((e=>`${this[e]}`)).join(";")),this.key}},dn=e=>new hn(e)})),ml=Oe((()=>{pn=class{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}},fn=class{static calcShape(e,t,n=!1){let r=e.length,s=t.length;if(0===r)return t;if(0===s)return e;let a=Math.max(e.length,t.length),i=new Array(a);if(n){if(r<2||s<2)return;let n=pn.calcMatMulShape([e[r-2],e[r-1]],[t[s-2],t[s-1]]);if(void 0===n)return;[i[a-2],i[a-1]]=n}for(let o=n?3:1;o<=a;o++){let n=r-o<0?1:e[r-o],u=s-o<0?1:t[s-o];if(n!==u&&n>1&&u>1)return;let l=Math.max(n,u);if(n&&u)i[a-o]=Math.max(n,u);else{if(l>1)return;i[a-o]=0}}return i}static isValidBroadcast(e,t){let n=e.length,r=t.length;if(n>r)return!1;for(let s=1;s<=n;s++)if(1!==e[n-s]&&e[n-s]!==t[r-s])return!1;return!0}},mn=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static convertShape(e,t=4){let n=e.length;if(0===n)return[];let r=new Array(n),s=n-1;for(;s>=0;){if(e[s]%t==0){r[s]=e[s]/t;break}if(t%e[s]!=0)throw new Error("cannot convert shape");r[s]=1,t/=e[s],s--}for(s--;s>=0;s--)r[s]=e[s];return r}static sizeFromDimension(t,n){if(n<0||n>t.length)throw new Error(`invalid dimension of ${n} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,n,t.length)}static sizeToDimension(t,n){if(n<0||n>t.length)throw new Error(`invalid dimension of ${n} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,n)}static getSizeFromDimensionRange(e,t,n){let r=1;for(let s=t;s<n;s++){if(e[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");r*=e[s]}return r}static computeStrides(e){let t=e.length;if(0===t)return[];if(1===t)return[1];let n=new Array(t);n[t-1]=1,n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}static normalizeAxis(e,t){if(e<-t&&e>=t)throw new Error("unsupported axis for this operation.");return e<0?e+t:e}static normalizeAxes(e,t){return e.map((n=>this.normalizeAxis(n,t??e.length)))}static sortBasedOnPerm(e,t){return t?t.map((t=>e[t])):e.slice().reverse()}static padShape(e,t){let n=e.length;return e.map(((e,r)=>e+t[r]+t[r+n]))}static areEqual(e,t){return e.length===t.length&&e.every(((e,n)=>e===t[n]))}},gn=class e{static adjustPoolAttributes(e,t,n,r,s,a){if(!e&&n.length!==t.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(e)for(let e=0;e<t.length-2;e++)e>=n.length?n.push(t[e+2]):n[e]=t[e+2];for(let e=0;e<n.length;e++)if(e<r.length){if(r[e]<0)throw new Error("strides should be greater than or equal to 1")}else r.push(1);for(let e=0;e<n.length;e++)if(e<s.length){if(s[e]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let e=0;e<2*n.length;e++)if(e<a.length){if(a[e]<0)throw new Error("pad should be greater than or equal to 1")}else a.push(0);for(let e=0;e<n.length;e++){if(n[e]<=0)throw new Error("kernel shapes need to be greater than 0");if(a[e]>=n[e]||a[e+n.length]>=n[e])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,n,r,s,a,i,o){if(o){if(a.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(s.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let u=0;u<t.length-2;u++)e.adjustPadAndReturnShape(t[u+(i?1:2)],n[u],r[u],s[u],a,u,u+t.length-2,o)}}static computePoolOutputShape(t,n,r,s,a,i,o){if(n.length<=0)throw new Error("input shape must be of size greater than 0");let u=[n[0],n[1]];return e.computeShapeHelper(t,n,u,r,s,a,i,o),u}static computeConvOutputShape(t,n,r,s,a,i,o){if(t.length<=0||n.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let u=[t[0],n[0]];return e.computeShapeHelper(!1,t,u,r,s,a,i,o),u}static computeShapeHelper(t,n,r,s,a,i,o,u){if(t)for(let e=0;e<n.length-2;e++)r.push(1);else for(let t=0;t<n.length-2;t++)r.push(e.adjustPadAndReturnShape(n[t+2],s[t],a[t],i[t],o,t,t+n.length-2,u))}static adjustPadAndReturnShape(e,t,n,r,s,a,i,o){let u=n*(r-1)+1;if(!o||"NOTSET"===o)return Math.floor((e+s[a]+s[i]-u)/t+1);switch(o){case"VALID":return s[a]=0,s[i]=0,Math.floor((e-u)/t+1);case"SAME_LOWER":case"SAME_UPPER":if(1!==n)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let n=((e+t-1)/t-1)*t+r-e;return s[a]=Math.floor("SAME_LOWER"===o?(n+1)/2:n/2),s[i]=n-s[a],Math.floor((e+n-r)/t+1)}default:throw new Error("Unsupported AutoPad type")}}},bn=class{static getShapeOfGemmResult(e,t,n,r,s){if(2!==e.length||2!==n.length)throw new Error("shape need to be of size 2");let a,i,o;t?(a=e[1],i=e[0]):(a=e[0],i=e[1]);let u=-1;if(r?(o=n[0],u=1):(o=n[1],u=0),n[u]!==i)throw new Error("dimension mismatch");if(a<=0||o<=0||i<=0)throw new Error("invalid shape specified");if(s&&!fn.isValidBroadcast(s,[a,o]))throw new Error("gemm: invalid bias shape for broadcast");return[a,o,i]}},yn=-34028234663852886e22,xn=34028234663852886e22})),gl=Oe((()=>{ul(),ml(),wn=64,vn=(e,t)=>{if(3===t)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(4!==t)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},$n=(e,t=1)=>{let n=vn(e,t);return"string"==typeof n?n:n[0]},kn=(e,t=1)=>{let n=vn(e,t);return"string"==typeof n?n:n[1]},In=(...e)=>{let t=[];return e.forEach((e=>{0!==e.length&&t.push({type:12,data:e},{type:12,data:mn.computeStrides(e)})})),t},Sn=e=>e%4==0?4:e%2==0?2:1,_n=(e="f32",t,n="0")=>t&&1!==t?`vec${t}<${e}>(${n})`:`${e}(${n})`,Cn=(e,t,n)=>"f32"===e?n:1===t?`f32(${n})`:`vec${t}<f32>(${n})`,Tn=(e,t)=>4===t?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:2===t?`(${e}.x + ${e}.y)`:3===t?`(${e}.x + ${e}.y + ${e}.z)`:e,En=(e,t,n,r)=>e.startsWith("uniforms.")&&n>4?"string"==typeof t?"f16"===r?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:"f16"===r?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:n>1?`${e}[${t}]`:e,Nn=(e,t,n,r,s)=>{let a="number"==typeof n,i=a?n:n.length,o=[...new Array(i).keys()],u=i<2?"u32":i<=4?`vec${i}<u32>`:`array<u32, ${i}>`,l=vn(t,s),c="string"==typeof l?l:l[1],h="string"==typeof l?l:l[0],d={indices:u,value:c,storage:h,tensor:t},p=e=>"string"==typeof e?e:`${e}u`,f={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},m=a?"uniforms.":"",g=`${m}${e}_shape`,b=`${m}${e}_strides`,y="";for(let e=0;e<i-1;e++)y+=`\n    let dim${e} = current / ${En(b,e,i)};\n    let rest${e} = current % ${En(b,e,i)};\n    indices[${e}] = dim${e};\n    current = rest${e};\n    `;y+=`indices[${i-1}] = current;`;let x=i<2?"":`\n  fn o2i_${e}(offset: u32) -> ${d.indices} {\n    var indices: ${d.indices};\n    var current = offset;\n    ${y}\n    return indices;\n  }`,w=[];if(i>=2)for(let e=i-1;e>=0;e--)w.push(`${En(b,e,i)} * (indices[${e}])`);let v=i<2?"":`\n  fn i2o_${e}(indices: ${d.indices}) -> u32 {\n    return ${w.join("+")};\n  }`,$=(...e)=>0===i?"0u":`${d.indices}(${e.map(p).join(",")})`,k=(e,t)=>i<2?`${e}`:`${En(e,t,i)}`,I={},S=(t,n)=>(()=>{if(d.storage===d.value)return`${e}[${t}]=${n};`;if("vec2<u32>"===d.storage&&"i32"===d.value)return`${e}[${t}]=vec2<u32>(u32(${n}), select(0u, 0xFFFFFFFFu, ${n} < 0));`;if("vec2<u32>"===d.storage&&"u32"===d.value)return`${e}[${t}]=vec2<u32>(u32(${n}), 0u);`;if("u32"===d.storage&&"vec4<bool>"===d.value)return`${e}[${t}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${n}));`;throw new Error(`not supported combination of storage type ${d.storage} and value type ${d.value} yet`)})(),_=t=>(()=>{if(d.storage===d.value)return`${e}[${t}]`;if("vec2<u32>"===d.storage&&"i32"===d.value)return`i32(${e}[${t}].x)`;if("vec2<u32>"===d.storage&&"u32"===d.value)return`u32(${e}[${t}].x)`;if("u32"===d.storage&&"vec4<bool>"===d.value)return`vec4<bool>(bool(${e}[${t}] & 0xFFu), bool(${e}[${t}] & 0xFF00u), bool(${e}[${t}] & 0xFF0000u), bool(${e}[${t}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${d.storage} and value type ${d.value} yet`)})(),C=i<2?"":`\n  fn get_${e}ByIndices(indices: ${d.indices}) -> ${c} {\n    return ${_(`i2o_${e}(indices)`)};\n  }`,T=i<2?"":(()=>{let t=o.map((e=>`d${e}: u32`)).join(", "),n=o.map((e=>`d${e}`)).join(", ");return`\n  fn get_${e}(${t}) -> ${c} {\n    return get_${e}ByIndices(${$(n)});\n  }`})(),E=i<2?"":`\n  fn set_${e}ByIndices(indices: ${d.indices}, value: ${c}) {\n    ${S(`i2o_${e}(indices)`,"value")}\n  }`,N=i<2?"":(()=>{let t=o.map((e=>`d${e}: u32`)).join(", "),n=o.map((e=>`d${e}`)).join(", ");return`\n  fn set_${e}(${t}, value: ${c}) {\n    set_${e}ByIndices(${$(n)}, value);\n  }`})();return{impl:()=>{let e=[],t=!1;return f.offsetToIndices&&(e.push(x),t=!0),f.indicesToOffset&&(e.push(v),t=!0),f.broadcastedIndicesToOffset&&(Object.values(I).forEach((t=>e.push(t))),t=!0),f.set&&(e.push(N),t=!0),f.setByIndices&&(e.push(E),t=!0),f.get&&(e.push(T),t=!0),f.getByIndices&&(e.push(C),t=!0),!a&&t&&e.unshift(`const ${g} = ${d.indices}(${n.join(",")});`,`const ${b} = ${d.indices}(${mn.computeStrides(n).join(",")});`),e.join("\n")},type:d,offsetToIndices:t=>(f.offsetToIndices=!0,i<2?t:`o2i_${e}(${t})`),indicesToOffset:t=>(f.indicesToOffset=!0,i<2?t:`i2o_${e}(${t})`),broadcastedIndicesToOffset:(t,n)=>{f.broadcastedIndicesToOffset=!0;let r=`${n.name}broadcastedIndicesTo${e}Offset`;if(r in I)return`${r}(${t})`;let s=[];for(let e=i-1;e>=0;e--){let t=n.indicesGet("outputIndices",e+n.rank-i);s.push(`${k(b,e)} * (${t} % ${k(g,e)})`)}return I[r]=`fn ${r}(outputIndices: ${n.type.indices}) -> u32 {\n             return ${s.length>0?s.join("+"):"0u"};\n           }`,`${r}(${t})`},indices:$,indicesGet:k,indicesSet:(e,t,n)=>i<2?`${e}=${n};`:`${En(e,t,i)}=${n};`,set:(...t)=>{if(t.length!==i+1)throw new Error(`indices length must be ${i}`);let n=t[i];if("string"!=typeof n)throw new Error("value must be string");let r=t.slice(0,i).map(p).join(",");return 0===i?S("0u",n):1===i?S(r[0],n):(f.set=!0,f.setByIndices=!0,f.indicesToOffset=!0,`set_${e}(${r}, ${n})`)},setByOffset:S,setByIndices:(t,n)=>i<2?S(t,n):(f.setByIndices=!0,f.indicesToOffset=!0,`set_${e}ByIndices(${t}, ${n});`),get:(...t)=>{if(t.length!==i)throw new Error(`indices length must be ${i}`);let n=t.map(p).join(",");return 0===i?_("0u"):1===i?_(n[0]):(f.get=!0,f.getByIndices=!0,f.indicesToOffset=!0,`get_${e}(${n})`)},getByOffset:_,getByIndices:t=>i<2?_(t):(f.getByIndices=!0,f.indicesToOffset=!0,`get_${e}ByIndices(${t})`),usage:r,name:e,strides:b,shape:g,rank:i}},Rn=(e,t,n,r=1)=>Nn(e,t,n,"input",r),An=(e,t,n,r=1)=>Nn(e,t,n,"output",r),Dn=(e,t,n,r=1)=>Nn(e,t,n,"internal",r),On=class{constructor(e,t){this.normalizedDispatchGroup=e,this.limits=t,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${"number"==typeof e?`${e}u`:e}) { return; }`}mainStart(e=wn){let t="number"==typeof e?e:e[0],n="number"==typeof e?1:e[1],r="number"==typeof e?1:e[2];if(t>this.limits.maxComputeWorkgroupSizeX||n>this.limits.maxComputeWorkgroupSizeY||r>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${t}, ${n}, ${r}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(t*n*r>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${t}, ${n}, ${r}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let s=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2];return`@compute @workgroup_size(${t}, ${n}, ${r})\n  fn main(${s?"@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>":"@builtin(global_invocation_id) global_id : vec3<u32>,\n                                             @builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>"}) {\n    ${s?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${t*n*r}u + local_idx;`}\n  `}appendVariableUniforms(e){0!==e.rank&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,t){if("internal"===e.usage)throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let n="input"===e.usage?"read":"read_write",r=e.type.storage;return`@group(0) @binding(${t}) var<storage, ${n}> ${e.name}: array<${r}>;`}declareVariables(...e){return e.map((e=>this.declareVariable(e,this.variableIndex++))).join("\n")}registerInternalVariable(e){if("internal"!==e.usage)throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach((e=>this.registerInternalVariable(e))),this}registerUniform(e,t,n=1){return this.uniforms.push({name:e,type:t,length:n}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(0===this.uniforms.length)return"";let e=[];for(let{name:t,type:n,length:r}of this.uniforms)if(r&&r>4)"f16"===n?e.push(`@align(16) ${t}:array<mat2x4<${n}>, ${Math.ceil(r/8)}>`):e.push(`${t}:array<vec4<${n}>, ${Math.ceil(r/4)}>`);else{let s=null==r||1===r?n:`vec${r}<${n}>`;e.push(`${t}:${s}`)}return`\n      struct Uniforms { ${e.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map((e=>e.impl())).join("\n")+this.internalVariables.map((e=>e.impl())).join("\n")}get variablesInfo(){if(0===this.uniforms.length)return;let e=e=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(e)];return this.uniforms.map((t=>[e(t.type),t.length??1]))}},Fn=(e,t)=>new On(e,t),zn=(e,t)=>{let n=e.length,r=[];for(let s=0;s<n;s++){let a=n-1-s,i=e[a]||1;(t[t.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}})),bl=Oe((()=>{ul(),ml(),fl(),gl(),Mn=e=>{if(!e||1!==e.length)throw new Error("Transpose requires 1 input.")},Ln=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,Bn=(e,t)=>mn.sortBasedOnPerm(e,Ln(e.length,t)),Pn=(e,t,n,r)=>{let s=[];s.push(`fn perm(i: ${r.type.indices}) -> ${n.type.indices} {\n    var a: ${n.type.indices};`);for(let r=0;r<t;++r)s.push(n.indicesSet("a",e[r],`i[${r}]`));return s.push("return a;}"),s.join("\n")},Wn=(e,t)=>{let n,r=e.dataType,s=e.dims.length,a=Ln(s,t),i=Bn(e.dims,a),o=An("output",r,i.length),u=Rn("a",r,s);if(2===a.length&&1===a[0]&&0===a[1]){let e=o.type.value,t=[16,16,1];n=n=>`\n  ${n.registerUniform("output_size","u32").declareVariables(u,o)}\n  var<workgroup> tile : array<array<${e}, ${t[0]+1}>, ${t[0]}>;\n  ${n.mainStart(t)}\n    var x = workgroup_id.x * ${t[0]}u + local_id.x;\n    var y = workgroup_id.y * ${t[0]}u + local_id.y;\n    let width = uniforms.output_shape[0];\n    let height = uniforms.output_shape[1];\n    if (x < width && y < height) {\n      tile[local_id.y][local_id.x] = ${u.getByOffset("y * width + x")};\n    }\n    workgroupBarrier();\n    x = workgroup_id.y * ${t[0]}u + local_id.x;\n    y = workgroup_id.x * ${t[0]}u + local_id.y;\n    if (x < height && y < width) {\n      ${o.setByOffset("y * height + x","tile[local_id.x][local_id.y]")}\n    }\n  }`}else n=e=>`\n  ${e.registerUniform("output_size","u32").declareVariables(u,o)}\n\n  ${Pn(a,s,u,o)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${o.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${o.setByOffset("global_idx",u.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:e=>{let t=mn.size(i);return{outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(t/64)},programUniforms:[{type:12,data:t},...In(e[0].dims,i)]}},getShaderSource:n}},Un=(e,t)=>{Mn(e.inputs),e.compute(Wn(e.inputs[0],t.perm))},Vn=e=>dn({perm:e.perm})})),yl=Oe((()=>{ul(),ml(),gl(),xl(),bl(),Gn={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Hn={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},jn={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},qn={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Kn=(e,t)=>{let n=[];for(let r=t-e;r<t;++r)n.push(r);return n},Xn=(e,t)=>{let n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]},Yn=(e,t)=>{let n=e.length+t.length,r=[],s=0;for(let a=0;a<n;a++)-1===t.indexOf(a)?r.push(e[s++]):r.push(1);return r},Zn=(e,t)=>{for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0},Jn=(e,t)=>{let n=[];if(!Zn(e,t)){for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);e.forEach((e=>n.push(e)))}return n},Qn=(e,t,n,r,s,a,i)=>{let o=n[0].dims,u=mn.size(a),l=mn.size(i),c=Rn("_A",n[0].dataType,o),h=An("output",s,a);return{name:e,shaderCache:t,getShaderSource:e=>`\n        ${e.registerUniform("reduceSize","u32").declareVariables(c,h)}\n        \n          var<workgroup> aBestValues : array<f32, 32>;\n       \n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${e.mainStart(32)}\n\n          let outputIndex = global_idx / 32;\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = f32(${jn[r]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + 32) {\n           let candidate = f32(${c.getByOffset("offset + k")});\n           bestValue = ${Gn[r]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, 32u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${Hn[r]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${h.setByOffset("outputIndex","mean"===r?`${h.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${h.type.storage}(${qn[r]})`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:u},programUniforms:[{type:12,data:l}]})}},er=(e,t,n,r)=>{let s=1===e.inputs.length?n:fr(e.inputs,n),a=s.axes;0===a.length&&!s.noopWithEmptyAxes&&(a=e.inputs[0].dims.map(((e,t)=>t)));let i=mn.normalizeAxes(a,e.inputs[0].dims.length),o=i,u=e.inputs[0],l=Jn(o,e.inputs[0].dims.length);l.length>0&&(u=e.compute(Wn(e.inputs[0],l),{inputs:[0],outputs:[-1]})[0],o=Kn(o.length,u.dims.length));let[c,h]=Xn(u.dims,o),d=c;s.keepDims&&(d=Yn(c,i)),e.compute(Qn(t,{hint:s.cacheKey,inputDependencies:["type"]},[u],r,e.inputs[0].dataType,d,h),{inputs:[u]})},tr=(e,t)=>{er(e,"ReduceMeanShared",t,"mean")},nr=(e,t)=>{er(e,"ReduceL1Shared",t,"l1")},rr=(e,t)=>{er(e,"ReduceL2Shared",t,"l2")},sr=(e,t)=>{er(e,"ReduceLogSumExpShared",t,"logSumExp")},ar=(e,t)=>{er(e,"ReduceMaxShared",t,"max")},ir=(e,t)=>{er(e,"ReduceMinShared",t,"min")},or=(e,t)=>{er(e,"ReduceProdShared",t,"prod")},ur=(e,t)=>{er(e,"ReduceSumShared",t,"sum")},lr=(e,t)=>{er(e,"ReduceSumSquareShared",t,"sumSquare")},cr=(e,t)=>{er(e,"ReduceLogSumShared",t,"logSum")}})),xl=Oe((()=>{ul(),ml(),fl(),gl(),yl(),hr=e=>{if(!e||0===e.length||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(2===e.length&&1!==e[1].dims.length)throw new Error("Invalid axes input dims.")},dr=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],pr=(e,t,n,r,s,a,i=!1,o=!1)=>{let u=[],l=n[0].dims,c=l.length,h=mn.normalizeAxes(s,c),d=!o&&0===h.length;l.forEach(((e,t)=>{d||h.indexOf(t)>=0?i&&u.push(1):u.push(e)}));let p=u.length,f=mn.size(u);return{name:e,shaderCache:t,getShaderSource:e=>{let t=[],s=Rn("_A",n[0].dataType,c),o=An("output",a,p),u=r(s,o,h),f=u[2];for(let e=0,n=0;e<c;e++)d||h.indexOf(e)>=0?(i&&n++,f=`for(var j${e}: u32 = 0; j${e} < ${l[e]}; j${e}++) {\n                  ${u[2].includes("last_index")?`let last_index = j${e};`:""}\n                  ${s.indicesSet("input_indices",e,`j${e}`)}\n                  ${f}\n                }`):(t.push(`${s.indicesSet("input_indices",e,o.indicesGet("output_indices",n))};`),n++);return`\n\n        ${e.registerUniform("output_size","u32").declareVariables(s,o)}\n\n        ${e.mainStart()}\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${s.type.indices};\n          let output_indices = ${o.offsetToIndices("global_idx")};\n\n          ${t.join("\n")}\n          ${u[0]}       // init ops for reduce max/min\n          ${u[1]}\n          ${f}\n          ${u[3]}\n          ${4===u.length?o.setByOffset("global_idx","value"):u.slice(4).join("\n")}\n        }`},getRunData:()=>({outputs:[{dims:u,dataType:a}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:[{type:12,data:f},...In(l,u)]})}},fr=(e,t)=>{let n=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((e=>n.push(Number(e)))),dn({axes:n,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},mr=(e,t,n,r)=>{let s=e.inputs,a=1===s.length?n:fr(s,n);e.compute(pr(t,{hint:a.cacheKey,inputDependencies:["rank"]},[s[0]],a.noopWithEmptyAxes&&0===a.axes.length?dr:r,a.axes,s[0].dataType,a.keepDims,a.noopWithEmptyAxes),{inputs:[0]})},gr=(e,t)=>{hr(e.inputs),mr(e,"ReduceLogSum",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += ${e.getByIndices("input_indices")};`,"value = log(value);"]))},br=(e,t)=>{hr(e.inputs),mr(e,"ReduceL1",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += abs(${e.getByIndices("input_indices")});`,""]))},yr=(e,t)=>{hr(e.inputs),mr(e,"ReduceL2",t,((e,t)=>[`var t = ${t.type.value}(0); var value = ${t.type.value}(0);`,"",`t = ${e.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"]))},xr=(e,t)=>{hr(e.inputs),mr(e,"ReduceLogSumExp",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += exp(${e.getByIndices("input_indices")});`,"value = log(value);"]))},wr=(e,t)=>{hr(e.inputs),mr(e,"ReduceMax",t,((e,t,n)=>{let r=[];for(let t=0;t<e.rank;t++)(n.indexOf(t)>=0||0===n.length)&&r.push(e.indicesSet("input_indices",t,0));return[`${r.join("\n")}`,`var value = ${e.getByIndices("input_indices")};`,`value = max(value, ${e.getByIndices("input_indices")});`,""]}))},vr=(e,t)=>{hr(e.inputs),mr(e,"ReduceMean",t,((t,n,r)=>{let s=1;for(let n=0;n<t.rank;n++)(r.indexOf(n)>=0||0===r.length)&&(s*=e.inputs[0].dims[n]);return["var sum = f32(0);","",`sum += f32(${t.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${s});`]}))},$r=(e,t)=>{hr(e.inputs),mr(e,"ReduceMin",t,((e,t,n)=>{let r=[];for(let t=0;t<e.rank;t++)(n.indexOf(t)>=0||0===n.length)&&r.push(`input_indices[${t}] = 0;`);return[`${r.join("\n")}`,`var value = ${e.getByIndices("input_indices")};`,`value = min(value, ${e.getByIndices("input_indices")});`,""]}))},kr=(e,t)=>{hr(e.inputs),mr(e,"ReduceProd",t,((e,t)=>[`var value = ${t.type.storage}(1);`,"",`value *= ${e.getByIndices("input_indices")};`,""]))},Ir=(e,t)=>{hr(e.inputs),mr(e,"ReduceSum",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += ${e.getByIndices("input_indices")};`,""]))},Sr=(e,t)=>{hr(e.inputs),mr(e,"ReduceSumSquare",t,((e,t)=>[`var t = ${t.type.value}(0); var value = ${t.type.value}(0);`,"",`t = ${e.getByIndices("input_indices")}; value += t * t;`,""]))},_r=(e,t,n)=>{if(0===t.length)return n;let r=1,s=1;for(let n=0;n<t.length;n++)-1===t.indexOf(n)?r*=e[n]:s*=e[n];return s<32&&r>1024},Cr=(e,t)=>{_r(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?vr(e,t):tr(e,t)},Tr=(e,t)=>{_r(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?br(e,t):nr(e,t)},Er=(e,t)=>{_r(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?yr(e,t):rr(e,t)},Nr=(e,t)=>{_r(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xr(e,t):sr(e,t)},Rr=(e,t)=>{_r(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?wr(e,t):ar(e,t)},Ar=(e,t)=>{_r(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$r(e,t):ir(e,t)},Dr=(e,t)=>{_r(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?kr(e,t):or(e,t)},Or=(e,t)=>{_r(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ir(e,t):ur(e,t)},Fr=(e,t)=>{_r(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sr(e,t):lr(e,t)},zr=(e,t)=>{_r(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?gr(e,t):cr(e,t)}})),wl=Oe((()=>{ul(),fl(),xl(),Mr=e=>{if(!e||0===e.length||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(1!==e[0].dataType)throw new Error("Invalid input type.")},Lr=(e,t)=>{Mr(e.inputs),e.compute(pr("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],((e,n,r)=>{let s=[];for(let t=0;t<e.rank;t++)(r.indexOf(t)>=0||0===r.length)&&s.push(`input_indices[${t}] = 0;`);return[`${s.join("\n")}`,`var value = ${e.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${e.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${e.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]}),[t.axis],7,t.keepDims),{inputs:[0]})},Br=(e,t)=>{Mr(e.inputs),e.compute(pr("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],((e,n,r)=>{let s=[];for(let t=0;t<e.rank;t++)(r.indexOf(t)>=0||0===r.length)&&s.push(`input_indices[${t}] = 0;`);return[`${s.join("\n")}`,`var value = ${e.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${e.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${e.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]}),[t.axis],7,t.keepDims),{inputs:[0]})},Pr=e=>dn(e)})),vl=Oe((()=>{ul(),dl(),gl(),Wr=(e,t)=>{let n=e[0],r=e[1],s=e[2],a=e[3],i=e[4],o=e[5];if(i&&o)throw new Error("Attention cannot have both past and relative_position_bias");if(3!==n.dims.length)throw new Error('Input "input" must have 3 dimensions');let u=n.dims[0],l=n.dims[1],c=n.dims[2];if(1!==s.dims.length)throw new Error('Input "bias" is expected to have 1 dimensions');if(2!==r.dims.length)throw new Error('Input "weights" is expected to have 2 dimensions');if(r.dims[0]!==c)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(s.dims[0]!==r.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let h=s.dims[0]/3,d=h,p=d;if(t.qkvHiddenSizes.length>0){if(3!==t.qkvHiddenSizes.length)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let e of t.qkvHiddenSizes)if(e%t.numHeads!=0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");h=t.qkvHiddenSizes[0],d=t.qkvHiddenSizes[1],p=t.qkvHiddenSizes[2]}let f=l;if(h!==d)throw new Error("qkv_hidden_sizes first element should be same as the second");if(s.dims[0]!==h+d+p)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let m=0;if(i){if(d!==p)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(5!==i.dims.length)throw new Error('Input "past" must have 5 dimensions');if(2!==i.dims[0])throw new Error('Input "past" first dimension must be 2');if(i.dims[1]!==u)throw new Error('Input "past" second dimension must be batch_size');if(i.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(i.dims[4]!==d/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(m=i.dims[3])}let g=f+m;if(a)throw new Error("Mask not supported");if(i)throw new Error("past is not supported");return{batchSize:u,sequenceLength:l,pastSequenceLength:m,kvSequenceLength:f,totalSequenceLength:g,maxSequenceLength:-1,inputHiddenSize:c,hiddenSize:h,vHiddenSize:p,headSize:Math.floor(h/t.numHeads),vHeadSize:Math.floor(p/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:0,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Ur=(e,t,n,r)=>{let s=Sn(r),a=64,i=r/s;i<a?a=1:i/8<64&&(a=Math.ceil(i/8));let o=Math.ceil(r/s/a),u=[{type:t.dataType,data:1/r},{type:12,data:i},{type:12,data:o}],l=$n(t.dataType,s),c=kn(1,s);return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${a};${l};${s}`},getShaderSource:e=>{let n=An("x",t.dataType,t.dims,s),r=[{name:"d_inv",type:kn(t.dataType)},{name:"d_comp",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`\n  var<workgroup> thread_max: array<f32, ${a}>;\n  var<workgroup> thread_sum: array<f32, ${a}>;\n  ${e.registerUniforms(r).declareVariables(n)}\n  ${e.mainStart([a,1,1])}\n    let local_offset = local_idx * uniforms.elements_per_thread;\n    let offset = workgroup_id.x * uniforms.d_comp + local_offset;\n\n    var thread_max_vector = ${c}(-3.402823e+38f);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${c}(x[offset + i]), thread_max_vector);\n    }\n    thread_max[local_idx] = ${(()=>{switch(s){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${s}`)}})()};\n    workgroupBarrier();\n\n    var max_value =  f32(-3.402823e+38f);\n    for (var i = 0u; i < ${a}; i++) {\n      max_value = max(thread_max[i], max_value);\n    }\n\n    var sum_vector = ${c}(0);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n      sum_vector += exp(${c}(x[offset + i]) - max_value);\n    }\n    thread_sum[local_idx] = ${(()=>{switch(s){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${s}`)}})()};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${a}; i++) {\n      sum += thread_sum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n        x[offset + i] = ${n.type.value}(uniforms.d_inv);\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n        var f32input = ${c}(x[offset + i]);\n        x[offset + i] = ${n.type.value}(exp(f32input - max_value) / sum);\n      }\n    }\n  }`},getRunData:()=>({outputs:[],dispatchGroup:{x:n},programUniforms:u})}},Vr=(e,t,n,r,s,a,i,o)=>{let u=o+a.kvSequenceLength,l=[a.batchSize,a.numHeads,a.sequenceLength,u],c=void 0===a.kvNumHeads&&e.outputCount>1,h=c?[a.batchSize,a.numHeads,u,a.headSize]:void 0,d=0===i.scale?1/Math.sqrt(a.headSize):i.scale,p=Sn(a.headSize),f=a.headSize/p,m={x:Math.ceil(u/12),y:Math.ceil(a.sequenceLength/12),z:a.batchSize*a.numHeads},g=[{type:12,data:a.sequenceLength},{type:12,data:f},{type:12,data:u},{type:12,data:a.numHeads},{type:1,data:d},{type:12,data:o},{type:12,data:a.kvSequenceLength}],b=["type","type"];r&&b.push("type"),s&&b.push("type");let y=[{dims:l,dataType:t.dataType,gpuDataType:0}];return c&&y.push({dims:h,dataType:t.dataType,gpuDataType:0}),{name:"AttentionProbs",shaderCache:{hint:`${p};${void 0!==s};${void 0!==r};${e.outputCount}`,inputDependencies:b},getRunData:()=>({outputs:y,dispatchGroup:m,programUniforms:g}),getShaderSource:e=>{let a=Rn("q",t.dataType,t.dims,p),i=[a,Rn("key",n.dataType,n.dims,p)];if(r){let e=Rn("past_key",r.dataType,r.dims,p);i.push(e)}s&&i.push(Rn("relative_position_bias",s.dataType,s.dims));let o=An("output",t.dataType,l),u=[o];c&&u.push(An("present_key",t.dataType,h,p));let d=kn(1,p);return`\n  const TILE_SIZE = 12u;\n\n  var<workgroup> tileQ: array<${a.type.storage}, 144>;\n  var<workgroup> tileK: array<${a.type.storage}, 144>;\n  ${e.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"}]).declareVariables(...i,...u)}\n  ${e.mainStart([12,12,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    ${r&&c?"\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx;\n    let pastKeyOffset = uniforms.past_sequence_length * uniforms.K * headIdx;":"\n    let kOffset = uniforms.N * uniforms.K * headIdx + n * uniforms.K;"}\n    ${c?"let presentKeyOffset = headIdx * uniforms.N * uniforms.K;":""}\n    var value = ${d}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n      ${r&&c?"\n              if (n + local_id.y < uniforms.past_sequence_length) {\n                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];\n              } else {\n                tileK[idx] =\n                         key[kOffset + (n + local_id.y - uniforms.past_sequence_length) * uniforms.K + w + local_id.x];\n              }":"tileK[idx] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];"}\n      ${c?"present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];":""}\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {\n        value += ${d}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (global_id.y < uniforms.M && global_id.x < uniforms.N) {\n      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;\n      var sum: f32 = ${(()=>{switch(p){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${p}`)}})()};\n        output[outputIdx] = ${o.type.value} (sum * uniforms.alpha) + ${s?"relative_position_bias[outputIdx]":"0.0"};\n    }\n  }`}}},Gr=(e,t,n,r,s,a)=>{let i=a+s.kvSequenceLength,o=s.nReps?s.nReps:1,u=s.vHiddenSize*o,l=null==s.kvNumHeads&&e.outputCount>1,c=l?[s.batchSize,s.numHeads,i,s.headSize]:void 0,h=[s.batchSize,s.sequenceLength,u],d={x:Math.ceil(s.vHeadSize/12),y:Math.ceil(s.sequenceLength/12),z:s.batchSize*s.numHeads},p=[{type:12,data:s.sequenceLength},{type:12,data:i},{type:12,data:s.vHeadSize},{type:12,data:s.numHeads},{type:12,data:u},{type:12,data:a},{type:12,data:s.kvSequenceLength}],f=r?["type","type","type"]:["type","type"],m=[{dims:h,dataType:t.dataType,gpuDataType:0}];return l&&m.push({dims:c,dataType:t.dataType,gpuDataType:0}),{name:"AttentionScore",shaderCache:{hint:`${void 0!==r};${e.outputCount}`,inputDependencies:f},getRunData:()=>({outputs:m,dispatchGroup:d,programUniforms:p}),getShaderSource:e=>{let s=Rn("probs",t.dataType,t.dims),a=[s,Rn("v",n.dataType,n.dims)];r&&a.push(Rn("past_value",r.dataType,r.dims));let i=[An("output",t.dataType,h)];return l&&i.push(An("present_value",t.dataType,c)),`\n  const TILE_SIZE = 12u;\n  var<workgroup> tileQ: array<${s.type.value}, 144>;\n  var<workgroup> tileK: array<${s.type.value}, 144>;\n  ${e.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"}]).declareVariables(...a,...i)}\n  ${e.mainStart([12,12,1])}\n   let headIdx = workgroup_id.z;\n   let m = global_id.y;\n   let n = global_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   ${r&&l?"\n    let pastValueOffset = headIdx * uniforms.N * uniforms.past_sequence_length + n;\n    let vOffset = headIdx * uniforms.N * uniforms.kv_sequence_length + n;\n      ":"\n   let offsetB = headIdx * uniforms.N * uniforms.K + n;\n            "}\n    ${l?"let presentValueOffset = headIdx * uniforms.N * uniforms.K + n;":""}\n   var value = ${s.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n        ${r&&l?"\n        if (w + local_id.y < uniforms.past_sequence_length) {\n          tileK[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];\n        } else {\n          tileK[idx] = v[vOffset + (w + local_id.y - uniforms.past_sequence_length) * uniforms.N];\n        }\n      ":"\n        tileK[idx] = v[offsetB + (w + local_id.y) * uniforms.N];\n      "}\n        ${l?"present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileK[idx];":""}\n      }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`}}},Hr=(e,t,n,r,s,a,i,o,u,l,c)=>{let h=e.outputCount,d=void 0!==l.kvNumHeads||h>1?l.pastSequenceLength:0,p=d+l.kvSequenceLength,f=void 0===l.kvNumHeads&&h>1&&i?[t,n,i]:[t,n];u&&f.push(u);let m=e.compute(Vr(e,t,n,h>1?i:void 0,u,l,c,d),{inputs:f,outputs:void 0===l.kvNumHeads&&h>1?[-1,1]:[-1]})[0];e.compute(Ur(0,m,l.batchSize*l.numHeads*l.sequenceLength,p),{inputs:[m],outputs:[]});let g=void 0===l.kvNumHeads&&h>1&&o?[m,r,o]:[m,r];e.compute(Gr(e,m,r,h>1&&o?o:void 0,l,d),{inputs:g,outputs:void 0===l.kvNumHeads&&h>1?[0,2]:[0]})},jr=(e,t)=>{let n=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],r=t.sequenceLength,s=t.inputHiddenSize,a=t.headSize,i={x:Math.ceil(t.headSize/12),y:Math.ceil(t.sequenceLength/12),z:t.batchSize*t.numHeads},o=[e.inputs[0],e.inputs[1],e.inputs[2]],u=[{type:12,data:r},{type:12,data:s},{type:12,data:a},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}];return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:n,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:n,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:i,programUniforms:u}),getShaderSource:e=>{let t=An("output_q",o[0].dataType,n),r=An("output_k",o[0].dataType,n),s=An("output_v",o[0].dataType,n),a=Rn("input",o[0].dataType,o[0].dims),i=Rn("weight",o[1].dataType,o[1].dims),u=Rn("bias",o[2].dataType,o[2].dims),l=a.type.storage;return`\n  const TILE_SIZE = 12u;\n  var<workgroup> tileInput: array<${l}, 144>;\n  var<workgroup> tileWeightQ: array<${l}, 144>;\n  var<workgroup> tileWeightK: array<${l}, 144>;\n  var<workgroup> tileWeightV: array<${l}, 144>;\n  ${e.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}]).declareVariables(a,i,u,t,r,s)}\n  ${e.mainStart([12,12,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = global_id.y;\n    let n = global_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${l}(0);\n    var valueK = ${l}(0);\n    var valueV = ${l}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`}},{inputs:o,outputs:[-1,-1,-1]})},qr=(e,t)=>{let n=Wr(e.inputs,t),[r,s,a]=jr(e,n);return Hr(e,r,s,a,e.inputs[4],void 0,void 0,void 0,e.inputs[5],n,t)}})),$l=Oe((()=>{rt(),ul(),ml(),fl(),gl(),Kr=(e,t)=>{if(!e||5!==e.length)throw new Error("BatchNormalization requires 5 inputs");let n=(e,t,n)=>{let r=t.length;if(r!==e.length)throw new Error(`${n}: num dimensions != ${r}`);t.forEach(((t,r)=>{if(t!==e[r])throw new Error(`${n}: dim[${r}] do not match`)}))};if(e[0].dims.length>1){let r="NHWC"===t.format?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);n(e[1].dims,r,"Invalid input scale"),n(e[2].dims,r,"Invalid input B"),n(e[3].dims,r,"Invalid input mean"),n(e[4].dims,r,"Invalid input var")}else n(e[1].dims,[1],"Invalid input scale"),n(e[2].dims,[1],"Invalid input B"),n(e[3].dims,[1],"Invalid input mean"),n(e[4].dims,[1],"Invalid input var")},Xr=(e,t)=>{let{epsilon:n,spatial:r,format:s}=t,a=e[0].dims,i=r?Sn(a[a.length-1]):1,o="NHWC"===s&&a.length>1?i:1,u=mn.size(a)/i,l=r,c=l?a.length:a,h=Rn("x",e[0].dataType,e[0].dims,i),d=Rn("scale",e[1].dataType,e[1].dims,o),p=Rn("bias",e[2].dataType,e[2].dims,o),f=Rn("inputMean",e[3].dataType,e[3].dims,o),m=Rn("inputVar",e[4].dataType,e[4].dims,o),g=An("y",e[0].dataType,c,i);return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${r}_${i}`,inputDependencies:l?["rank","type","type","type","type"]:void 0},getShaderSource:e=>`\n  const epsilon = ${n};\n  ${e.registerUniform("outputSize","u32").declareVariables(h,d,p,f,m,g)}\n  ${e.mainStart()}\n  ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${g.offsetToIndices(`global_idx * ${i}`)};\n    ${(()=>{let e="";if(r)e=`let cOffset = ${1===a.length?"0u":"NHWC"===s?`outputIndices[${a.length-1}] / ${i}`:"outputIndices[1]"};`;else if("NCHW"===s)e=`\n            ${g.indicesSet("outputIndices","0","0")}\n            let cOffset = ${g.indicesToOffset("outputIndices")};`;else{e=`var cIndices = ${d.type.indices}(0);\n                       cIndices[0] = outputIndices[${a.length-1}];`;for(let t=1;t<d.rank;t++)e+=`cIndices[${t}] = outputIndices[${t}];`;e+=`let cOffset = ${d.indicesToOffset("cIndices")};`}return e})()}\n    let scale = ${d.getByOffset("cOffset")};\n    let bias = ${p.getByOffset("cOffset")};\n    let inputMean = ${f.getByOffset("cOffset")};\n    let inputVar = ${m.getByOffset("cOffset")};\n    let x = ${h.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${g.setByOffset("global_idx","value")}\n  }`,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:l?[{type:12,data:u},...In(a)]:[{type:12,data:u}]})}},Yr=e=>dn(e),Zr=(e,t)=>{let{inputs:n,outputCount:r}=e,s=Yr({...t,outputCount:r});if(ae.webgpu.validateInputContent&&Kr(n,s),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Xr(n,s))}})),kl=Oe((()=>{ml(),gl(),Jr=e=>{if(3!==e[0].dims.length)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(1!==e[1].dims.length)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Qr=e=>{let t=e[0].dims,n=e[0].dims[2],r=mn.size(t)/4,s=e[0].dataType,a=Rn("input",s,t,4),i=Rn("bias",s,[n],4),o=Rn("residual",s,t,4),u=An("output",s,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(r/64)}}),getShaderSource:e=>`\n  const channels = ${n}u / 4;\n  ${e.declareVariables(a,i,o,u)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(r)}\n    let value = ${a.getByOffset("global_idx")}\n      + ${i.getByOffset("global_idx % channels")} + ${o.getByOffset("global_idx")};\n    ${u.setByOffset("global_idx","value")}\n  }`}},es=e=>{Jr(e.inputs),e.compute(Qr(e.inputs))}})),Il=Oe((()=>{ul(),ml(),fl(),gl(),ts=(e,t,n,r,s,a)=>{let i=Math.ceil(t/4),o="";o="string"==typeof s?`${s}(a)`:s("a");let u=Rn("inputData",n,[i],4),l=An("outputData",r,[i],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(u,l)}\n\n  ${a??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${u.getByOffset("global_idx")};\n    ${l.setByOffset("global_idx",o)}\n  }`},ns=(e,t,n,r,s,a=e.dataType)=>({name:t,shaderCache:{hint:s,inputDependencies:["type"]},getShaderSource:t=>ts(t,mn.size(e.dims),e.dataType,a,n,r),getRunData:t=>({outputs:[{dims:e.dims,dataType:a}],dispatchGroup:{x:Math.ceil(mn.size(t[0].dims)/64/4)},programUniforms:[{type:12,data:Math.ceil(mn.size(e.dims)/4)}]})}),rs=e=>{e.compute(ns(e.inputs[0],"Abs","abs"))},ss=e=>{e.compute(ns(e.inputs[0],"Acos","acos"))},as=e=>{e.compute(ns(e.inputs[0],"Acosh","acosh"))},is=e=>{e.compute(ns(e.inputs[0],"Asin","asin"))},os=e=>{e.compute(ns(e.inputs[0],"Asinh","asinh"))},us=e=>{e.compute(ns(e.inputs[0],"Atan","atan"))},ls=e=>{e.compute(ns(e.inputs[0],"Atanh","atanh"))},cs=e=>dn(e),hs=(e,t)=>{let n;switch(t.to){case 10:n="vec4<f16>";break;case 1:n="vec4<f32>";break;case 12:n="vec4<u32>";break;case 6:n="vec4<i32>";break;case 9:n="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(ns(e.inputs[0],"Cast",n,void 0,t.cacheKey,t.to))},ds=e=>{let t=e.length>=2&&0!==e[1].data?e[1].getFloat32Array()[0]:yn,n=e.length>=3&&0!==e[2].data?e[2].getFloat32Array()[0]:xn;return dn({min:t,max:n})},ps=(e,t)=>{let n=1===e.inputs.length?t:ds(e.inputs),r=kn(e.inputs[0].dataType);e.compute(ns(e.inputs[0],"Clip",(e=>`clamp(${e}, clip_min_, clip_max_)`),`\n    const clip_min_: vec4<${r}> = vec4(${r}(${n.min}));\n    const clip_max_: vec4<${r}> = vec4(${r}(${n.max}));\n`,n.cacheKey),{inputs:[0]})},fs=e=>{e.compute(ns(e.inputs[0],"Ceil","ceil"))},ms=e=>{e.compute(ns(e.inputs[0],"Cos","cos"))},gs=e=>{e.compute(ns(e.inputs[0],"Cosh","cosh"))},bs=e=>dn(e),ys=(e,t)=>{let n=kn(e.inputs[0].dataType);e.compute(ns(e.inputs[0],"Elu",(e=>`elu_vf32(${e})`),`\n  const elu_alpha_ = ${n}(${t.alpha});\n\n  fn elu_f32(a: ${n}) -> ${n} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${n}>) -> vec4<${n}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},xs=(e="f32")=>`\nconst r0: ${e} = 0.3275911;\nconst r1: ${e} = 0.254829592;\nconst r2: ${e} = -0.284496736;\nconst r3: ${e} = 1.421413741;\nconst r4: ${e} = -1.453152027;\nconst r5: ${e} = 1.061405429;\n\nfn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,ws=e=>{let t=kn(e.inputs[0].dataType);e.compute(ns(e.inputs[0],"Erf",(e=>`erf_vf32(${e})`),xs(t)))},vs=e=>{e.compute(ns(e.inputs[0],"Exp","exp"))},$s=e=>{e.compute(ns(e.inputs[0],"Floor","floor"))},ks=e=>{let t=kn(e.inputs[0].dataType);e.compute(ns(e.inputs[0],"Gelu",(e=>`0.5 * ${e} * (1.0 + erf_vf32(${e} * 0.7071067811865475))`),xs(t)))},Is=(e,t)=>{let n=kn(e.inputs[0].dataType);e.compute(ns(e.inputs[0],"LeakyRelu",(e=>`select(leaky_relu_alpha_ * ${e}, ${e}, ${e} >= vec4<${n}>(0.0))`),`const leaky_relu_alpha_ = ${n}(${t.alpha});`,t.cacheKey))},Ss=e=>{e.compute(ns(e.inputs[0],"Not",(e=>`!${e}`)))},_s=e=>{e.compute(ns(e.inputs[0],"Neg",(e=>`-${e}`)))},Cs=e=>{e.compute(ns(e.inputs[0],"Reciprocal",(e=>`1.0/${e}`)))},Ts=e=>{let t=kn(e.inputs[0].dataType);e.compute(ns(e.inputs[0],"Relu",(e=>`select(vec4<${t}>(0.0), ${e}, ${e} > vec4<${t}>(0.0))`)))},Es=e=>{e.compute(ns(e.inputs[0],"Sigmoid",(e=>`(1.0 / (1.0 + exp(-${e})))`)))},Ns=e=>dn(e),Rs=(e,t)=>{let n=kn(e.inputs[0].dataType);e.compute(ns(e.inputs[0],"HardSigmoid",(e=>`max(vec4<${n}>(0.0), min(vec4<${n}>(1.0), ${t.alpha} * ${e} + vec4<${n}>(${t.beta})))`),void 0,t.cacheKey))},As=e=>{e.compute(ns(e.inputs[0],"Sin","sin"))},Ds=e=>{e.compute(ns(e.inputs[0],"Sinh","sinh"))},Os=e=>{e.compute(ns(e.inputs[0],"Sqrt","sqrt"))},Fs=e=>{e.compute(ns(e.inputs[0],"Tan","tan"))},zs=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,Ms=e=>{e.compute(ns(e.inputs[0],"Tanh",zs))},Ls=(e="f32")=>`\nconst fast_gelu_a: ${e} = 0.5;\nconst fast_gelu_b: ${e} = 0.7978845608028654;\nconst fast_gelu_c: ${e} = 0.035677408136300125;\n\nfn tanh_v(v: vec4<${e}>) -> vec4<${e}> {\n  return ${zs("v")};\n}\n`,Bs=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Ps=e=>{let t=kn(e.inputs[0].dataType);e.compute(ns(e.inputs[0],"FastGelu",Bs,Ls(t),void 0,e.inputs[0].dataType))},Ws=(e,t)=>{let n=kn(e.inputs[0].dataType);return e.compute(ns(e.inputs[0],"ThresholdedRelu",(e=>`select(vec4<${n}>(0.0), ${e}, ${e} > thresholded_relu_alpha_)`),`const thresholded_relu_alpha_ = vec4<${n}>(${t.alpha});`,t.cacheKey)),0},Us=e=>{e.compute(ns(e.inputs[0],"Log","log"))},Vs=(e,t)=>`\nconst alpha = vec4<${e}>(${t});\nconst one = ${e}(1.0);\nconst zero = ${e}(0.0);\n\nfn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {\n  let v = x *alpha;\n  var x1 : vec4<${e}>;\n  for (var i = 0; i < 4; i = i + 1) {\n    if (v[i] >= zero) {\n      x1[i] = one / (one + exp(-v[i]));\n    } else {\n      x1[i] = one - one / (one + exp(v[i]));\n    }\n  }\n  return x * x1;\n}\n`,Gs=e=>`quick_gelu_impl(${e})`,Hs=(e,t)=>{let n=kn(e.inputs[0].dataType);e.compute(ns(e.inputs[0],"QuickGelu",Gs,Vs(n,t.alpha),t.cacheKey,e.inputs[0].dataType))}})),Sl=Oe((()=>{ml(),gl(),Il(),js=e=>{if(3!==e[0].dims.length)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(1!==e[1].dims.length)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},qs=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let n=Rn("input",e[0].dataType,e[0].dims,4),r=Rn("bias",e[0].dataType,[e[0].dims[2]],4),s=An("output",e[0].dataType,t,4),a=mn.size(t)/4,i=$n(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:t=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${t.declareVariables(n,r,s)}\n\n  ${xs(i)}\n\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${s.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},Ks=e=>{js(e.inputs),e.compute(qs(e.inputs))}})),_l=Oe((()=>{ul(),ml(),gl(),Xs=(e,t,n,r,s,a,i,o,u,l,c,h)=>{let d,p;"string"==typeof o?d=p=(e,t)=>`${o}((${e}),(${t}))`:"function"==typeof o?d=p=o:(d=o.scalar,p=o.vector);let f,m=An("outputData",c,r.length,4),g=Rn("aData",u,t.length,4),b=Rn("bData",l,n.length,4);if(s)if(a){let e=1===mn.size(t),r=1===mn.size(n),s=t.length>0&&t[t.length-1]%4==0,a=n.length>0&&n[n.length-1]%4==0;f=e||r?m.setByOffset("global_idx",p(e?`${g.type.value}(${g.getByOffset("0")}.x)`:g.getByOffset("global_idx"),r?`${b.type.value}(${b.getByOffset("0")}.x)`:b.getByOffset("global_idx"))):`\n            let outputIndices = ${m.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${g.broadcastedIndicesToOffset("outputIndices",m)};\n            let offsetB = ${b.broadcastedIndicesToOffset("outputIndices",m)};\n            ${m.setByOffset("global_idx",p(i||s?g.getByOffset("offsetA / 4u"):`${g.type.value}(${g.getByOffset("offsetA / 4u")}[offsetA % 4u])`,i||a?b.getByOffset("offsetB / 4u"):`${b.type.value}(${b.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else f=m.setByOffset("global_idx",p(g.getByOffset("global_idx"),b.getByOffset("global_idx")));else{if(!a)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let e=(e,t,n="")=>{let r=`aData[indexA${t}][componentA${t}]`,s=`bData[indexB${t}][componentB${t}]`;return`\n            let outputIndices${t} = ${m.offsetToIndices(`global_idx * 4u + ${t}u`)};\n            let offsetA${t} = ${g.broadcastedIndicesToOffset(`outputIndices${t}`,m)};\n            let offsetB${t} = ${b.broadcastedIndicesToOffset(`outputIndices${t}`,m)};\n            let indexA${t} = offsetA${t} / 4u;\n            let indexB${t} = offsetB${t} / 4u;\n            let componentA${t} = offsetA${t} % 4u;\n            let componentB${t} = offsetB${t} % 4u;\n            ${e}[${t}] = ${n}(${d(r,s)});\n          `};f=9===c?`\n            var data = vec4<u32>(0);\n            ${e("data",0,"u32")}\n            ${e("data",1,"u32")}\n            ${e("data",2,"u32")}\n            ${e("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`\n            ${e("outputData[global_idx]",0)}\n            ${e("outputData[global_idx]",1)}\n            ${e("outputData[global_idx]",2)}\n            ${e("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(g,b,m)}\n\n        ${h??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${f}\n      }`},Ys=(e,t,n,r,s,a,i=n.dataType)=>{let o=!mn.areEqual(n.dims,r.dims),u=n.dims,l=mn.size(n.dims),c=!1,h=!1,d=[o];if(o){let e=fn.calcShape(n.dims,r.dims,!1);if(!e)throw new Error("Can't perform binary op on the given tensors");u=e,l=mn.size(u);let t=1===mn.size(n.dims),s=1===mn.size(r.dims),a=n.dims.length>0&&n.dims[n.dims.length-1]%4==0,i=r.dims.length>0&&r.dims[r.dims.length-1]%4==0;d.push(t),d.push(s),d.push(a),d.push(i);let o=1;for(let e=1;e<u.length;e++){let t=n.dims[n.dims.length-e]??1;if(t!==(r.dims[r.dims.length-e]??1))break;o*=t}o%4==0?(h=!0,c=!0):(t||s||a||i)&&(c=!0)}else c=!0;return d.push(c),{name:e,shaderCache:{hint:t+d.map((e=>e.toString())).join("_"),inputDependencies:["rank","rank"]},getShaderSource:e=>Xs(e,n.dims,r.dims,u,c,o,h,s,n.dataType,r.dataType,i,a),getRunData:()=>({outputs:[{dims:u,dataType:i}],dispatchGroup:{x:Math.ceil(l/64/4)},programUniforms:[{type:12,data:Math.ceil(mn.size(u)/4)},...In(n.dims,r.dims,u)]})}},Zs=(e,t,n,r,s,a)=>{e.compute(Ys(t,s??"",e.inputs[0],e.inputs[1],n,r,a))},Js=e=>{Zs(e,"Add",((e,t)=>`${e}+${t}`))},Qs=e=>{Zs(e,"Div",((e,t)=>`${e}/${t}`))},ea=e=>{Zs(e,"Equal",{scalar:(e,t)=>`u32(${e}==${t})`,vector:(e,t)=>`vec4<u32>(${e}==${t})`},void 0,void 0,9)},ta=e=>{Zs(e,"Mul",((e,t)=>`${e}*${t}`))},na=e=>{let t=Rn("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Zs(e,"Pow",{scalar:(e,t)=>`pow_custom(${e},${t})`,vector:(e,t)=>`pow_vector_custom(${e},${t})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${"i32"===t?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},ra=e=>{Zs(e,"Sub",((e,t)=>`${e}-${t}`))},sa=e=>{Zs(e,"Greater",{scalar:(e,t)=>`u32(${e}>${t})`,vector:(e,t)=>`vec4<u32>(${e}>${t})`},void 0,void 0,9)},aa=e=>{Zs(e,"Less",{scalar:(e,t)=>`u32(${e}<${t})`,vector:(e,t)=>`vec4<u32>(${e}<${t})`},void 0,void 0,9)},ia=e=>{Zs(e,"GreaterOrEqual",{scalar:(e,t)=>`u32(${e}>=${t})`,vector:(e,t)=>`vec4<u32>(${e}>=${t})`},void 0,void 0,9)},oa=e=>{Zs(e,"LessOrEqual",{scalar:(e,t)=>`u32(${e}<=${t})`,vector:(e,t)=>`vec4<u32>(${e}<=${t})`},void 0,void 0,9)}})),Cl=Oe((()=>{ul(),ml(),fl(),gl(),ua=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");let n=e[0],r=n.dataType,s=n.dims.length;e.forEach(((e,a)=>{if(0!==a){if(e.dataType!==r)throw new Error("input tensors should be one type");if(e.dims.length!==s)throw new Error("input tensors should have the same shape");e.dims.forEach(((e,r)=>{if(r!==t&&e!==n.dims[r])throw new Error("non concat dimensions must match")}))}}))},la=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,ca=(e,t)=>{let n=e.length,r=[];for(let s=0;s<n;++s){let a=t.setByOffset("global_idx",e[s].getByIndices("indices"));1===n?r.push(a):0===s?r.push(`if (inputIndex == ${s}u) { ${a} }`):s===n-1?r.push(`else { ${a} }`):r.push(`else if (inputIndex == ${s}) { ${a} }`)}return r.join("\n")},ha=(e,t,n,r)=>{let s=mn.size(n),a=new Array(e.length),i=new Array(e.length),o=0,u=[],l=[],c=[{type:12,data:s}];for(let n=0;n<e.length;++n)o+=e[n].dims[t],a[n]=o,l.push(e[n].dims.length),i[n]=Rn(`input${n}`,r,l[n]),u.push("rank"),c.push({type:12,data:a[n]});for(let t=0;t<e.length;++t)c.push(...In(e[t].dims));c.push(...In(n));let h=An("output",r,n.length),d=h.indicesGet("indices",t),p=Array.from(Array(a.length).keys()).map((e=>`uniforms.sizeInConcatAxis${e}`)).join(",");return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:c}),getShaderSource:t=>`\n\n  ${(()=>{t.registerUniform("outputSize","u32");for(let n=0;n<e.length;n++)t.registerUniform(`sizeInConcatAxis${n}`,"u32");return t.declareVariables(...i,h)})()}\n\n  ${la(a.length,p)}\n\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${h.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${d});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${a.length}u>(${p});\n      ${d} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${ca(i,h)}\n  }`}},da=(e,t)=>{let n=e.inputs,r=n[0].dims,s=mn.normalizeAxis(t.axis,r.length);ua(n,s);let a=r.slice();a[s]=n.reduce(((e,t)=>e+(t.dims.length>s?t.dims[s]:0)),0);let i=n.filter((e=>mn.size(e.dims)>0));e.compute(ha(i,s,a,n[0].dataType),{inputs:i})},pa=e=>dn({axis:e.axis})})),Tl=Oe((()=>{ul(),ml(),fa=(e,t,n="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${n}(uniforms.clip_min)), ${t}(${n}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${n}(uniforms.alpha) * value + ${n}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${n}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"Tanh":return"let e2x = exp(-2.0 * abs(value));\n              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);\n        ";case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},ma=(e,t)=>{"Clip"===e.activation?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):"HardSigmoid"===e.activation?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):"LeakyRelu"===e.activation&&t.push({type:1,data:e.alpha})},ga=(e,t)=>{"Clip"===e.activation?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):"HardSigmoid"===e.activation?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):"LeakyRelu"===e.activation&&t.push({name:"alpha",type:"f32"})},ba=e=>{let t=e?.activation||"";if("HardSigmoid"===t){let[n,r]=e?.activation_params||[.2,.5];return{activation:t,alpha:n,beta:r}}if("Clip"===t){let[n,r]=e?.activation_params||[yn,xn];return{activation:t,clipMax:r,clipMin:n}}if("LeakyRelu"===t){let[n]=e?.activation_params||[.01];return{activation:t,alpha:n}}return{activation:t}}})),El=Oe((()=>{ya=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},xa=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `})),Nl=Oe((()=>{wa=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`})),Rl=Oe((()=>{ul(),ml(),gl(),Tl(),El(),va=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,$a=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${3===t?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${3===t?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${3===t?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,ka=(e,t,n="f32",r,s=!1,a=32,i=!1,o=32)=>{let u=t[1]*e[1],l=t[0]*e[0],c=s?u:a,h=s?a:u,d=c/t[0],p=a/t[1];if((!s||4!==d||4!==e[1])&&(s||3!==d&&4!==d)||c%t[0]!=0||a%t[1]!=0||4!==e[0])throw new Error(`If transposeA ${s} is true, innerElementSize ${d} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${d} must be 3 or 4.\n  tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}. tileInner ${a} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${d}<${n}>, ${c/d}>, ${h}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${n}>, ${l/e[0]}>, ${a}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${d};\nconst tileInner = ${a};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${i?"0":"i32(globalId.z)"};\n  ${r?`let batchIndices = ${r.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${u};\n\n  let num_tiles = ${i?`${Math.ceil(o/a)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n  var kStart = ${i?`i32(globalId.z) * ${o}`:"0"};\n\n  var acc: array<vec4<${n}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${p};\n  for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${va(s,r)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${p}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${r?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${3===d?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${$a(s,d)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},Ia=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,Sa=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",_a=(e,t,n="f32",r,s=!1,a=32,i=!1,o=32,u=!1)=>{let l=e[1]*t[1],c=e[0]*t[0],h=s?l:a,d=s?a:l;if(d%t[1]!=0||h%t[0]!=0||a%t[1]!=0)throw new Error(`tileAHight ${d} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}, tileInner ${a} must be divisible by workgroupSize[1]${t[1]}`);let p=d/t[1],f=h/t[0],m=a/t[1],g=u?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${l};\n    let globalColStart = i32(workgroupId.x) * ${c};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${d}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {\n          ${Ia(s,r)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${a}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${r?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${n}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${s?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${l};\n\nlet tileRowA = i32(localId.y) * ${p};\nlet tileColA = i32(localId.x) * ${f};\nlet tileRowB = i32(localId.y) * ${m};\n// Loop over shared dimension.\nfor (var t = 0; t < num_tiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${p}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${f}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${Ia(s,r)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${r?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${n}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${Sa(s)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${n}, ${h}>, ${d}>;\n  var<workgroup> mm_Bsub : array<array<${n}, ${c}>, ${a}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${a};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${i?"0":"i32(globalId.z)"};\n    ${r?`let batchIndices = ${r.offsetToIndices("u32(batch)")};`:""}\n    let num_tiles = ${i?`${Math.ceil(o/a)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n    var kStart = ${i?`i32(globalId.z) * ${o}`:"0"};\n\n    var acc : array<array<${n}, colPerThread>, rowPerThread>;\n    ${g}\n  }\n`},Ca=(e,t,n,r,s,a=!1)=>{let[i,o,u]=s,[l,c,h,d]=r,p=zn(i,u),f=zn(o,u),m=$n(r[0].type.tensor);return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${l.type.indices}) -> ${ya(e,m)} {\n      var value = ${ya(e,m)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\n      {\n        ${(()=>{let e=c.rank,t=l.rank,n=`var aIndices: ${c.type.indices};`;for(let r=e-2-1,s=t-1;r>=0;r--,s--)n+=`\naIndices[${r}] = ${t>1?`batchIndices[${s}]`:"batchIndices"};`;return p.forEach((e=>{n+=`\naIndices[${e}] = 0;`})),n+=`\naIndices[${e-2}] = u32(row);\n                   aIndices[${e-1}] = u32(colIn);`,n})()}\n        value = ${c.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${l.type.indices}) -> ${ya(e,m)} {\n      var value = ${ya(e,m)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\n      {\n        ${(()=>{let e=h.rank,t=l.rank,n=`var bIndices: ${h.type.indices};`;for(let r=e-2-1,s=t-1;r>=0;r--,s--)n+=`\nbIndices[${r}] = ${t>1?`batchIndices[${s}]`:"batchIndices"};`;return f.forEach((e=>{n+=`\nbIndices[${e}] = 0;`})),n+=`\nbIndices[${e-2}] = u32(row);\n                   bIndices[${e-1}] = u32(colIn);`,n})()}\n        value = ${h.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${ya(e,m)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${a?"bias[colIn]":`${ya(e,m)}(bias[row])`};`:""}\n        ${n}\n        ${d.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},Ta=(e,t,n,r,s=!1)=>{let a=e[0].dims,i=e[1].dims,o=a.slice(0,-2),u=i.slice(0,-2),l=r?r.slice(0,-2):n.slice(0,-2),c=mn.size(l),h=a[a.length-2],d=a[a.length-1],p=i[i.length-1],f=d%4==0&&p%4==0,m=h<=8?[4,1,1]:[4,4,1],g=[8,8,1],b=[Math.ceil(p/g[0]/m[0]),Math.ceil(h/g[1]/m[1]),Math.ceil(c/g[2]/m[2])],y=f?4:1,x=[...o,h,d/y],w=x.length,v=[...u,d,p/y],$=v.length,k=[c,h,p/y],I=[{type:6,data:h},{type:6,data:p},{type:6,data:d}];ma(t,I),I.push(...In(l,x,v));let S=["rank","rank"],_=e.length>2;return _&&(I.push(...In(e[2].dims)),S.push("rank")),I.push(...In(k)),{name:"MatMul",shaderCache:{hint:`${m};${t.activation};${f};${s}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:b[0],y:b[1],z:b[2]},programUniforms:I}),getShaderSource:n=>{let r=l.length,a=Dn("batchDims",e[0].dataType,r,1),i=$n(e[0].dataType),c=Rn("a",e[0].dataType,w,y),h=Rn("b",e[1].dataType,$,y),d=An("result",e[0].dataType,k.length,y),p=[c,h];if(_){let t=s?y:1;p.push(Rn("bias",e[2].dataType,e[2].dims.length,t))}let b=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];ga(t,b);let x=$n(d.type.tensor),v=fa(t,d.type.value,x),I=Ca(y,_,v,[a,c,h,d],[o,u,l],s);return`\n  ${n.registerUniforms(b).registerInternalVariables(a).declareVariables(...p,d)}\n  ${I}\n  ${f?ka(m,g,i,a):_a(m,g,i,a)}\n                   `}}}})),Al=Oe((()=>{ul(),cl(),gl(),Tl(),El(),Nl(),Rl(),Ea=(e,t,n,r,s=!1,a,i=4,o=4,u=4,l="f32")=>{let c=e?"\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ":"\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    ",h=e?"\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ":"\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    ",d=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",p=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",f=e?"row":"col",m=e?"col":"row",g=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${f} / outWidth;\n    let outCol = ${f} % outWidth;\n\n    let WRow = ${m} / (i32(uniforms.w_shape[1]) * inChannels);\n    let WCol = ${m} / inChannels % i32(uniforms.w_shape[1]);\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n    let xCh = ${m} % inChannels;\n    var resData = ${ya(i,l)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${d} && xCol >= 0 && xCol < ${p}) {\n      ${c}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${(e=>{switch(e){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${l}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(i)}\n    }\n    return resData;`,b=e?t&&r?`\n    let col = colIn * ${i};\n    ${g}`:`\n    let col = colIn * ${i};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n      ${g}\n    }\n    return ${ya(i,l)}(0.0);`:r&&n?`\n    let col = colIn * ${i};\n    ${g}`:`\n    let col = colIn * ${i};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${g}\n    }\n    return ${ya(i,l)}(0.0);`,y=`${(e=>{switch(e){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(o)}`,x=ya(u,l),w=ya(e?i:o,l),v=ya(e?o:i,l),$=fa(a,x,l);return`\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${w} {\n      ${e?b:y}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${v} {\n      ${e?y:b}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${x}) {\n      let col = colIn * ${u};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${h}\n      ${xa(s)}\n      ${$}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},Na=(e,t,n,r,s,a,i,o)=>{let u="NHWC"===t.format,l=u?e[0].dims[3]:e[0].dims[1],c=n[0],h=u?n[2]:n[3],d=u?n[1]:n[2],p=u?n[3]:n[1],f=u&&(l%4==0||l%3==0)&&p%4==0,m=u?p:h*d,g=u?h*d:p,b=[8,8,1],y=r<=8?[4,1,1]:[4,4,1],x=[Math.ceil(m/b[0]/y[0]),Math.ceil(g/b[1]/y[1]),Math.ceil(c/b[2]/y[2])];Qt("verbose",(()=>`[conv2d_mm_webgpu] dispatch = ${x}`));let w=f?u&&l%4!=0?3:4:1,v=b[1]*y[1],$=b[0]*y[0],k=Math.max(b[0]*w,b[1]),I=r%v==0,S=s%$==0,_=a%k==0,C=f?[w,4,4]:[1,1,1],T=[{type:6,data:r},{type:6,data:s},{type:6,data:a},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];ma(t,T),T.push(...In(e[0].dims,e[1].dims));let E=["rank","rank"];return i&&(T.push(...In(e[2].dims)),E.push("rank")),T.push(...In(n)),{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${w};${f};${I};${S};${_};${v};${$};${k}`,inputDependencies:E},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:x[0],y:x[1],z:x[2]},programUniforms:T}),getShaderSource:r=>{let s=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];ga(t,s);let a=f?4:1,l=$n(e[0].dataType),c=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${f?`vec4<${l}>`:l}) {\n        result[flatIndex] = ${f?`vec4<${l}>`:l}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${f?`vec4<${l}>`:l}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${f?"/ 4":""}, value);\n      }`,h=[Rn("x",e[0].dataType,e[0].dims.length,3===w?1:w),Rn("w",e[1].dataType,e[1].dims.length,a)],d=An("result",e[0].dataType,n.length,a);if(i){let t=Rn("bias",e[2].dataType,e[2].dims.length,a);h.push(t),c+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${f?`vec4<${l}>`:l} {\n          return bias[coords.${u?"w":"y"}${f?"/ 4":""}];\n        }`}return`\n        ${wa("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${r.registerUniforms(s).declareVariables(...h,d)}\n        ${c}\n        ${Ea(u,I,S,_,i,t,C[0],C[1],C[2],l)}\n        ${f?ka(y,b,l,void 0,!u,k):_a(y,b,l,void 0,!u,k,!1,void 0,o)}`}}}})),Dl=Oe((()=>{ul(),cl(),ml(),gl(),Tl(),El(),Ra=e=>{let t=1;for(let n=0;n<e.length;n++)t*=e[n];return t},Aa=e=>"number"==typeof e?[e,e,e]:e,Da=(e,t)=>t<=1?e:e+(e-1)*(t-1),Oa=(e,t,n,r=1)=>{let s=Da(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)},Fa=(e,t,n,r,s)=>{null==s&&(s=Oa(e,t[0],r[0]));let a=[0,0,0,n];for(let n=0;n<3;n++)e[n]+2*s>=t[n]&&(a[n]=Math.trunc((e[n]-t[n]+2*s)/r[n]+1));return a},za=(e,t,n,r,s,a,i,o,u,l)=>{let c,h,d,p;if("VALID"===e&&(e=0),"number"==typeof e){c={top:e,bottom:e,left:e,right:e,front:e,back:e};let f=Fa([t,n,r,1],[o,u,l],1,[s,a,i],e);h=f[0],d=f[1],p=f[2]}else if(Array.isArray(e)){if(!e.every(((e,t,n)=>e===n[0])))throw Error(`Unsupported padding parameter: ${e}`);c={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let f=Fa([t,n,r,1],[o,u,l],1,[s,a,i],e[0]);h=f[0],d=f[1],p=f[2]}else{if("SAME_UPPER"!==e)throw Error(`Unknown padding parameter: ${e}`);{h=Math.ceil(t/s),d=Math.ceil(n/a),p=Math.ceil(r/i);let e=(h-1)*s+o-t,f=(d-1)*a+u-n,m=(p-1)*i+l-r,g=Math.floor(e/2),b=e-g,y=Math.floor(f/2),x=f-y,w=Math.floor(m/2);c={top:y,bottom:x,left:w,right:m-w,front:g,back:b}}}return{padInfo:c,outDepth:h,outHeight:d,outWidth:p}},Ma=(e,t,n,r,s,a=!1,i="channelsLast")=>{let o,u,l,c,h;if("channelsLast"===i)[o,u,l,c,h]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[o,h,u,l,c]=e}let[d,,p,f,m]=t,[g,b,y]=Aa(n),[x,w,v]=Aa(r),$=Da(p,x),k=Da(f,w),I=Da(m,v),{padInfo:S,outDepth:_,outHeight:C,outWidth:T}=za(s,u,l,c,g,b,y,$,k,I),E=a?d*h:d,N=[0,0,0,0,0];return"channelsFirst"===i?N=[o,E,_,C,T]:"channelsLast"===i&&(N=[o,_,C,T,E]),{batchSize:o,dataFormat:i,inDepth:u,inHeight:l,inWidth:c,inChannels:h,outDepth:_,outHeight:C,outWidth:T,outChannels:E,padInfo:S,strideDepth:g,strideHeight:b,strideWidth:y,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:$,effectiveFilterHeight:k,effectiveFilterWidth:I,dilationDepth:x,dilationHeight:w,dilationWidth:v,inShape:e,outShape:N,filterShape:t}},La=(e,t,n,r,s,a)=>{let i="channelsLast"===a,o=(i?e[0].dims[3]:e[0].dims[1],{x:n.map(((e,t)=>t))}),u=[Math.ceil(Ra(o.x.map((e=>n[e])))/64),1,1];Qt("verbose",(()=>`[conv3d_naive_webgpu] dispatch = ${u}`));let l=[{type:12,data:mn.size(n)},{type:12,data:r},{type:12,data:s},{type:12,data:t.strides},{type:12,data:t.dilations}];ma(t,l),l.push(...In(e[0].dims,e[1].dims));let c=["rank","rank"],h=3===e.length;return h&&(l.push(...In(e[2].dims)),c.push("rank")),l.push(...In(n)),{name:"Conv3DNaive",shaderCache:{hint:`${t.cacheKey};${i};1;${h}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:u[0],y:u[1],z:u[2]},programUniforms:l}),getShaderSource:a=>{let o=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:r.length},{name:"pads",type:"u32",length:s.length},{name:"strides",type:"u32",length:t.strides.length},{name:"dilations",type:"u32",length:t.dilations.length}];ga(t,o);let u=$n(e[0].dataType),l=Rn("x",e[0].dataType,e[0].dims.length,1),c=Rn("W",e[1].dataType,e[1].dims.length,1),d=[l,c],p=An("result",e[0].dataType,n.length,1),f="";if(h){let t=Rn("bias",e[2].dataType,e[2].dims.length,1);d.push(t),f+=`\n        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${u} {\n          return bias[${En("coords",i?4:1,5)}];\n        }`}let m=ya(1,u),g=fa(t,m,u);return`\n            ${f}\n            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\n              return ${l.getByIndices("aIndices")};\n            }\n            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\n              return ${c.getByIndices("aIndices")};\n            }\n          ${a.registerUniforms(o).declareVariables(...d,p)}\n          ${a.mainStart()}\n          ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n              let coords = ${p.offsetToIndices("global_idx")};\n              let batch = ${En("coords",0,l.rank)};\n              let d2 = ${En("coords",i?l.rank-1:1,l.rank)};\n              let xFRCCorner = vec3<u32>(${En("coords",i?1:2,l.rank)},\n              ${En("coords",i?2:3,l.rank)},\n              ${En("coords",i?3:4,l.rank)}) * uniforms.strides - uniforms.pads;\n              let xFCorner = xFRCCorner.x;\n              let xRCorner = xFRCCorner.y;\n              let xCCorner = xFRCCorner.z;\n              let xShapeY = ${En("uniforms.x_shape",i?1:2,l.rank)};\n              let xShapeZ = ${En("uniforms.x_shape",i?2:3,l.rank)};\n              let xShapeW = ${En("uniforms.x_shape",i?3:4,l.rank)};\n              let xShapeU = ${En("uniforms.x_shape",i?4:1,l.rank)};\n              let inputDepthNearestVec4 = (xShapeU / 4) * 4;\n              let inputDepthVec4Remainder = xShapeU % 4;\n\n              var value = 0.0;\n              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {\n                let xF = xFCorner + wF * uniforms.dilations[0];\n                if (xF < 0 || xF >= xShapeY) {\n                  continue;\n                }\n\n                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {\n                  let xR = xRCorner + wR * uniforms.dilations[1];\n                  if (xR < 0 || xR >= xShapeZ) {\n                    continue;\n                  }\n\n                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {\n                    let xC = xCCorner + wC * uniforms.dilations[2];\n                    if (xC < 0 || xC >= xShapeW) {\n                      continue;\n                    }\n\n                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {\n                      ${i?"let xValues = vec4<f32>(\n                               getX(batch, xF, xR, xC, d1),\n                               getX(batch, xF, xR, xC, d1 + 1),\n                               getX(batch, xF, xR, xC, d1 + 2),\n                               getX(batch, xF, xR, xC, d1 + 3));\n                            ":"let xValues = vec4<f32>(\n                               getX(batch, d1, xF, xR, xC),\n                               getX(batch, d1 + 1, xF, xR, xC),\n                               getX(batch, d1 + 2, xF, xR, xC),\n                               getX(batch, d1 + 3, xF, xR, xC));\n                            "}\n                            let wValues = vec4<f32>(\n                              getW(d2, d1, wF, wR, wC),\n                              getW(d2, d1 + 1, wF, wR, wC),\n                              getW(d2, d1 + 2, wF, wR, wC),\n                              getW(d2, d1 + 3, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    }\n                    if (inputDepthVec4Remainder == 1) {\n                        ${i?"value += getX(batch, xF, xR, xC, inputDepthNearestVec4)\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);":"value += getX(batch, inputDepthNearestVec4, xF, xR, xC)\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);"}\n                    } else if (inputDepthVec4Remainder == 2) {\n                      ${i?"let xValues = vec2<f32>(\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));\n                      ":"let xValues = vec2<f32>(\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));\n                    "}\n                    let wValues = vec2<f32>(\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    } else if (inputDepthVec4Remainder == 3) {\n                      ${i?"let xValues = vec3<f32>(\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));\n                      ":"let xValues = vec3<f32>(\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));\n                    "}\n                    let wValues = vec3<f32>(\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    }\n                  }\n                }\n              }\n              ${h?"value = value + getBiasByOutputCoords(coords)":""};\n              ${g}\n              result[global_idx] = f32(value);\n          }`}}}})),Ol=Oe((()=>{ul(),ml(),gl(),zl(),Tl(),Ba=(e,t,n)=>{let r=e.length>2,s=r?"value += b[output_channel];":"",a=e[0].dims,i=e[1].dims,o=i[0]/t.group,u="NHWC"===t.format,l=Ga(a,i,t.dilations,t.pads,t.strides,u),c=mn.size(l),h=[{type:12,data:c},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:o}];ma(t,h),h.push(...In(a,i));let d=["rank","rank"];return r&&(h.push(...In(e[2].dims)),d.push("rank")),h.push(...In(l)),{name:"GroupedConv",shaderCache:{hint:t.cacheKey,inputDependencies:d},getRunData:()=>({outputs:[{dims:n?n(l):l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:h}),getShaderSource:n=>{let o=An("output",e[0].dataType,l.length),c=$n(o.type.tensor),h=fa(t,o.type.value,c),d=Rn("x",e[0].dataType,a.length),p=Rn("w",e[1].dataType,i.length),f=[d,p];r&&f.push(Rn("b",e[2].dataType,e[2].dims.length));let m=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];return ga(t,m),`\n  ${n.registerUniforms(m).declareVariables(...f,o)}\n\n  ${n.mainStart()}\n    ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let outputIndices = ${o.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${u?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${u?1:2}], outputIndices[${u?2:3}]) * uniforms.strides - uniforms.pads;\n    let group_id: u32 = output_channel / uniforms.output_channels_per_group;\n\n    var value: ${o.type.value} = ${o.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\n      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[${u?1:2}]) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[${u?2:3}]) {\n            continue;\n          }\n\n          let xVal = ${u?d.get("batch","xHeight","xWidth","input_channel"):d.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${p.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${s}\n    ${h}\n    ${o.setByOffset("global_idx","value")}\n  }`}}},Pa=(e,t,n)=>{let r=e.length>2,s=Sn(n[3]),a=Sn(n[2]),i=mn.size(n)/s/a,o=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/s],u=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/s],l=[n[0],n[1],n[2],n[3]/s],c=[{type:12,data:i},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];ma(t,c),c.push(...In(o,u,l));let h=(a-1)*t.strides[1]+u[1];return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${s};${a};${h};${u[0]};${u[1]}`,inputDependencies:r?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:c}),getShaderSource:n=>{let i=An("output",e[0].dataType,l.length,s),c=$n(i.type.tensor),d=fa(t,i.type.value,c),p=Rn("x",e[0].dataType,o.length,s),f=Rn("w",e[1].dataType,u.length,s),m=[p,f];r&&m.push(Rn("b",e[2].dataType,e[2].dims,s));let g=r?"value += b[output_channel];":"",b=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return ga(t,b),`\n  ${n.registerUniforms(b).declareVariables(...m,i)}\n  ${n.mainStart()}\n    ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let width0 = uniforms.output_shape[3];\n    let output_channel = global_idx % width0;\n    var index1 = global_idx / width0;\n    let width1 = uniforms.output_shape[2] / ${a}u;\n    let col = (index1 % width1) * ${a}u;\n    index1 = index1 / width1;\n    let row = index1 % uniforms.output_shape[1];\n    let batch = index1 / uniforms.output_shape[1];\n\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\n\n    var x_vals: array<${p.type.value}, ${h}>;\n    var values: array<${i.type.value}, ${a}>;\n    let input_channel = output_channel;\n    // Use constant instead of uniform can give better performance for w's height/width.\n    for (var w_height: u32 = 0u; w_height < ${u[0]}; w_height++) {\n      let x_height = x_corner.x + i32(w_height);\n      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {\n        for (var i = 0; i < ${h}; i++) {\n          let x_width = x_corner.y + i;\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\n            x_vals[i] = ${p.get("batch","u32(x_height)","u32(x_width)","input_channel")};\n          } else {\n            x_vals[i] = ${p.type.value}(0);\n          }\n        }\n        for (var w_width: u32 = 0u; w_width < ${u[1]}; w_width++) {\n          let w_val = ${f.get("w_height","w_width","0","output_channel")};\n          for (var i = 0u; i < ${a}u; i++) {\n            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0u; i < ${a}u; i++) {\n      var value = values[i];\n      ${g}\n      ${d}\n      ${i.set("batch","row","col + i","output_channel","value")};\n    }\n  }`}}}})),Fl=Oe((()=>{ul(),ml(),Rl(),gl(),Tl(),Wa=(e,t,n,r,s=!1)=>{let a=e[0].dims,i=e[1].dims,o=a[a.length-2],u=i[i.length-1],l=a[a.length-1],c=Sn(u),h=Sn(l),d=Sn(o),p=mn.size(n)/c/d,f=e.length>2,m=r?r.slice(0,-2):n.slice(0,-2),g=[mn.size(m),o,u],b=[{type:12,data:p},{type:12,data:o},{type:12,data:u},{type:12,data:l}];return ma(t,b),b.push(...In(m,a,i)),f&&b.push(...In(e[2].dims)),b.push(...In(g)),{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${c};${h};${d};${s}`,inputDependencies:f?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:b}),getShaderSource:r=>{let o=Dn("batch_dims",e[0].dataType,m.length),u=Rn("a",e[0].dataType,a.length,h),l=Rn("b",e[1].dataType,i.length,c),p=An("output",e[0].dataType,g.length,c),b=$n(p.type.tensor),y=fa(t,p.type.value,b),x=[u,l],w="";if(f){let t=s?c:1;x.push(Rn("bias",e[2].dataType,e[2].dims.length,t)),w=s?`value += bias[col / ${t}];`:`value += ${p.type.value}(bias[row + i]);`}let v=a.slice(0,-2),$=i.slice(0,-2),k=zn(v,m),I=zn($,m),S=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];ga(t,S);let _=(e,t)=>{let n=e.rank,r=e.name;if(2===n)return`var ${r}_indices = ${e.type.indices}(0u, 0u);`;let s=o.rank,a=`var ${r}_indices: ${e.type.indices};`;for(let e=n-2-1,t=s-1;e>=0;e--,t--)a+=`\n${r}_indices[${e}] = ${s>1?`batch_indices[${t}]`:"batch_indices"};`;return t.forEach((e=>{a+=`\n${r}_indices[${e}] = 0;`})),a+=`${r}_indices[${n-2}] = 0u;\n                     ${r}_indices[${n-1}] = 0u;`,a};return`\n  ${r.registerUniforms(S).registerInternalVariables(o).declareVariables(...x,p)}\n  ${r.mainStart()}\n    ${r.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let col = (global_idx % (uniforms.N / ${c})) * ${c};\n    var index1 = global_idx / (uniforms.N / ${c});\n    let stride1 = uniforms.M / ${d};\n    let row = (index1 % stride1) * ${d};\n    let batch = index1 / stride1;\n\n    ${2===n.length?"":`let batch_indices = ${o.offsetToIndices("batch")};`}\n    ${_(u,k)}\n    let a_offset = ${u.indicesToOffset("a_indices")};\n    ${_(l,I)}\n    let b_offset = ${l.indicesToOffset("b_indices")};\n    var values: array<${p.type.value}, ${d}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${h}) {\n      ${(()=>{let e=`var a_data: ${u.type.value};`;for(let t=0;t<h;t++)e+=`\n              let b_data${t} = b[(b_offset + (k + ${t}) * uniforms.N + col) / ${c}];`;for(let t=0;t<d;t++){e+=`a_data = a[(a_offset + (row + ${t}) * uniforms.K + k) / ${h}];`;for(let n=0;n<h;n++)e+=`\n            values[${t}] = fma(${l.type.value}(a_data${1===h?"":`[${n}]`}), b_data${n}, values[${t}]);\n`}return e})()}\n    }\n    for (var i = 0u; i < ${d}u; i++) {\n      var value = values[i];\n      ${w}\n      ${y}\n      let cur_indices = ${p.type.indices}(batch, row + i, col);\n      let offset = ${p.indicesToOffset("cur_indices")};\n      ${p.setByOffset(`offset / ${c}`,"value")};\n    }\n  }\n  `}}},Ua=e=>{if(!e||2!==e.length)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Va=e=>{Ua(e.inputs);let t=fn.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let n=t[t.length-1],r=e.inputs[0].dims[e.inputs[0].dims.length-1];n<8&&r<8?e.compute(Wa(e.inputs,{activation:""},t)):e.compute(Ta(e.inputs,{activation:""},t))}})),zl=Oe((()=>{ml(),Al(),Dl(),Rl(),Ol(),Tl(),Fl(),bl(),Ga=(e,t,n,r,s,a)=>{let i=e[0],o=e.slice(a?1:2,a?3:4),u=o.length,l=t[0],c=t.slice(2).map(((e,t)=>e+(e-1)*(n[t]-1))),h=o.map(((e,t)=>e+r[t]+r[t+u])).map(((e,t)=>Math.floor((e-c[t]+s[t])/s[t])));return h.splice(0,0,i),h.splice(a?3:1,0,l),h},Ha=[2,3,1,0],ja=(e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");if(e[0].dims["NHWC"===t.format?e[0].dims.length-1:1]!==e[1].dims[1]*t.group)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==2*n)throw new Error(`pads should be ${2*n}D`);if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},qa=(e,t)=>{let n=e.kernelShape.slice();for(let e=2;e<t[1].dims.length;++e)0===n[e-2]&&(n[e-2]=t[1].dims[e]);let r=e.pads.slice();gn.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,n,r,"NHWC"===e.format,e.autoPad);let s=Object.assign({},e);return Object.assign(s,{kernelShape:n,pads:r}),s},Ka=e=>{let t=ba(e),n=e.format;return{autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],format:n,dilations:e.dilations,group:e.group,kernelShape:e.kernel_shape,pads:e.pads,strides:e.strides,wIsConst:e.w_is_const(),...t,cacheKey:`${e.format};${t.activation};`}},Xa=(e,t,n)=>{let r=qa(n,t),s="NHWC"===n.format;if(1!==n.group){if(!e.adapterInfo.isArchitecture("ampere")&&s&&t[1].dims[0]===n.group&&1===t[1].dims[1]&&1===n.dilations[0]&&1===n.dilations[1]){let a=Ga(t[0].dims,t[1].dims,n.dilations,r.pads,n.strides,s),i=e.kernelCustomData.wT??e.compute(Wn(t[1],Ha),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=i);let o=[t[0],i];3===t.length&&o.push(t[2]),e.compute(Pa(o,r,a),{inputs:o})}else e.compute(Ba(t,r));return}let a=3===t.length,i=t[0].dims[s?1:2],o=t[0].dims[s?2:3],u=t[0].dims[s?3:1],l=t[1].dims[2],c=t[1].dims[3],h=Ga(t[0].dims,t[1].dims,n.dilations,r.pads,n.strides,s),d=h[s?1:2],p=h[s?2:3],f=h[s?3:1],m=s&&l===i&&c===o&&0===n.pads[0]&&0===n.pads[1];if(m||1===l&&1===c&&1===n.dilations[0]&&1===n.dilations[1]&&1===n.strides[0]&&1===n.strides[1]&&0===n.pads[0]&&0===n.pads[1]){let l,c,g,b=h[0],y=[];if(s){let r=e.kernelCustomData.wT??e.compute(Wn(t[1],Ha),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];if(n.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=r),m){let e=i*o*u;l=t[0].reshape([1,b,e]),c=r.reshape([1,e,f]),g=[1,b,f]}else l=t[0].reshape([b,i*o,u]),c=r.reshape([1,u,f]),g=[b,d*p,f];y.push(l),y.push(c)}else l=t[0].reshape([b,u,i*o]),c=t[1].reshape([1,f,u]),g=[b,f,d*p],y.push(c),y.push(l);a&&y.push(t[2]);let x=g[2],w=y[0].dims[y[0].dims.length-1];return void(x<8&&w<8?e.compute(Wa(y,r,h,g,s),{inputs:y}):e.compute(Ta(y,r,h,g,s),{inputs:y}))}let g=e.kernelCustomData.wT??e.compute(Wn(t[1],Ha),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=g);let b=[t[0],g];a&&b.push(t[2]);let y=s?d*p:f,x=s?f:d*p,w=l*c*u;e.compute(Na(b,r,h,y,x,w,a,!0),{inputs:b})},Ya=(e,t)=>{let n="NHWC"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&r.push(e.inputs[2]);let s=[0,t.pads[0],0,t.pads[1]],a=[1].concat(t.strides),i=[1].concat(t.dilations),o=[1].concat(t.kernelShape),u=qa({...t,pads:s,strides:a,dilations:i,kernelShape:o},r);e.compute(Ba(r,u,(e=>n?[e[0],e[2],e[3]]:[])))},Za=(e,t,n)=>{let r="NHWC"===n.format?"channelsLast":"channelsFirst",s=qa(n,t),a="NOTSET"===n.autoPad?n.pads:n.autoPad,i=Ma(t[0].dims,t[1].dims,n.strides,n.dilations,a,!1,r);e.compute(La(t,s,i.outShape,[i.filterDepth,i.filterHeight,i.filterWidth],[i.padInfo.front,i.padInfo.top,i.padInfo.left],r))},Ja=(e,t)=>{ja(e.inputs,t),3===e.inputs[0].dims.length?Ya(e,t):5===e.inputs[0].dims.length?Za(e,e.inputs,t):Xa(e,e.inputs,t)}})),Ml=Oe((()=>{ul(),cl(),gl(),Tl(),El(),Nl(),Rl(),Qa=(e,t=!1,n,r,s=4)=>{let a=e?"\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ":"\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    ",i=e?"row":"col",o=e?"col":"row",u=`\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${i} / outWidth;\n      let outCol = ${i} % outWidth;\n\n      let WRow = ${o} / (uniforms.filter_dims[1] * inChannels);\n      let WCol = ${o} / inChannels % uniforms.filter_dims[1];\n      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(${e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])"}) || fract(xR) > 0.0) {\n        return ${r}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])"}) || fract(xC) > 0.0) {\n        return ${r}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${o} % inChannels;\n      ${e?"\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      ":"\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      "}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${s}];`,l=e?`\n      let col = colIn * ${s};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n        ${u}\n      }\n      return ${r}(0.0);`:`\n      let col = colIn * ${s};\n      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n        ${u}\n      }\n      return ${r}(0.0);`,c=`\n      let col = colIn * ${s};\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);\n      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];\n      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${(e=>{switch(e){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return ${r}(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${e} is not supported.`)}})(s)}\n      }\n      return ${r}(0.0);\n      `,h=fa(n,r);return`\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${r} {\n    ${e?l:c}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${r} {\n    ${e?c:l}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${r}) {\n    let col = colIn * ${s};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${a}\n      ${xa(t)}\n      ${h}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${s}] = value;\n    }\n  }`},ei=(e,t,n,r,s,a,i,o)=>{let u="NHWC"===t.format,l=u?e[0].dims[3]:e[0].dims[1],c=n[0],h=u?n[2]:n[3],d=u?n[1]:n[2],p=u?n[3]:n[1],f=u&&l%4==0&&l%3&&p%4==0,m=u?p:h*d,g=u?h*d:p,b=[8,8,1],y=r<=8?[4,1,1]:[4,4,1],x=[Math.ceil(m/b[0]/y[0]),Math.ceil(g/b[1]/y[1]),Math.ceil(c/b[2]/y[2])];Qt("verbose",(()=>`[conv_backprop_mm_webgpu] dispatch = ${x}`));let w=f?4:1,v=Math.max(b[0]*w,b[1]),$=f?4:1,k=[t.kernelShape[u?1:2],t.kernelShape[u?2:3]],I=[k[0]+(t.dilations[0]<=1?0:(k[0]-1)*(t.dilations[0]-1)),k[1]+(t.dilations[1]<=1?0:(k[1]-1)*(t.dilations[1]-1))],S=[I[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),I[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],_=[{type:6,data:r},{type:6,data:s},{type:6,data:a},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:k},{type:6,data:S}];ma(t,_),_.push(...In(e[0].dims,e[1].dims));let C=["rank","rank"];return i&&(_.push(...In(e[2].dims)),C.push("rank")),_.push(...In(n)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${y};${b};${f}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:x[0],y:x[1],z:x[2]},programUniforms:_}),getShaderSource:r=>{let s=Rn("x",e[0].dataType,e[0].dims.length,$),a=Rn("w",e[1].dataType,e[1].dims.length,1),l=An("result",e[0].dataType,n.length,$),c=[s,a],h="";if(i){let t=Rn("bias",e[2].dataType,e[2].dims.length,$);c.push(t),h+=`\n          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${t.type.value} {\n            return bias[coords.${u?"w":"y"}${f?"/ 4":""}];\n          }`}let d=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:k.length},{name:"pads",type:"i32",length:S.length}];ga(t,d);let p=$n(e[0].dataType,1);if("f16"!==p&&"f32"!==p)throw new Error(`elemType ${p} is not supported.`);return`\n        ${wa("uniforms.result_strides")}\n        ${r.registerUniforms(d).declareVariables(...c,l)};\n        ${h}\n        ${Qa(u,i,t,s.type.value,w)}\n        ${f?ka(y,b,p,void 0,!u,v):_a(y,b,p,void 0,!u,v,!1,void 0,o)}`}}}})),Ll=Oe((()=>{ul(),cl(),ml(),gl(),ti=(e,t,n,r,s,a=!1,i,o,u=!1)=>{let l=u?1:2,c=u?2:3,h=u?3:1,d=a?2:1,p=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${a?`vec4<${i}>`:i}) {\n    result[flatIndex] = ${a?`vec4<${i}>`:i}(value);\n  }`;r&&(p+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${a?`vec4<${i}>`:i} {\n      return bias[coords.${u?"w":"y"}${a?"/ 4":""}];\n    }`);let f=a?4:1,m=Rn("W",t[1].dataType,t[1].dims.length,f),g=Rn("Dy",t[0].dataType,t[0].dims.length,f),b=[g,m];r&&b.push(Rn("bias",t[2].dataType,[n[h]].length,f));let y=An("result",t[0].dataType,n.length,f),x=`{\n        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];\n        let r = ${s?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];\n        let c = ${s?"global_id.y":"workgroup_id.y"} * ${d};\n        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${i}>, ${d}>;\n        for (var i = 0; i < ${d}; i++) {\n          dotProd[i] = vec4<${i}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {\n          var dyR = (${i}(dyCorner.x) + ${i}(wR)) / ${i}(uniforms.strides.x);\n          let wRPerm = uniforms.filter_dims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${i}(uniforms.Dy_shape[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {\n            let dyC = (${i}(dyCorner.y) + ${i}(wC)) / ${i}(uniforms.strides.y);\n            let dyC2 = (${i}(dyCorner.y) + 1.0 + ${i}(wC)) / ${i}(uniforms.strides.y);\n            let wCPerm = uniforms.filter_dims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${i}(uniforms.Dy_shape[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${i}(uniforms.Dy_shape[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${g.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${i}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${g.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${i}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = uniforms.Dy_shape[${h}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${g.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${i}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${g.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${i}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${d}; i = i + 1) {\n          let value = dotProd[i] + ${r?"bias[c+i]":`vec4<${i}>(0.0)`};\n          ${y.set("batch","r","c + i","d1","value")};\n        }\n      }`,w=`\n          let outputIndices = ${y.offsetToIndices("global_idx")};\n          let batch = ${y.indicesGet("outputIndices",0)};\n          let d1 = ${y.indicesGet("outputIndices",h)};\n          let r = ${y.indicesGet("outputIndices",l)};\n          let c = ${y.indicesGet("outputIndices",c)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / uniforms.output_channels_per_group;\n          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${i}(0.0);\n          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\n            if (wR % uniforms.dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${i}(dyRCorner) + ${i}(wR)) / ${i}(uniforms.strides[0]);\n            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\n            if (dyR < 0.0 || dyR >= ${i}(uniforms.Dy_shape[${l}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\n              if (wC % uniforms.dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${i}(dyCCorner) + ${i}(wC)) / ${i}(uniforms.strides.y);\n              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\n              if (dyC < 0.0 || dyC >= ${i}(uniforms.Dy_shape[${c}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * uniforms.input_channels_per_group;\n              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {\n                let xValue = ${u?g.get("batch","idyR","idyC","inputChannel"):g.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${m.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${r?"bias[d1]":`${i}(0.0)`};\n          ${y.setByOffset("global_idx","value")};\n        `;return`\n  ${e.registerUniforms(o).declareVariables(...b,y)}\n  ${p}\n\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};\n  ${a?x:w}}`},ni=(e,t,n)=>{let r=e.length>2,s=t.outputShape,a=mn.size(s),i=[Math.ceil(a/64),1,1];Qt("verbose",(()=>`[conv2d_backprop_webgpu] dispatch = ${i}`));let o="NHWC"===t.format,u=["rank","rank"],l=[t.strides[0],t.strides[1]],c=[t.kernelShape[o?1:2],t.kernelShape[o?2:3]],h=[t.dilations[0],t.dilations[1]],d=[c[0]+(t.dilations[0]<=1?0:(t.kernelShape[o?1:2]-1)*(t.dilations[0]-1)),c[1]+(t.dilations[1]<=1?0:(t.kernelShape[o?2:3]-1)*(t.dilations[1]-1))],p=[d[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),d[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],f=t.group,m=e[1].dims,g=m[0]/f,b=m[1],y=[{type:12,data:a},{type:12,data:l},{type:12,data:c},{type:12,data:h},{type:12,data:d},{type:6,data:p},{type:12,data:g},{type:12,data:b},...In(e[0].dims,e[1].dims)];r&&(y.push(...In(e[2].dims)),u.push("rank")),y.push(...In(s));let x=1===i[1]&&1===i[2];return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:u},getRunData:()=>({dispatchGroup:{x:i[0],y:i[1],z:i[2]},outputs:[{dims:n?n(s):s,dataType:e[0].dataType}],programUniforms:y}),getShaderSource:t=>{let n=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:l.length},{name:"filter_dims",type:"u32",length:c.length},{name:"dilations",type:"u32",length:c.length},{name:"effective_filter_dims",type:"u32",length:d.length},{name:"pads",type:"i32",length:p.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],a=$n(e[0].dataType);return`${ti(t,e,s,r,x,!1,a,n,o)}`}}}})),Bl=Oe((()=>{Ml(),Ll(),Tl(),bl(),ri=(e,t,n,r,s,a)=>(e-1)*t+n+(r-1)*s+1-a,si=(e,t,n,r,s)=>{let a=Math.floor(e/2);"SAME_UPPER"===t?(n[r]=a,n[s]=e-a):"SAME_LOWER"===t&&(n[r]=e-a,n[s]=a)},ai=(e,t,n,r,s,a,i,o,u,l)=>{let c=e.length-2,h=0===l.length;if(0===u.length)for(let e=0;e<c;++e)u.push(0);let d=e[0],p=t[o?3:1]*s;for(let s=0,d=e.length-c-(o?1:0);s<c;++s,++d){let o=e[d],p=h?o*i[s]:l[s],f=ri(o,i[s],a[s],t[d],n[s],p);si(f,r,a,s,s+c),h&&l.push(i[s]*(o-1)+u[s]+(t[d]-1)*n[s]+1-a[s]-a[s+c])}l.splice(0,0,d),l.splice(o?3:1,0,p)},ii=(e,t)=>{let n=e.kernelShape.slice();if(0===e.kernelShape.length||0===e.kernelShape.reduce(((e,t)=>e*t),1)){n.length=0;for(let e=2;e<t[1].dims.length;++e)n.push(t[1].dims[e])}let r="NHWC"===e.format;n.splice(0,0,t[1].dims[0]),n.splice(r?3:1,0,t[1].dims[1]);let s=e.pads.slice(),a=e.outputShape.slice(),i=e.outputPadding.slice(),o=t[0].dims,u=e.dilations.slice();if(0===u.reduce(((e,t)=>e+t),0)){let e=t[0].dims.length-2;u=new Array(e).fill(1)}let l=e.strides.slice();if(0===l.reduce(((e,t)=>e+t),0)){let e=t[0].dims.length-2;l=new Array(e).fill(1)}ai(o,n,u,e.autoPad,e.group,s,l,r,i,a);let c=Object.assign({},e);return Object.assign(c,{kernelShape:n,pads:s,outputPadding:i,outputShape:a,dilations:u,strides:l}),c},oi=e=>{let t=ba(e),n=e.format,r=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],s=e.dilations,a=e.group,i=e.kernelShape,o=e.pads,u=e.strides,l=e.wIsConst();return{autoPad:r,format:n,dilations:s,group:a,kernelShape:i,outputPadding:e.outputPadding,outputShape:e.outputShape,pads:o,strides:u,wIsConst:l,...t,cacheKey:`${e.format};${t.activation};`}},ui=(e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");if(e[0].dims["NHWC"===t.format?e[0].dims.length-1:1]!==e[1].dims[0])throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(3===e.length&&(1!==e[2].dims.length||e[2].dims[0]!==n))throw new Error("invalid bias");let r=e[0].dims.length-2;if(t.dilations.reduce(((e,t)=>e+t),0)>0&&t.dilations.length!==r)throw new Error(`dilations should be ${r}D`);if(t.strides.reduce(((e,t)=>e+t),0)>0&&t.strides.length!==r)throw new Error(`strides should be ${r}D`);if(t.pads.reduce(((e,t)=>e+t),0)>0&&t.pads.length!==2*r)throw new Error(`pads should be ${2*r}D`);if(t.outputPadding.length!==r&&0!==t.outputPadding.length)throw new Error(`output_padding should be ${r}D`);if(t.kernelShape.reduce(((e,t)=>e+t),0)>0&&0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(0!==t.outputShape.length&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},li=[2,3,1,0],ci=(e,t,n)=>{let r=ii(n,t),s="NHWC"===n.format,a=r.outputShape,i=a[s?3:1],o=t[0].dims[s?3:1];if(1!==r.group||1===i&&1===o)return void e.compute(ni(t,r));let u=a[s?1:2],l=a[s?2:3],c=s?u*l:i,h=s?i:u*l,d=t[1].dims[2]*t[1].dims[3]*o,p=e.kernelCustomData.wT??e.compute(Wn(t[1],li),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=p);let f=[t[0],p],m=3===t.length;m&&(s||1!==t[2].dims.length?f.push(t[2]):f.push(t[2].reshape([t[2].dims[0],1,1]))),e.compute(ei(f,r,a,c,h,d,m,!0),{inputs:f})},hi=(e,t)=>{let n="NHWC"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&r.push(e.inputs[2]);let s=t.kernelShape;(0===s.length||0===s[0])&&(s=[e.inputs[1].dims[2]]);let a=t.dilations;(0===a.length||0===a[0])&&(a=[1]);let i=t.strides;(0===i.length||0===i[0])&&(i=[1]);let o=t.pads;0===o.length&&(o=[0,0]),o=[0,o[0],0,o[1]],i=[1].concat(i),a=[1].concat(a),s=[1].concat(s);let u=ii({...t,pads:o,strides:i,dilations:a,kernelShape:s},r);e.compute(ni(r,u,(e=>n?[e[0],e[2],e[3]]:[e[0],e[1],e[3]])))},di=(e,t)=>{ui(e.inputs,t),3===e.inputs[0].dims.length?hi(e,t):ci(e,e.inputs,t)}})),Pl=Oe((()=>{ul(),ml(),fl(),gl(),pi=(e,t,n,r)=>{let s=mn.size(t),a=t.length,i=Rn("input",e,a),o=An("output",e,a),u=6===n.dataType?n.getInt32Array()[0]:Number(n.getBigInt64Array()[0]),l=mn.normalizeAxis(u,a);return{name:"CumSum",shaderCache:{hint:r.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:[{type:12,data:s},{type:12,data:l},...In(t,t)]}),getShaderSource:e=>{let t=` i32(${i.indicesGet("inputIndices","uniforms.axis")}) `,n=En("uniforms.input_shape","uniforms.axis",a),s=r.reverse?t+(r.exclusive?" + 1":""):"0",u=r.reverse?n:t+(r.exclusive?"":" + 1");return`\n                ${e.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(i,o)}\n                ${e.mainStart()}\n                  ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${o.offsetToIndices("global_idx")};\n                  var sum = ${o.type.value}(0);\n                  let first : i32 = ${s};\n                  let last : i32 = ${u};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${i.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${i.getByIndices("inputIndices")};\n                  }\n                  ${o.setByOffset("global_idx","sum")};\n                }`}}},fi=(e,t)=>{let n=e.inputs[0].dims,r=e.inputs[0].dataType,s=e.inputs[1];e.compute(pi(r,n,s,t),{inputs:[0]})},mi=e=>{let t=1===e.exclusive,n=1===e.reverse;return dn({exclusive:t,reverse:n})}})),Wl=Oe((()=>{ul(),ml(),fl(),gl(),gi=e=>{if(!e||1!==e.length)throw new Error("DepthToSpace requires 1 input.");if(4!==e[0].dims.length)throw new Error("DepthToSpace requires 4D input.")},bi=(e,t,n,r)=>{let s=[];s.push(`fn perm(i: ${r.type.indices}) -> ${n.type.indices} {\n    var a: ${n.type.indices};`);for(let r=0;r<t;++r)s.push(n.indicesSet("a",e[r],`i[${r}]`));return s.push("return a;}"),s.join("\n")},yi=(e,t)=>{let n,r,s,a,i,o,u="NHWC"===t.format,l=t.blocksize,c="DCR"===t.mode;u?([n,r,s,a]=e.dims,i=c?[n,r,s,l,l,a/l**2]:[n,r,s,a/l**2,l,l],o=c?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([n,r,s,a]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],i=c?[n,l,l,a/l**2,r,s]:[n,a/l**2,l,l,r,s],o=c?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let h=e.reshape(i),d=h.dims.length,p=e.dataType,f=Rn("a",p,d),m=An("output",p,d);return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${t.blocksize};${t.mode}`,inputDependencies:["rank"]},getRunData:e=>{let t=u?[n,r*l,s*l,a/l**2]:[n,a/l**2,r*l,s*l],i=mn.size(t),c=h.dims,d=mn.sortBasedOnPerm(c,o);return{outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},...In(c,d)]}},getShaderSource:e=>`\n  ${e.registerUniform("output_size","u32").declareVariables(f,m)}\n\n  ${bi(o,d,f,m)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${m.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${m.setByOffset("global_idx",f.getByIndices("aIndices"))}\n  }`}},xi=(e,t)=>{gi(e.inputs),e.compute(yi(e.inputs[0],t))},wi=e=>dn({blocksize:e.blocksize,mode:e.mode,format:e.format})})),Ul=Oe((()=>{ul(),ml(),fl(),gl(),ki="^"+($i="("+(vi="[a-zA-Z]|\\.\\.\\.")+")+")+"$",Ii="^("+$i+",)*"+$i+"$",Si=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,t){let n=this.symbolToIndices.get(e);void 0===n?n=[t]:n.push(t),this.symbolToIndices.set(e,n)}},_i=class{constructor(e,t){this.equation=t,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[n,r]=t.includes("->")?t.split("->",2):[t,""];if(!n.match(RegExp(Ii)))throw new Error("Invalid LHS term");if(n.split(",").forEach(((t,n)=>{let r=e[n].dims.slice();if(!t.match(RegExp(ki)))throw new Error("Invalid LHS term");let s=this.processTerm(t,!0,r,n);this.lhs.push(s)})),""===r)r+=[...this.symbolToInfo.entries()].filter((([e,t])=>1===t.count||"..."===e)).map((([e])=>e)).join("");else if(!r.match(RegExp($i)))throw new Error("Invalid RHS");r.match(RegExp(vi,"g"))?.forEach((e=>{if("..."===e)this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let t=this.symbolToInfo.get(e);if(void 0===t)throw new Error("Invalid RHS symbol");this.outputDims.push(t.dimValue)}})),this.rhs=this.processTerm(r,!1,this.outputDims)}addSymbol(e,t,n){let r=this.symbolToInfo.get(e);if(void 0!==r){if(r.dimValue!==t&&1!==r.count)throw new Error("Dimension mismatch");r.count++,r.inputIndices.push(n)}else r={count:1,dimValue:t,inputIndices:[n]};this.symbolToInfo.set(e,r)}processTerm(e,t,n,r=-1){let s=n.length,a=!1,i=[],o=0;if(!e.match(RegExp(ki))&&!t&&""!==e)throw new Error("Invalid LHS term");let u=e.match(RegExp(vi,"g")),l=new Si(r);return u?.forEach(((e,c)=>{if("..."===e){if(a)throw new Error("Only one ellipsis is allowed per input term");a=!0;let e=s-u.length+1;if(e<0)throw new Error("Ellipsis out of bounds");if(i=n.slice(o,o+e),this.hasEllipsis){if(this.ellipsisDims.length!==i.length||this.ellipsisDims.toString()!==i.toString())throw new Error("Ellipsis dimensions mismatch")}else{if(!t)throw new Error("Ellipsis must be specified in the LHS");this.hasEllipsis=!0,this.ellipsisDims=i}for(let e=0;e<i.length;e++){let t=String.fromCharCode("0".charCodeAt(0)+e);l.addSymbol(t,c+e),this.addSymbol(t,n[o++],r)}}else l.addSymbol(e,c+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(e,n[o++],r)})),l}},Ci=e=>e+"_max",Ti=(e,t,n,r)=>{let s=e.map((e=>e.length)).map(((e,n)=>Rn(`input${n}`,t,e))),a=mn.size(r),i=An("output",t,r.length),o=[...n.symbolToInfo.keys()].filter((e=>!n.rhs.symbolToIndices.has(e)));return{name:"Einsum",shaderCache:{hint:n.equation,inputDependencies:e.map((()=>"rank"))},getRunData:()=>{let s=o.filter((e=>n.symbolToInfo.has(e))).map((e=>({type:12,data:n.symbolToInfo.get(e)?.dimValue||0})));s.push({type:12,data:a});let i=e.map(((e,t)=>[...In(e)])).reduce(((e,t)=>e.concat(t)),s);return i.push(...In(r)),{outputs:[{dims:r,dataType:t}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:i}},getShaderSource:e=>{let t=[],r=[],a=[],u=[],l=[],c=n.symbolToInfo.size===n.rhs.symbolToIndices.size;n.symbolToInfo.forEach(((e,o)=>{if(n.rhs.symbolToIndices.has(o)){let r=n.rhs.symbolToIndices.get(o)?.[0];void 0!==r&&n.lhs.forEach(((n,a)=>{if(e.inputIndices.includes(a)){let e=n.symbolToIndices.get(o);if(void 0===e)throw new Error("Invalid symbol error");e.forEach((e=>{t.push(`${s[a].indicesSet(`input${a}Indices`,e,i.indicesGet("outputIndices",r))}`)}))}}))}else n.lhs.forEach(((t,n)=>{if(e.inputIndices.includes(n)){let e=t.symbolToIndices.get(o);if(void 0===e)throw new Error("Invalid symbol error");e.forEach((e=>{r.push(`${s[n].indicesSet(`input${n}Indices`,e,`${o}`)}`)})),l.push(`prod *= ${s[n].getByIndices(`input${n}Indices`)};`)}})),a.push(`for(var ${o}: u32 = 0; ${o} < uniforms.${Ci(o)}; ${o}++) {`),u.push("}")}));let h=c?[...t,`let sum = ${s.map(((e,t)=>e.getByIndices(`input${t}Indices`))).join(" * ")};`]:[...t,"var sum = 0.0;",...a,...r,"var prod = 1.0;",...l,"sum += prod;",...u];return`\n            ${e.registerUniforms(o.map((e=>({name:`${Ci(e)}`,type:"u32"})))).registerUniform("outputSize","u32").declareVariables(...s,i)}\n\n            ${e.mainStart()}\n            ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${i.offsetToIndices("global_idx")};\n            ${s.map(((e,t)=>`var input${t}Indices: ${s[t].type.indices};`)).join("\n")}\n            ${h.join("\n")};\n            ${i.setByOffset("global_idx","sum")};\n          }`}}},Ei=(e,t)=>{let n=new _i(e.inputs,t.equation),r=n.outputDims,s=e.inputs.map(((e,t)=>e.dims));e.compute(Ti(s,e.inputs[0].dataType,n,r))},Ni=e=>{let t=e.equation.replace(/\s+/g,"");return dn({equation:t})}})),Vl=Oe((()=>{ul(),ml(),gl(),Ri=e=>{if(!e||2!==e.length)throw new Error("Expand requires 2 input.");let t=e[0].dims,n=Array.from(e[1].getBigInt64Array(),Number),r=n.length<t.length?0:n.length-t.length,s=t.length<n.length?0:t.length-n.length;for(;r<n.length&&s<t.length;++r,++s)if(n[r]!==t[s]&&1!==n[r]&&1!==t[s])throw new Error("Expand requires shape to be broadcastable to input")},Ai=(e,t)=>{let n=e.length-t.length,r=[];for(let t=0;t<n;++t)r.push(e[t]);for(let s=0;s<t.length;++s)r.push(1===t[s]?e[s+n]:t[s]);return r},Di=(e,t)=>e.length>t.length?Ai(e,t):Ai(t,e),Oi=e=>{let t=e[0].dims,n=Array.from(e[1].getBigInt64Array(),Number),r=Di(t,n),s=e[0].dataType,a=9===s?4:1,i=Math.ceil(mn.size(r)/a),o=[{type:12,data:i},...In(t,r)];return{name:"Expand",shaderCache:{hint:`${r.length}`,inputDependencies:["rank"]},getShaderSource:e=>{let n,i=Rn("input",s,t.length,a),o=An("output",s,r.length,a);if(9===s){let e=(e,t,n="")=>`\n          let outputIndices${t} = ${o.offsetToIndices(`outputOffset + ${t}u`)};\n          let offset${t} = ${i.broadcastedIndicesToOffset(`outputIndices${t}`,o)};\n          let index${t} = offset${t} / 4u;\n          let component${t} = offset${t} % 4u;\n          ${e}[${t}] = ${n}(${i.getByOffset(`index${t}`)}[component${t}]);\n        `;n=`\n        let outputOffset = global_idx * ${a};\n        var data = vec4<u32>(0);\n        ${e("data",0,"u32")}\n        ${e("data",1,"u32")}\n        ${e("data",2,"u32")}\n        ${e("data",3,"u32")}\n        ${o.setByOffset("global_idx","data")}\n      }`}else n=`\n        let outputIndices = ${o.offsetToIndices("global_idx")};\n        let inputOffset = ${i.broadcastedIndicesToOffset("outputIndices",o)};\n        ${o.setByOffset("global_idx",i.getByOffset("inputOffset"))}\n      }`;return`\n    ${e.registerUniform("vec_size","u32").declareVariables(i,o)}\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${n}`},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:o})}},Fi=e=>{Ri(e.inputs),e.compute(Oi(e.inputs),{inputs:[0]})}})),Gl=Oe((()=>{ul(),ml(),gl(),Il(),zi=e=>{let t=e[0].dataType,n=mn.size(e[0].dims),r=mn.size(e[1].dims),s=r%4==0;return{name:"FastGeluWithBias",shaderCache:{hint:`${s}`,inputDependencies:["type","type"]},getShaderSource:e=>{let n=Rn("x",t,[1],4),r=Rn("bias",t,[1],4),a=An("y",t,[1],4),i=e=>`\n      let bias${e}_offset: u32 = (global_idx * 4 + ${e}) % uniforms.bias_size;\n      let bias${e} = ${r.getByOffset(`bias${e}_offset / 4`)}[bias${e}_offset % 4];`,o=s?`\n      let bias = ${r.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${i(0)}${i(1)}${i(2)}${i(3)}\n      let bias = ${n.type.value}(bias0, bias1, bias2, bias3);`;return`${e.registerUniforms([{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}]).declareVariables(n,r,a)}\n\n    ${Ls(kn(t))}\n\n    ${e.mainStart(wn)}\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}\n\n      let x = ${n.getByOffset("global_idx")};\n      ${o}\n      let x_in = x + bias;\n      ${a.setByOffset("global_idx",Bs("x_in"))}\n    }`},getRunData:e=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],programUniforms:[{type:12,data:Math.ceil(n/4)},{type:12,data:r}],dispatchGroup:{x:Math.ceil(n/wn/4)}})}},Mi=e=>{e.inputs.length<2||0===mn.size(e.inputs[1].dims)?Ps(e):e.compute(zi(e.inputs))}})),Hl=Oe((()=>{ul(),ml(),fl(),gl(),Li=e=>{if(!e||2!==e.length)throw new Error("Gather requires 2 inputs.")},Bi=(e,t)=>{let n=e[0].dims,r=e[1].dims,s=n.length,a=mn.normalizeAxis(t.axis,s),i=n.slice(0);i.splice(a,1,...r);let o=n[a],u=9===e[0].dataType?4:1,l=Math.ceil(mn.size(i)/u),c=[{type:12,data:l},{type:6,data:o},{type:12,data:a},...In(e[0].dims,e[1].dims,i)];return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:c}),getShaderSource:t=>{let n,o=Rn("data",e[0].dataType,e[0].dims.length,u),l=Rn("inputIndices",e[1].dataType,e[1].dims.length),c=An("output",e[0].dataType,i.length,u),h=e=>{let t=r.length,n=`var indicesIndices${e}  = ${l.type.indices}(0);`;for(let r=0;r<t;r++)n+=`${t>1?`indicesIndices${e}[${r}]`:`indicesIndices${e}`} = ${i.length>1?`outputIndices${e}[uniforms.axis + ${r}]`:`outputIndices${e}`};`;n+=`\n          var idx${e} = ${l.getByIndices(`indicesIndices${e}`)};\n          if (idx${e} < 0) {\n            idx${e} = idx${e} + uniforms.axisDimLimit;\n          }\n          var dataIndices${e} : ${o.type.indices};\n        `;for(let r=0,o=0;r<s;r++)r===a?(n+=`${s>1?`dataIndices${e}[${r}]`:`dataIndices${e}`} = u32(idx${e});`,o+=t):(n+=`${s>1?`dataIndices${e}[${r}]`:`dataIndices${e}`} = ${i.length>1?`outputIndices${e}[${o}]`:`outputIndices${e}`};`,o++);return n};if(9===e[0].dataType){let e=(e,t,n="")=>`\n          let outputIndices${t} = ${c.offsetToIndices(`outputOffset + ${t}u`)};\n          ${h(t)};\n          let offset${t} = ${o.indicesToOffset(`dataIndices${t}`)};\n          let index${t} = offset${t} / 4u;\n          let component${t} = offset${t} % 4u;\n          ${e}[${t}] = ${n}(${o.getByOffset(`index${t}`)}[component${t}]);\n        `;n=`\n        let outputOffset = global_idx * ${u};\n        var value = vec4<u32>(0);\n        ${e("value",0,"u32")}\n        ${e("value",1,"u32")}\n        ${e("value",2,"u32")}\n        ${e("value",3,"u32")}\n        ${c.setByOffset("global_idx","value")}\n      `}else n=`\n      let outputIndices = ${c.offsetToIndices("global_idx")};\n      ${h("")};\n      let value = ${o.getByIndices("dataIndices")};\n      ${c.setByOffset("global_idx","value")};\n      `;return`\n      ${t.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(o,l,c)}\n      ${t.mainStart()}\n        ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${n}\n      }`}}},Pi=e=>dn({axis:e.axis}),Wi=(e,t)=>{let n=e.inputs;Li(n),e.compute(Bi(e.inputs,t))}})),jl=Oe((()=>{ul(),ml(),fl(),gl(),Ui=e=>{if(!e||2!==e.length)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error("GatherElements requires that the data input and\n                     indices input tensors be of same rank.")},Vi=(e,t)=>{let n=e[0].dims,r=e[0].dataType,s=n.length,a=e[1].dims,i=e[1].dataType,o=mn.normalizeAxis(t.axis,s),u=n[o],l=a.slice(0),c=mn.size(l),h=Rn("input",r,s),d=Rn("indicesInput",i,a.length),p=An("output",r,l.length),f=[{type:12,data:c},{type:6,data:u},{type:12,data:o}];return f.push(...In(n,a,l)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:f}),getShaderSource:e=>`\n      ${e.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(h,d,p)}\n      ${e.mainStart()}\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${p.offsetToIndices("global_idx")};\n\n      var idx = ${d.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${h.type.indices}(outputIndices);\n      ${h.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${h.getByIndices("inputIndices")};\n\n      ${p.setByOffset("global_idx","value")};\n  }`}},Gi=e=>dn({axis:e.axis}),Hi=(e,t)=>{let n=e.inputs;Ui(n),e.compute(Vi(e.inputs,t))}})),ql=Oe((()=>{ul(),ml(),gl(),ji=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(3===e.length&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},qi=(e,t)=>{let n=e[0].dims.slice(),r=e[1].dims.slice(),[s,a,i]=bn.getShapeOfGemmResult(n,t.transA,r,t.transB,3===e.length?e[2].dims:void 0),o=[s,a];if(!o)throw new Error("Can't use gemm on the given tensors");let u=mn.size(o),l=[{type:12,data:u},{type:12,data:s},{type:12,data:a},{type:12,data:i},{type:1,data:t.alpha},{type:1,data:t.beta}],c=["type","type"];return 3===e.length&&(l.push(...In(e[2].dims)),c.push("rank")),l.push(...In(o)),{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:l}),getShaderSource:n=>{let r="";t.transA&&t.transB?r="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?r="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?r="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(r="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let s=1===t.alpha?"":"value *= uniforms.alpha;",a=Rn("a",e[0].dataType,e[0].dims),i=Rn("b",e[1].dataType,e[1].dims),u=a.type.value,l=null,c=[a,i];3===e.length&&(l=Rn("c",e[2].dataType,e[2].dims.length),c.push(l));let h=An("output",e[0].dataType,o.length);return c.push(h),`\n  ${n.registerUniforms([{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}]).declareVariables(...c)}\n\n  ${n.mainStart()}\n    ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${u}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${r}\n    }\n\n    ${s}\n    ${null!=l?`let cOffset = ${l.broadcastedIndicesToOffset("vec2(m, n)",h)}; value += ${u}(uniforms.beta) * ${l.getByOffset("cOffset")};`:""}\n    output[global_idx] = value;\n  }`}}},Ki=e=>({transA:e.transA,transB:e.transB,alpha:e.alpha,beta:e.beta,cacheKey:`${e.transA};${e.transB};${1===e.alpha}`}),Xi=(e,t)=>{ji(e.inputs),e.compute(qi(e.inputs,t))}})),Kl=Oe((()=>{ul(),ml(),fl(),dl(),vl(),gl(),bl(),Yi=(e,t)=>e.length>t&&e[t].dims.length>0&&mn.size(e[t].dims)>0?e[t]:void 0,Zi=(e,t)=>{let n=e[0],r=Yi(e,1),s=Yi(e,2),a=Yi(e,3),i=Yi(e,4),o=Yi(e,5),u=Yi(e,6),l=Yi(e,7);if(3!==n.dims.length&&5!==n.dims.length)throw new Error("Input query is expected to have 3 or 5 dimensions");let c,h=n.dims[0],d=n.dims[1],p=3===n.dims.length?n.dims[2]:t.numHeads*n.dims[4],f=d,m=0,g=0,b=Math.floor(p/t.numHeads);if(u&&l){if(4!==u.dims.length)throw new Error('Input "past_key" is expected to have 4 dimensions');if(u.dims[0]!==h||u.dims[1]!==t.numHeads||u.dims[3]!==b)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(l.dims[0]!==h||l.dims[1]!==t.numHeads||l.dims[3]!==b)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(u.dims[2]!==l.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(4!==l.dims.length)throw new Error('Input "past_value" is expected to have 4 dimensions');m=u.dims[2],g=u.dims[2]}else if(u||l)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');if(r){if(3!==n.dims.length)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(r.dims.length<3||r.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(n.dims[0]!==r.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(3===r.dims.length){if(r.dims[2]!==n.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');c=2,f=r.dims[1]}else if(5===r.dims.length){if(r.dims[2]!==t.numHeads||2!==r.dims[3]||r.dims[4]!==b)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');c=5,f=r.dims[1]}else{if(r.dims[1]!==t.numHeads||r.dims[3]!==b)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');c=0,f=r.dims[2]}}else{if(3!==n.dims.length&&5!==n.dims.length)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(5===n.dims.length&&(n.dims[2]!==t.numHeads||3!==n.dims[3]))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');c=3}if(a){if(1!==a.dims.length)throw new Error('Input "bias" is expected to have 1 dimension');if(s&&5===n.dims.length&&2===n.dims[3])throw new Error("bias is not allowed for packed kv.")}let y=0;if(i){y=8;let e=i.dims;throw 1===e.length?e[0]===h?y=1:e[0]===3*h+2&&(y=3):2===e.length&&e[0]===h&&e[1]===f&&(y=5),8===y?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let x=!1,w=p;if(s){if(3!==s.dims.length&&4!==s.dims.length)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(n.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(3===s.dims.length){if(f!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');w=s.dims[2]}else{if(f!==s.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');w=s.dims[1]*s.dims[3],x=!0}}let v=m+f;if(i)throw new Error("Key padding mask is not supported");if(o){if(4!==o.dims.length)throw new Error('Input "relative_position_bias" is expected to have 4 dimensions');if(o.dims[0]!==h&&1!==o.dims[0]||o.dims[1]!==t.numHeads||o.dims[2]!==d||o.dims[3]!==v)throw new Error('Input "relative_position_bias" shape (batch_size, 1, sequence_length, kv_sequence_length)')}return{batchSize:h,sequenceLength:d,pastSequenceLength:m,kvSequenceLength:f,totalSequenceLength:v,maxSequenceLength:g,inputHiddenSize:0,hiddenSize:p,vHiddenSize:w,headSize:b,vHeadSize:Math.floor(w/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:y,scale:t.scale,broadcastResPosBias:!1,passPastInKv:x,qkvFormat:c}},Ji=e=>dn({...e}),Qi=dn({perm:[0,2,1,3]}),eo=(e,t,n,r,s,a,i)=>{let o=[r,s,a],u=mn.size(o),l=[{type:12,data:u},{type:12,data:i},{type:12,data:a}];return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:l}),getShaderSource:e=>{let r=An("qkv_with_bias",t.dataType,o),s=Rn("qkv",t.dataType,o),a=Rn("bias",n.dataType,o);return`\n  ${e.registerUniforms([{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}]).declareVariables(s,a,r)}\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`}},{inputs:[t,n],outputs:[-1]})[0]},to=(e,t,n,r,s,a,i,o)=>{let u=a;if(i){if(1===r)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return u=eo(e,a,i,t,r,n*s,o),u=u.reshape([t,r,n,s]),e.compute(Wn(u,Qi.perm),{inputs:[u],outputs:[-1]})[0]}return 3===a.dims.length&&(u=a.reshape([t,r,n,s])),e.compute(Wn(u,Qi.perm),{inputs:[u],outputs:[-1]})[0]},no=(e,t)=>{let n=Zi(e.inputs,t),r=e.inputs[0],s=Yi(e.inputs,1),a=Yi(e.inputs,2),i=Yi(e.inputs,3),o=Yi(e.inputs,4),u=Yi(e.inputs,5),l=Yi(e.inputs,6),c=Yi(e.inputs,7);if(5===r.dims.length)throw new Error("Packed QKV is not implemented");if(5===s?.dims.length)throw new Error("Packed KV is not implemented");let h=s&&a&&4===s.dims.length&&4===a.dims.length,d=to(e,n.batchSize,n.numHeads,n.sequenceLength,n.headSize,r,i,0);if(h)return Hr(e,d,s,a,o,void 0,l,c,u,n,t);if(!s||!a)throw new Error("key and value must be provided");let p=to(e,n.batchSize,n.numHeads,n.kvSequenceLength,n.headSize,s,i,n.hiddenSize),f=to(e,n.batchSize,n.numHeads,n.kvSequenceLength,n.vHeadSize,a,i,2*n.hiddenSize);Hr(e,d,p,f,o,void 0,l,c,u,n,t)}})),Xl=Oe((()=>{ul(),ml(),gl(),ro=e=>Array.from(e.getBigInt64Array(),Number),so=e=>{if(!e||2!==e.length)throw new Error("Tile requires 2 inputs.");if(1!==e[0].dataType&&10!==e[0].dataType&&6!==e[0].dataType&&12!==e[0].dataType)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(7!==e[1].dataType)throw new Error("Tile `repeats` input should be of int64 data type");if(1!==e[1].dims.length)throw new Error("Tile `repeats` input should be 1-D");if(ro(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},ao=(e,t)=>{let n=[];for(let r=0;r<e.length;++r)n.push(e[r]*t[r]);return n},io=(e,t)=>{let n=e[0].dims,r=t??ro(e[1]),s=ao(n,r),a=mn.size(s),i=e[0].dataType,o=Rn("input",i,n.length),u=An("output",i,s.length);return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:[{type:12,data:a},...In(e[0].dims,s)]}),getShaderSource:e=>`\n      const inputShape = ${o.indices(...n)};\n      ${e.registerUniform("output_size","u32").declareVariables(o,u)}\n      ${e.mainStart()}\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${u.offsetToIndices("global_idx")};\n      var input_indices: ${o.type.indices};\n      for (var i = 0; i < ${n.length}; i++) {\n        let input_dim_i = ${o.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${u.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${o.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${u.setByOffset("global_idx",o.getByIndices("input_indices"))}\n    }`}},oo=e=>{so(e.inputs),e.compute(io(e.inputs),{inputs:[0]})}})),Yl=Oe((()=>{ul(),ml(),fl(),vl(),gl(),Kl(),Xl(),bl(),uo=(e,t)=>{let n=e[0],r=e[1],s=e[2],a=e[3],i=e[4];if(3!==n.dims.length&&5!==n.dims.length)throw new Error("Input query is expected to have 3 or 5 dimensions");let o,u=n.dims[0],l=n.dims[1],c=3===n.dims.length?n.dims[2]:t.numHeads*n.dims[4],h=l,d=0,p=0,f=Math.floor(c/t.numHeads),m=a&&0!==a.dims.length,g=i&&0!==i.dims.length;if(m&&g){if(4!==a.dims.length)throw new Error('Input "past_key" is expected to have 4 dimensions');if(4!==i.dims.length)throw new Error('Input "past_value" is expected to have 4 dimensions');d=a.dims[1],p=a.dims[1]}else if(m||g)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');if(r){if(3!==n.dims.length)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(r.dims.length<3||r.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(n.dims[0]!==r.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(3===r.dims.length){if(n.dims[2]%r.dims[2]!=0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');o=2,h=r.dims[1]}else if(5===r.dims.length){if(r.dims[2]!==t.numHeads||2!==r.dims[3]||r.dims[4]!==f)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');o=5,h=r.dims[1]}else{if(r.dims[1]!==t.numHeads||r.dims[3]!==f)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');o=0,h=r.dims[2]}}else{if(3!==n.dims.length&&5!==n.dims.length)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(5===n.dims.length&&(n.dims[2]!==t.numHeads||3!==n.dims[3]))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');o=3}let b=!1,y=c;if(s){if(3!==s.dims.length&&4!==s.dims.length)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(n.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(3===s.dims.length){if(h!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');y=s.dims[2]}else{if(h!==s.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');y=s.dims[1]*s.dims[3],b=!0}}return{batchSize:u,sequenceLength:l,pastSequenceLength:d,kvSequenceLength:h,totalSequenceLength:d+h,maxSequenceLength:p,inputHiddenSize:0,hiddenSize:c,vHiddenSize:y,headSize:f,vHeadSize:Math.floor(y/t.kvNumHeads),numHeads:t.numHeads,kvNumHeads:t.kvNumHeads,nReps:t.numHeads/t.kvNumHeads,pastPresentShareBuffer:!1,maskType:0,scale:t.scale,broadcastResPosBias:!1,passPastInKv:b,qkvFormat:o,isPastkvBSNH:!0}},lo=(e,t,n,r)=>{let s=[r.batchSize,r.totalSequenceLength,r.kvNumHeads,r.headSize],a=mn.size(s)/4,i=r.totalSequenceLength,o=An("present_kv",n,s.length,4),u=Rn("new_kv",e.dataType,e.dims.length,4),l=t?Rn("past_kv",t.dataType,t.dims.length,4):void 0,c=Math.ceil(r.headSize/4),h={x:i,y:e.dims[0],z:1},d=t?["rank","rank"]:["rank"],p=[{type:12,data:a},{type:12,data:r.pastSequenceLength},{type:12,data:r.kvSequenceLength},{type:12,data:r.totalSequenceLength}],f=[u];l?(p.push(...In(e.dims),...In(t.dims),...In(s)),f.push(l)):p.push(...In(e.dims),...In(s));let m=[{name:"output_size",type:"u32"},{name:"past_seqlen",type:"u32"},{name:"new_seqlen",type:"u32"},{name:"present_seqlen",type:"u32"}],g="      let new_batch_stride = uniforms.new_seqlen * num_heads * H;\n        let new_row_stride = num_heads * H;\n        let new_head_stride = H;\n        let in_offset = b * new_batch_stride + (s - past_seqlen) * new_row_stride + n * new_head_stride + h;\n        present_kv[out_offset] = new_kv[in_offset];",b=t?`if (s < past_seqlen) {\n              let past_batch_stride = uniforms.past_seqlen * num_heads * H;\n        var past_head_stride = uniforms.past_seqlen * H;\n        if (is_bsnh) {\n          past_head_stride = H;\n        }\n        let in_offset = b * past_batch_stride + s * row_stride + n * past_head_stride + h;\n        present_kv[out_offset] = past_kv[in_offset];\n        } else if (s < past_seqlen + uniforms.new_seqlen) {\n        ${g}\n        }`:`if (s < past_seqlen + uniforms.new_seqlen) {\n          ${g}\n        }`;return{name:"ConcatPastNew",shaderCache:{hint:`${r.kvNumHeads}${c}${!!t}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:h,programUniforms:p}),getShaderSource:e=>`\n\n  ${e.registerUniforms(m).declareVariables(...f,o)}\n  ${e.mainStart([c,r.kvNumHeads,1])}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    var indices = ${o.offsetToIndices("global_idx")};\n    let h = local_id.x;\n    let n = local_id.y;\n    let s = workgroup_id.x;\n    let b = workgroup_id.y;\n    let num_heads = ${r.kvNumHeads}u;\n    let H = ${c}u;\n\n    let present_seqlen = uniforms.present_seqlen;\n    let present_batch_stride = present_seqlen * num_heads * H;\n    var row_stride = H;\n    let is_bsnh = ${r.isPastkvBSNH};\n\n    if (is_bsnh) {\n      row_stride = num_heads * H;\n    }\n    var present_head_stride = present_seqlen * H;\n    if (is_bsnh) {\n      present_head_stride = H;\n    }\n\n    let past_seqlen = uniforms.past_seqlen;\n\n    let out_offset = b * present_batch_stride + s * row_stride + n * present_head_stride + h;\n    ${b}\n  }`}},co=e=>dn({...e}),ho=dn({perm:[0,2,1,3]}),po=(e,t,n,r,s)=>{let a=t,i=r.kvNumHeads,o=r.nReps;return 3===t.dims.length&&0!==r.kvSequenceLength&&(a=t.reshape([r.batchSize,r.kvSequenceLength,i,r.headSize])),a=n?e.compute(lo(a,n,a.dataType,r),{inputs:[a,n],outputs:[r.isPastkvBSNH?s:-1]})[0]:e.compute(lo(a,void 0,a.dataType,r),{inputs:[a],outputs:[r.isPastkvBSNH?s:-1]})[0],1!==o&&(a=e.compute(io([a],[1,1,1,o]),{inputs:[a],outputs:[-1]})[0],a=a.reshape([r.batchSize,r.totalSequenceLength,i*o,r.headSize])),e.compute(Wn(a,ho.perm),{inputs:[a],outputs:[-1]})[0]},fo=(e,t)=>{let n=uo(e.inputs,t);if(5===e.inputs[0].dims.length)throw new Error("Packed QKV is not implemented");if(5===e.inputs[1]?.dims.length)throw new Error("Packed KV is not implemented");let r=to(e,n.batchSize,n.numHeads,n.sequenceLength,n.headSize,e.inputs[0],void 0,0),s=e.inputs[3]&&0!==e.inputs[3].dims.length?e.inputs[3]:void 0,a=e.inputs[4]&&0!==e.inputs[4].dims.length?e.inputs[4]:void 0,i=po(e,e.inputs[1],s,n,1),o=po(e,e.inputs[2],a,n,2);Hr(e,r,i,o,void 0,void 0,void 0,void 0,void 0,n,t)}})),Zl=Oe((()=>{ul(),ml(),gl(),mo=(e,t)=>{let n=e[0].dims,r=n,s=mn.sizeToDimension(n,2),a=mn.sizeFromDimension(n,2),i=Sn(a),o=a/i,u=[n[0],n[1],o],l=[{type:12,data:a},{type:12,data:o}];return l.push(...In(u,u)),{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${i}`,inputDependencies:["rank","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:s},programUniforms:l}),getShaderSource:n=>{let r=Rn("x",e[0].dataType,u.length,i),s=Rn("scale",e[1].dataType,e[1].dims),a=Rn("bias",e[2].dataType,e[2].dims),o=An("output",e[0].dataType,u.length,i),l=[r,s,a,o],c=r.type.value,h=1===i?"f32":`vec${i}<f32>`;return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${h}, 64>;\n  const workgroupSize = 64u;\n  ${n.registerUniforms([{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}]).declareVariables(...l)}\n  ${n.mainStart(64)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${h}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${h}(${r.get("batch","channel","h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${Tn("workgroupShared[0]",i)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${h}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${h}(${r.get("batch","channel","h")}) - ${h}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${Tn("workgroupShared[0]",i)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));\n    let channelScale = invStdDev * f32(${s.getByOffset("channel")});\n    let channelShift = f32(${a.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${r.get("batch","channel","h")} * ${c}(${h}(channelScale)) + ${c}(${h}(channelShift));\n      ${o.set("batch","channel","h","value")};\n    }\n  }`}}},go=(e,t,n,r,s,a,i,o)=>{let u=Sn(i),l=1===u?"vec2f":`mat2x${u}f`,c=1===u?"f32":`vec${u}f`,h=(e,t)=>`${l}(${e}, ${t})`,d=s*i/u,p=[{type:12,data:Math.ceil(a/64)},{type:12,data:a},{type:12,data:Math.floor(i/u)},{type:12,data:Math.floor(a*i/u)}],f=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${u}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:[s,i,64,2],dataType:1}],dispatchGroup:{x:s*i/u},programUniforms:p}),getShaderSource:e=>{let n=Rn("input",t.dataType,t.dims,u);return`\n  ${e.declareVariables(n)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${l}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${e.mainStart(64)}\n    let currentImageNumber = global_idx / 64 / uniforms.C;\n    let currentChannelNumber = (global_idx / 64) % uniforms.C;\n    let wgOffset = local_id.x * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${_n("f32",u)};\n    var squaredSum = ${_n("f32",u)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${c}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${h("sum","squaredSum")};\n  }`}},{inputs:[t],outputs:[-1]})[0],m=[{type:12,data:d},{type:12,data:a},{type:12,data:Math.floor(i/u)},{type:12,data:Math.floor(64*i/u)}];return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${u};${o}`,inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:[s,i,2],dataType:1}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:m}),getShaderSource:e=>{let t=Rn("scale",n.dataType,n.dims,u),s=Rn("bias",r.dataType,r.dims,u);return`\n  @group(0) @binding(0) var<storage, read> input : array<${l}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${t.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${s.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${l}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${_n("f32",u)};\n    var squaredSum = ${_n("f32",u)};\n    for (var i: u32 = 0; i < min(64, uniforms.H); i++) {\n        let value = input[offset + i + currentChannelNumber * 64];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${o}));\n    let channelScale = invStdDev * ${c}(scale[currentChannelNumber]);\n    let channelShift = ${c}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${h("channelScale","channelShift")};\n  }`}},{inputs:[f,n,r],outputs:[-1]})[0]},bo=(e,t,n)=>{let r=t[0].dims,s=r,a=r[0],i=r[r.length-1],o=mn.sizeFromDimension(r,1)/i,u=Sn(i),l=mn.size(s)/u,c=[{type:12,data:o},{type:12,data:Math.floor(i/u)}],h=go(e,t[0],t[1],t[2],a,o,i,n.epsilon);e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${u}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:s,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:c}),getShaderSource:e=>{let n=$n(t[0].dataType),r=1===u?"vec2f":`mat2x${u}f`,a=1===u?n:`vec${u}<${n}>`,i=Rn("input",t[0].dataType,t[0].dims,u),o=An("output",t[0].dataType,s,u);return`\n  @group(0) @binding(0) var<storage, read> input : array<${i.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${r}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${o.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${e.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${a}(scale[0]), ${a}(scale[1]));\n  }`}},{inputs:[t[0],h]})},yo=(e,t)=>{"NHWC"===t.format?bo(e,e.inputs,t):e.compute(mo(e.inputs,t))}})),Jl=Oe((()=>{ul(),ml(),gl(),xo=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},wo=(e,t,n)=>{let r=t.simplified,s=e[0].dims,a=e[1],i=!r&&e[2],o=s,u=mn.normalizeAxis(t.axis,s.length),l=mn.sizeToDimension(s,u),c=mn.sizeFromDimension(s,u),h=mn.size(a.dims),d=i?mn.size(i.dims):0;if(h!==c||i&&d!==c)throw new Error(`Size of X.shape()[axis:] == ${c}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${h} and bias size of ${d}`);let p=[];for(let e=0;e<s.length;++e)e<u?p.push(s[e]):p.push(1);let f=Sn(c),m=["type","type"],g=[{type:12,data:l},{type:1,data:c},{type:12,data:Math.floor(c/f)},{type:1,data:t.epsilon}];i&&m.push("type");let b=n>1,y=n>2,x=[{dims:o,dataType:e[0].dataType}];return b&&x.push({dims:p,dataType:1}),y&&x.push({dims:p,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${f};${n};${r}`,inputDependencies:m},getRunData:()=>({outputs:x,dispatchGroup:{x:Math.ceil(l/64)},programUniforms:g}),getShaderSource:t=>{let n=$n(e[0].dataType),s=[Rn("x",e[0].dataType,e[0].dims,f),Rn("scale",a.dataType,a.dims,f)];return i&&s.push(Rn("bias",i.dataType,i.dims,f)),s.push(An("output",e[0].dataType,o,f)),b&&s.push(An("mean_data_output",1,p)),y&&s.push(An("inv_std_output",1,p)),`\n  ${t.registerUniforms([{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(...s)}\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var mean_vector = ${_n("f32",f)};\n    var mean_square_vector = ${_n("f32",f)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${Cn(n,f,"x[h + offset]")};\n      mean_vector += value;\n      mean_square_vector += value * value;\n    }\n    let mean = ${Tn("mean_vector",f)} / uniforms.norm_size;\n    let inv_std_dev = inverseSqrt(${Tn("mean_square_vector",f)} / uniforms.norm_size ${r?"":"- mean * mean"} + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${Cn(n,f,"x[j + offset]")};\n      let f32scale = ${Cn(n,f,"scale[j]")};\n      output[j + offset] = ${s[0].type.value}((f32input ${r?"":"- mean"}) * inv_std_dev * f32scale\n        ${i?`+ ${Cn(n,f,"bias[j]")}`:""}\n      );\n    }\n\n    ${b?"mean_data_output[global_idx] = mean":""};\n    ${y?"inv_std_output[global_idx] = inv_std_dev":""};\n  }`}}},vo=(e,t)=>{xo(e.inputs),e.compute(wo(e.inputs,t,e.outputCount))}})),Ql=Oe((()=>{ul(),ml(),fl(),gl(),$o=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let n=e[0],r=n.dims.length;if(n.dims[r-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let s=Math.floor((t.k+t.blockSize-1)/t.blockSize),a=t.blockSize/8*t.bits,i=e[1];if(!mn.areEqual(i.dims,[t.n,s,a]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let o=e[2].dims;if(mn.size(o)!==t.n*s)throw new Error("scales input size error.");if(4===e.length){let n=e[3].dims,r=t.bits>4?t.n*s:t.n*Math.floor((s+1)/2);if(mn.size(n)!==r)throw new Error("zeroPoints input size error.")}},ko=(e,t,n,r)=>{let s=e[0].dims,a=s.length,i=Math.floor((t.k+t.blockSize-1)/t.blockSize),o=s[a-2],u=t.k,l=t.n,c=s.slice(0,a-2),h=mn.size(c),d=t.blockSize/8*t.bits/4,p=e[0].dataType,f=Sn(o),m=Sn(t.k),g=Sn(d),b=Wt(p),y=o*i*b,x=Math.floor(r/y),w=i<=n[0]&&x>0,v=!w||x>=4?Sn(l):x>=2&&Sn(l)>=2?2:1,$=c.concat([o,l]),k=mn.size($)/v/f,I=w?[]:[{type:12,data:k},{type:12,data:t.blockSize}],S=[h,o,u/m],_=mn.convertShape(e[1].dims).slice();_.splice(-1,1,d/g),I.push(...In(S)),I.push(...In(_)),I.push(...In(e[2].dims)),4===e.length&&I.push(...In(mn.convertShape(e[3].dims)));let C=[h,o,l/v];return I.push(...In(C)),{name:w?"BlockwiseMatMulNBits":"MatMulNBits",shaderCache:{hint:`${t.cacheKey};${o};${p};${e.length}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:$,dataType:p}],name:w?"BlockwiseMatMulNBits":"MatMulNBits",dispatchGroup:w?{x:1,y:Math.ceil(l/v),z:h}:{x:Math.ceil(k/64)},programUniforms:I}),getShaderSource:n=>{let r=S.length,s=Rn("a",e[0].dataType,r,m),a=Rn("b",12,_.length,g),u=Rn("scales",e[2].dataType,e[2].dims.length),c=[s,a,u],h=4===e.length?Rn("zero_points",12,e[3].dims.length):void 0;h&&c.push(h);let p=C.length,b=An("output",e[0].dataType,p,v),y=$n(e[0].dataType),x=(()=>{switch(m){case 1:return`array<${y}, 8>`;case 2:return`mat4x2<${y}>`;case 4:return`mat2x4<${y}>`;default:throw new Error(`${m}-component is not supported.`)}})(),$=`\n        for (var word: u32 = 0; word < ${d}; word += ${g}) {\n          ${a.indicesSet("b_indices","2","word")};\n          let b_data = ${a.getByIndices("b_indices")};\n          for (var i: u32 = 0; i < ${g}; i++) {\n            let b_value: u32 = ${1===g?"b_data":"b_data[word + i]"};\n            let b_mask: u32 = 0x0F0F0F0Fu;\n            let b_value_lower: vec4<u32> = unpack4xU8(b_value & b_mask);\n            let b_value_upper: vec4<u32> = unpack4xU8((b_value >> 4) & b_mask);\n            let b_quantized_values = ${x}(${Array.from({length:4},((e,t)=>`${y}(b_value_lower[${t}]), ${y}(b_value_upper[${t}])`)).join(", ")});\n            let b_dequantized_values = ${1===m?`${x}(${Array.from({length:8},((e,t)=>`(b_quantized_values[${t}] - zero_point) * scale`)).join(", ")});`:`(b_quantized_values - ${x}(${Array(8).fill("zero_point").join(",")})) * scale;`};\n            // Number of B elements per 32-bit word is 32/bits = 32/4 = 8\n            for (var m: u32 = 0; m < ${w?o:f}u; m++) {\n              ${s.indicesSet("a_indices",r-2,w?"m":`row * ${f} + m`)};\n              ${s.indicesSet("a_indices",r-1,"word_offset")};\n              var input_offset = ${s.indicesToOffset("a_indices")};\n              var a_data: ${x};\n              for (var j: u32 = 0; j < ${8/m}; j++) {\n                a_data[j] = ${s.getByOffset("input_offset")};\n                input_offset++;\n              }\n              ${w?"workgroup_shared[workgroup_shared_offset + m]":"output_values[m]"}${v>1?"[c]":""} += ${Array.from({length:8/m},((e,t)=>1===m?`a_data[${t}] * b_dequantized_values[${t}]`:`dot(a_data[${t}], b_dequantized_values[${t}])`)).join(" + ")};\n            }\n            word_offset += ${8/m};\n          }\n        }`,k=h?`\n          zero_point_offset += 4;\n          if (zero_point_offset == 32) {\n            zero_point_offset = 0;\n            zero_point_index++;\n            zero_point_word = ${h.getByOffset("zero_point_index")};\n          }`:"";return w?`\n        var<workgroup> workgroup_shared: array<${b.type.value}, ${o*i}>;\n        ${n.declareVariables(...c,b)}\n        ${n.mainStart([i,1,1])}\n          var a_indices: ${s.type.indices};\n          var block = local_id.x;\n          var col = workgroup_id.y;\n          var batch = workgroup_id.z;\n          ${s.indicesSet("a_indices","0","batch")};\n          // Two zero points are packed into one byte when uniforms.bits is 4.\n          for (var c: u32 = 0; c < ${v}; c++) {\n            let col_times_components_plus_c = col * ${v} + c;\n              ${h?`\n            var zero_point_bytes_per_col: u32 = (${i} + 1) / 2;\n            var zero_point_byte_count: u32 = col_times_components_plus_c * zero_point_bytes_per_col + (block >> 0x1u);\n            var zero_point_word_index: u32 = zero_point_byte_count >> 0x2u;\n            var zero_point_byte_offset: u32 = zero_point_byte_count & 0x3u;\n            var zero_point_nibble_offset: u32 = block & 0x1u;\n            var zero_point_bits_offset: u32 = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\n            var zero_point_word: u32 = ${h.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;`:""}\n            var b_indices: ${a.type.indices};\n            ${a.indicesSet("b_indices","0","col_times_components_plus_c")};\n            // The scale and zero points are computed per block.\n            var scales_index = col_times_components_plus_c * ${i} + block;\n            let scale = ${u.getByOffset("scales_index")};\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point = ${y}(${h?"(zero_point_word) & 0xFu":8});\n            ${a.indicesSet("b_indices","1","block")};\n            var word_offset: u32 = block * ${t.blockSize/m};\n            var workgroup_shared_offset: u32 = block * ${o};\n            ${$}\n          }\n          workgroupBarrier();\n          var output_indices: ${b.type.indices};\n          var elements_per_thread: u32 = ${Math.ceil(o/i)};\n          ${b.indicesSet("output_indices","0","batch")};\n          ${b.indicesSet("output_indices",p-1,"col")};\n          ${b.indicesSet("output_indices",p-2,"local_id.x * elements_per_thread")};\n          var output_offset = ${b.indicesToOffset("output_indices")};\n          for (var m: u32 = 0u; m < elements_per_thread; m++) {\n            var row = m + local_id.x * elements_per_thread;\n            if (row < ${o}) {\n              var output_value: ${b.type.value} = ${b.type.value}(0);\n              var workgroup_shared_offset: u32 = row;\n              for (var b: u32 = 0u; b < ${i}u; b++) {\n                output_value += workgroup_shared[workgroup_shared_offset];\n                workgroup_shared_offset += ${o};\n              }\n              ${b.setByOffset("output_offset","output_value")};\n              output_offset += ${l/v};\n            }\n          }\n        }`:`\n        ${n.registerUniforms([{name:"output_size",type:"u32"},{name:"block_size",type:"u32"}]).declareVariables(...c,b)}\n        ${n.mainStart()}\n          ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var output_values: array<${b.type.value}, ${f}>;\n          var output_indices = ${b.offsetToIndices("global_idx")};\n          var col = ${b.indicesGet("output_indices",p-1)};\n          var row = ${b.indicesGet("output_indices",p-2)};\n          var a_indices: ${s.type.indices} = output_indices;\n          // Two zero points are packed into one byte because uniforms.bits <= 4.\n          // zero_point_offset is either 0 or 4. It is bit offset within one byte.\n          // TODO support zero_point_offset for bits > 4\n          ${h?`\n          var zero_point_abs_offset = col * ${v} * ((${i} + 1) / 2);\n          var zero_point_index: u32 = zero_point_abs_offset / 4;\n          var zero_point_word: u32 = ${h.getByOffset("zero_point_index")};\n          var zero_point_offset: u32 = (zero_point_abs_offset % 4) * 8;`:""}\n          var scale_index = col * ${i*v};\n          var b_indices: ${a.type.indices};\n          for (var c: u32 = 0; c < ${v}; c++) {\n            ${a.indicesSet("b_indices","0",`col * ${v} + c`)};\n            var block_offset: u32 = 0;\n            for (var block: u32 = 0; block < ${i}; block++) {\n              // The scale and zero points are computed per block.\n              let scale = ${u.getByOffset("scale_index")};\n              // The default zero point is 8 for unsigned 4-bit quantization.\n              let zero_point = ${y}(${h?"extractBits(zero_point_word, zero_point_offset, 4)":8});\n              ${a.indicesSet("b_indices","1","block")};\n              var word_offset: u32 = block_offset;\n              ${$}\n              scale_index++;\n              ${k}\n              block_offset += uniforms.block_size / ${m};\n            }\n            // Drop the trailing 4 bits if the zero_poit_offset is not a byte boundary to align with the next byte.\n            ${h?`if (zero_point_offset % 8 > 0) {\n                ${k}\n              }`:""}\n            }\n            for (var k: u32 = 0u; k < ${f}u; k++) {\n              ${b.indicesSet("output_indices",p-2,`${f} * row + k`)};\n              ${b.setByIndices("output_indices","output_values[k]")}\n            }\n        }`}}},Io=(e,t)=>{$o(e.inputs,t);let n=e.getMaxComputeWorkgroupSizes(),r=e.getMaxComputeWorkgroupStoragesize();e.compute(ko(e.inputs,t,n,r))},So=e=>dn(e)})),ec=Oe((()=>{ul(),ml(),gl(),_o=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(1!==e[0].dataType&&10!==e[0].dataType)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=2*e[0].dims.length===e[1].dims[0];if(4===e.length&&(t=2*e[3].dims[0]===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Co=(e,t,n)=>{let r="";for(let s=t-1;s>=0;--s)r+=`\n            k = i32(${e.indicesGet("indices",s)}) - ${En("uniforms.pads",s,n)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${En("uniforms.x_shape",s,t)})) {\n              break;\n            }\n            offset += k * i32(${En("uniforms.x_strides",s,t)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${r}\n            value = x[offset];\n          }\n      `},To=(e,t,n)=>{let r="";for(let s=t-1;s>=0;--s)r+=`\n                k = i32(${e.indicesGet("indices",s)}) - ${En("uniforms.pads",s,n)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${En("uniforms.x_shape",s,t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${En("uniforms.x_shape",s,t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${En("uniforms.x_strides",s,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${r}\n              value = x[offset];\n          `},Eo=(e,t,n)=>{let r="";for(let s=t-1;s>=0;--s)r+=`\n                k = i32(${e.indicesGet("indices",s)}) - ${En("uniforms.pads",s,n)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${En("uniforms.x_shape",s,t)})) {\n                  k = i32(${En("uniforms.x_shape",s,t)}) - 1;\n                }\n                offset += k * i32(${En("uniforms.x_strides",s,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${r}\n              value = x[offset];\n          `},No=(e,t,n)=>{let r="";for(let s=t-1;s>=0;--s)r+=`\n                k = i32(${e.indicesGet("indices",s)}) - ${En("uniforms.pads",s,n)};\n                if (k < 0)  {\n                  k += i32(${En("uniforms.x_shape",s,t)}]);\n                }\n                if (k >= i32(${En("uniforms.x_shape",s,t)})) {\n                  k -= i32(${En("uniforms.x_shape",s,t)});\n                }\n                offset += k * i32(${En("uniforms.x_strides",s,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${r}\n              value = x[offset];\n          `},Ro=(e,t,n)=>{switch(n.mode){case 0:return Co(e,t,n.pads.length);case 1:return To(e,t,n.pads.length);case 2:return Eo(e,t,n.pads.length);case 3:return No(e,t,n.pads.length);default:throw new Error("Invalid mode")}},Ao=(e,t)=>{let n=mn.padShape(e[0].dims.slice(),t.pads),r=e[0].dims,s=[{type:12,data:mn.size(n)},{type:6,data:t.pads}];return 0===t.mode&&s.push({type:e[0].dataType,data:t.value}),s.push(...In(e[0].dims,n)),{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(mn.size(n)/64)},programUniforms:s}),getShaderSource:s=>{let a=An("output",e[0].dataType,n.length),i=Rn("x",e[0].dataType,r.length),o=i.type.value,u=Ro(a,r.length,t),l=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return 0===t.mode&&l.push({name:"constant_value",type:o}),`\n            ${s.registerUniforms(l).declareVariables(i,a)}\n            ${s.mainStart()}\n            ${s.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${a.offsetToIndices("global_idx")};\n\n            var value = ${o}(0);\n            ${u}\n            output[global_idx] = value;\n        }`}}},Do=(e,t)=>{if(e.length>1){let n=e[1].getBigInt64Array(),r=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,s=e[0].dims.length,a=new Int32Array(2*s).fill(0);if(e.length>=4){let t=e[3].getBigInt64Array();for(let e=0;e<t.length;e++)a[Number(t[e])]=Number(n[e]),a[Number(t[e])+s]=Number(n[e+t.length])}else n.forEach(((e,t)=>a[Number(t)]=Number(e)));let i=[];return a.forEach((e=>i.push(e))),{mode:t.mode,value:r,pads:i}}return t},Oo=(e,t)=>{_o(e.inputs);let n=Do(e.inputs,t);e.compute(Ao(e.inputs,n),{inputs:[0]})}})),tc=Oe((()=>{rt(),ul(),ml(),gl(),Fo=e=>{if(ae.webgpu.validateInputContent&&(!e||1!==e.length))throw new Error("Pool ops requires 1 input.")},zo=(e,t,n)=>{let r="NHWC"===t.format,s=e.dims.slice();r&&s.splice(1,0,s.pop());let a=Object.hasOwnProperty.call(t,"dilations"),i=t.kernelShape.slice(),o=t.strides.slice(),u=a?t.dilations.slice():[],l=t.pads.slice();gn.adjustPoolAttributes(n,s,i,o,u,l);let c=gn.computePoolOutputShape(n,s,o,u,i,l,t.autoPad),h=Object.assign({},t);a?Object.assign(h,{kernelShape:i,strides:o,pads:l,dilations:u,cacheKey:t.cacheKey}):Object.assign(h,{kernelShape:i,strides:o,pads:l,cacheKey:t.cacheKey});let d=c.slice();return d.push(d.splice(1,1)[0]),[h,r?d:c]},Mo=(e,t)=>{let n="NHWC"===t.format,r=[{type:12,data:mn.size(e)},{type:12,data:mn.size(t.kernelShape)}],s=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let e=t.kernelShape[t.kernelShape.length-1],n=t.strides[t.strides.length-1],a=t.pads[t.pads.length/2-1],i=t.pads[t.pads.length-1],o=!!(a+i);r.push({type:12,data:e},{type:12,data:n},{type:12,data:a},{type:12,data:i}),s.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let u=!1;if(2===t.kernelShape.length){let e=t.kernelShape[t.kernelShape.length-2],n=t.strides[t.strides.length-2],a=t.pads[t.pads.length/2-2],i=t.pads[t.pads.length-2];u=!!(a+i),r.push({type:12,data:e},{type:12,data:n},{type:12,data:a},{type:12,data:i}),s.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[r,s,!0,o,u]}{if(n)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let e=mn.computeStrides(t.kernelShape);r.push({type:12,data:e},{type:12,data:t.pads},{type:12,data:t.strides}),s.push({name:"kernelStrides",type:"u32",length:e.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let a=t.pads.reduce(((e,t)=>e+t));return[r,s,!!a,!1,!1]}},Lo=(e,t,n,r,s,a,i,o,u,l,c,h)=>{let d="NHWC"===s.format,p=t.type.value,f=An("output",t.type.tensor,r);if(s.kernelShape.length<=2){let r="",l="",m="",g=n-(d?2:1);if(r=c?`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${g}] = indices[${g}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${g}] < 0 || xIndices[${g}]\n                      >= uniforms.x_shape[${g}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${a}\n                }`:`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${g}] = indices[${g}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${a}\n                }`,2===s.kernelShape.length){let e=n-(d?3:2);l=h?`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${e}] = indices[${e}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${e}] < 0 || xIndices[${e}] >= uniforms.x_shape[${e}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${e}] = indices[${e}] * uniforms.sh - uniforms.phStart + j;\n                `,m="\n              }\n            "}return`\n            ${e.registerUniforms(u).declareVariables(t,f)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${f.offsetToIndices("global_idx")};\n              var xIndices = ${f.offsetToIndices("global_idx")};\n\n              var value = ${p}(${o});\n              var pad = 0;\n              ${l}\n              ${r}\n              ${m}\n              ${i}\n\n              output[global_idx] = value;\n            }`}{if(d)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let r=s.kernelShape.length,c=s.pads.length,h="";return h=l?`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${a}\n              }`:`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${a}\n            `,`\n            ${e.registerUniforms(u).declareVariables(t,f)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${f.offsetToIndices("global_idx")};\n              var xIndices = ${f.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${r}>;\n\n              var value = ${p}(${o});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${r-1}u; j++) {\n                  offsets[j] = offset / ${En("uniforms.kernelStrides","j",r)};\n                  offset -= offsets[j] * ${En("uniforms.kernelStrides","j",r)};\n                }\n                offsets[${r-1}] = offset;\n\n                isPad = false;\n                for (var j = ${n-r}u; j < ${n}u; j++) {\n                  xIndices[j] = indices[j] * ${En("uniforms.strides",`j - ${n-r}u`,r)}\n                    + offsets[j - ${n-r}u] - ${En("uniforms.pads","j - 2u",c)};\n                  ${h}\n              }\n              ${i}\n\n              output[global_idx] = value;\n            }`}},Bo=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Po=e=>`${Bo(e)};${e.countIncludePad}`,Wo=e=>`${Bo(e)};${e.storageOrder};${e.dilations}`,Uo=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Vo=(e,t,n,r)=>{let[s,a]=zo(t,r,n),i=Rn("x",t.dataType,t.dims.length),o=i.type.value,u="";s.countIncludePad?u+=`value /= ${o}(uniforms.kernelSize);`:u+=`value /= ${o}(i32(uniforms.kernelSize) - pad);`;let[l,c,h,d,p]=Mo(a,s);return l.push(...In(t.dims,a)),{name:e,shaderCache:{hint:`${r.cacheKey};${h};${d};${p}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:a,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(mn.size(a)/64)},programUniforms:l}),getShaderSource:e=>Lo(e,i,t.dims.length,a.length,s,"value += x_val;",u,0,c,h,d,p)}},Go=e=>{let t=0!==e.count_include_pad,n=Uo(e);if(0!==n.ceilMode)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let r={countIncludePad:t,...n,cacheKey:""};return{...r,cacheKey:Po(r)}},Ho=(e,t)=>{Fo(e.inputs),e.compute(Vo("AveragePool",e.inputs[0],!1,t))},jo={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},qo=e=>{let t=e.format;return{format:t,...jo,cacheKey:t}},Ko=(e,t)=>{Fo(e.inputs),e.compute(Vo("GlobalAveragePool",e.inputs[0],!0,t))},Xo=(e,t,n,r)=>{let[s,a]=zo(t,r,n),i=Rn("x",t.dataType,t.dims.length),[o,u,l,c,h]=Mo(a,s);return o.push(...In(t.dims,a)),{name:e,shaderCache:{hint:`${r.cacheKey};${l};${c};${h}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:a,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(mn.size(a)/64)},programUniforms:o}),getShaderSource:e=>Lo(e,i,t.dims.length,a.length,s,"\n      value = max(x_val, value);\n    ","",10===t.dataType?-65504:-1e5,u,l,c,h)}},Yo=(e,t)=>{Fo(e.inputs),e.compute(Xo("MaxPool",e.inputs[0],!1,t))},Zo=e=>{let t=e.storage_order,n=e.dilations,r=Uo(e);if(0!==t)throw new Error("column major storage order is not yet supported for MaxPool");if(0!==r.ceilMode)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let s={storageOrder:t,dilations:n,...r,cacheKey:""};return{...s,cacheKey:Wo(s)}},Jo=e=>{let t=e.format;return{format:t,...jo,cacheKey:t}},Qo=(e,t)=>{Fo(e.inputs),e.compute(Xo("GlobalMaxPool",e.inputs[0],!0,t))}})),nc=Oe((()=>{rt(),ul(),gl(),eu=(e,t,n)=>{if(e===t||e<t&&n<0||e>t&&n>0)throw new Error("Range these inputs' contents are invalid.")},tu=(e,t,n,r)=>{let s=Math.abs(Math.ceil((t-e)/n)),a=[s],i=s,o=[{type:12,data:i},{type:r,data:e},{type:r,data:n},...In(a)];return{name:"Range",shaderCache:{hint:`${r}`},getShaderSource:e=>{let t=An("output",r,a.length),n=t.type.value,s=[{name:"outputSize",type:"u32"},{name:"start",type:n},{name:"delta",type:n}];return`\n        ${e.registerUniforms(s).declareVariables(t)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${n}(global_idx) * uniforms.delta;\n      }`},getRunData:()=>({outputs:[{dims:a,dataType:r}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:o})}},nu=e=>{let t=0,n=0,r=0;6===e.inputs[0].dataType?(t=e.inputs[0].getInt32Array()[0],n=e.inputs[1].getInt32Array()[0],r=e.inputs[2].getInt32Array()[0]):1===e.inputs[0].dataType&&(t=e.inputs[0].getFloat32Array()[0],n=e.inputs[1].getFloat32Array()[0],r=e.inputs[2].getFloat32Array()[0]),ae.webgpu.validateInputContent&&eu(t,n,r),e.compute(tu(t,n,r,e.inputs[0].dataType),{inputs:[]})}})),rc=Oe((()=>{ul(),ml(),fl(),gl(),ru=(e,t)=>{if(e.every((e=>e>0||(()=>{throw new Error("Resize requires scales input values to be positive")}))),e.length>0)if("linear"===t.mode){if(!(2===e.length||3===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]||5===e.length&&1===e[0]&&1===e[1]))throw new Error("For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1")}else if("cubic"===t.mode&&!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")},su=(e,t,n)=>{t.every((e=>e>=0&&e<n||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")})));let r=new Array(n).fill(1);return t.forEach(((t,n)=>r[t]=e[n])),r},au=(e,t,n,r,s,a)=>{let[i,o,u]=n>10?[1,2,3]:[-1,e.length>1?1:-1,-1],l=e[0].dims.length;if(i>0&&e.length>i&&e[i].dims.length>0)e[i].getFloat32Array().forEach((e=>a.push(e)));else if("tf_crop_and_resize"===t.coordinateTransformMode)throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(o>0&&e.length>o&&e[o].dims.length>0){if(e[o].getFloat32Array().forEach((e=>r.push(e))),0!==r.length&&r.length!==l&&n>=18&&r.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");ru(r,t),t.axes.length>0&&su(r,t.axes,l).forEach(((e,t)=>r[t]=e))}if(u>0&&e.length>u&&(e[u].getBigInt64Array().forEach((e=>s.push(Number(e)))),s.length!==l||n>=18&&s.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(r.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(s.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof r<"u"&&typeof s<"u"&&r.length>0&&s.length>l)throw new Error("Resize requires only of scales or sizes to be specified")},iu=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",ou=(e,t,n)=>`fn getNearestPixelFromOriginal(xOriginal: ${n}, isDownSample: bool) -> ${n} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",uu=(e,t,n)=>{let r=new Array(n).fill(0).concat(new Array(n).fill(1)),s=0===e.length?r:e.slice();return t.length>0?(t.forEach(((e,a)=>{r[e]=s[a],r[a+n]=s[t.length+a]})),r):s},lu=(e,t,n,r)=>{let s=[];if(n.length>0)if(r.length>0){if(e.forEach((e=>s.push(e))),Math.max(...r)>e.length)throw new Error("axes is out of bound");r.forEach(((e,t)=>s[e]=n[t]))}else n.forEach((e=>s.push(e)));else{if(0===t.length)throw new Error("Resize requires either scales or sizes.");s=e.map(((e,n)=>Math.round(e*t[n])))}return s},cu=(e,t,n)=>{let r=(()=>{switch(n.keepAspectRatioPolicy){case"not_larger":return n.axes.length>0?Math.min(...n.axes.map((e=>t[e])),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return n.axes.length>0?Math.max(...n.axes.map((e=>t[e])),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${n.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let s=e.slice();return n.axes.length>0?(n.axes.forEach((e=>t[e]=r)),n.axes.forEach((n=>s[n]=Math.round(e[n]*t[n])))):(t.fill(r,0,t.length),s.forEach(((e,n)=>s[n]=Math.round(e*t[n])))),s},hu=(e,t,n,r,s)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${n.length}> {\n      var original_indices: array<${e.type.value}, ${n.length}>;\n      for (var i:u32 = 0; i < ${n.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var scale = ${En("uniforms.scales","i",r)};\n        var roi_low = ${En("uniforms.roi","i",s)};\n        var roi_hi = ${En("uniforms.roi",`i + ${t.length}`,s)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${En("uniforms.input_shape","i",t.length)};\n          var output_shape_i = ${En("uniforms.output_shape","i",n.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,du=(e,t,n,r,s,a,i)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${t.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${En("uniforms.scales","i",s)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${En("uniforms.roi","i",a)};\n          var roi_hi = ${En("uniforms.roi",`i + ${n.length}`,a)};\n          var input_shape_i = ${En("uniforms.input_shape","i",n.length)};\n          var output_shape_i = ${En("uniforms.output_shape","i",r.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${i} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,pu=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${En("uniforms.input_shape","i",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,fu=(e,t,n,r)=>e.rank>r?`\n    ${e.indicesSet("input_indices",t,"channel")};\n    ${e.indicesSet("input_indices",n,"batch")};\n`:"",mu=(e,t,n,r,s)=>{let[a,i,o,u]=2===n.length?[-1,0,1,-1]:[0,2,3,1],l=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${l} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",i,`max(0, min(row, ${n[i]} - 1))`)};\n      ${e.indicesSet("input_indices",o,`max(0, min(col, ${n[o]} - 1))`)};\n      ${fu(e,u,a,2)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${l} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${l} = originalIndices[${i}];\n      var col:${l} = originalIndices[${o}];\n      ${r?`if (row < 0 || row > (${n[i]} - 1) || col < 0 || col > (${n[o]} - 1)) {\n        return ${s};\n      }`:""};\n      row = max(0, min(row, ${n[i]} - 1));\n      col = max(0, min(col, ${n[o]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${n.length>2?`u32(originalIndices[${u}])`:"0"};\n      var batch: u32 =  ${n.length>2?`u32(originalIndices[${a}])`:"0"};\n      var x11: ${l} = getInputValue(batch, channel, row1, col1);\n      var x12: ${l} = getInputValue(batch, channel, row1, col2);\n      var x21: ${l} = getInputValue(batch, channel, row2, col1);\n      var x22: ${l} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${l} = abs(row - ${l}(row1));\n      var dx2: ${l} = abs(${l}(row2) - row);\n      var dy1: ${l} = abs(col - ${l}(col1));\n      var dy2: ${l} = abs(${l}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},gu=(e,t,n,r,s,a,i,o,u,l)=>{let c=2===n.length,[h,d]=c?[0,1]:[2,3],p=e.type.value,f=i=>{let c=i===h?"row":"col";return`\n      fn ${c}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${p} {\n        var output_index = ${t.indicesGet("output_indices",i)};\n        var originalIdx: ${p} = getOriginalCoordinateFromResizedCoordinate(output_index, ${s[i]},\n        ${r[i]}, ${n[i]}, ${a[i]}, ${a[i]} + ${n.length});\n        var fractOriginalIdx: ${p} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${o} && (originalIdx < 0 || originalIdx > (${n[i]} - 1))) {\n          return ${u};\n        }\n        var data: array<${p}, 4> = array<${p}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${c}: ${p} = originalIdx + ${p}(i);\n          if (${c} < 0 || ${c} >= ${n[i]}) {\n            ${l?"coefs[i + 1] = 0.0;\n                        continue;":o?`return ${u};`:`${c} = max(0, min(${c}, ${n[i]} - 1));`};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",i,`u32(${c})`)};\n          data[i + 1] = ${i===h?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${f(h)};\n    ${f(d)};\n  fn getCubicInterpolationCoefs(s: ${p}) -> array<${p}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${p}, 4> = array<${p}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${p} = 1.0 - absS;\n    var twoMinusAbsS: ${p} = 2.0 - absS;\n    var onePlusAbsS: ${p} = 1.0 + absS;\n    coeffs[0] = ((${i} * onePlusAbsS - 5 * ${i}) * onePlusAbsS + 8 * ${i}) * onePlusAbsS - 4 * ${i};\n    coeffs[1] = ((${i} + 2) * absS - (${i} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${i} + 2) * oneMinusAbsS - (${i} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${i} * twoMinusAbsS - 5 * ${i}) * twoMinusAbsS + 8 * ${i}) * twoMinusAbsS - 4 * ${i};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${p}, 4>, coefs: array<${p}, 4>) -> ${p} {\n    var coefsSum: ${p} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${p} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},bu=(e,t,n,r,s)=>{let[a,i,o,u,l]=3===n.length?[-1,0,1,2,-1]:[0,2,3,4,1],c=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${c} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",i,`max(0, min(depth, ${n[i]} - 1))`)};\n      ${e.indicesSet("input_indices",o,`max(0, min(height, ${n[o]} - 1))`)};\n      ${e.indicesSet("input_indices",u,`max(0, min(width, ${n[u]} - 1))`)};\n      ${fu(e,l,a,3)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${c} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${c} = originalIndices[${i}];\n      var height:${c} = originalIndices[${o}];\n      var width:${c} = originalIndices[${u}];\n      ${r?`if (depth < 0 || depth > (${n[i]} - 1) || height < 0 || height > (${n[o]} - 1) || width < 0 || (width > ${n[u]} - 1)) {\n      return ${s};\n        }`:""};\n\n    depth = max(0, min(depth, ${n[i]} - 1));\n      height = max(0, min(height, ${n[o]} - 1));\n      width = max(0, min(width, ${n[u]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${n.length>3?`u32(originalIndices[${l}])`:"0"};\n      var batch: u32 =  ${n.length>3?`u32(originalIndices[${a}])`:"0"};\n\n      var x111: ${c} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${c} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${c} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${c} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${c} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${c} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${c} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${c} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${c} = abs(depth - ${c}(depth1));\n      var dx2: ${c} = abs(${c}(depth2) - depth);\n      var dy1: ${c} = abs(height - ${c}(height1));\n      var dy2: ${c} = abs(${c}(height2) - height);\n      var dz1: ${c} = abs(width - ${c}(width1));\n      var dz2: ${c} = abs(${c}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},yu=(e,t,n,r,s,a)=>{let i=e.dims,o=uu(a,t.axes,i.length),u=lu(i,r,s,t.axes),l=r.slice();0===r.length&&(l=i.map(((e,t)=>0===e?1:u[t]/e)),"stretch"!==t.keepAspectRatioPolicy&&(u=cu(i,l,t)));let c=An("output",e.dataType,u.length),h=Rn("input",e.dataType,i.length),d=mn.size(u),p=i.length===u.length&&i.every(((e,t)=>e===u[t])),f="tf_crop_and_resize"===t.coordinateTransformMode,m=t.extrapolationValue,g=h.type.value;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${n}|${l.length>0?l:""}|${s.length>0?s:""}|${o.length>0?o:""}|${p}|${i}`,inputDependencies:["rank"]},getShaderSource:e=>`\n      ${p?"":`\n      ${iu(t.coordinateTransformMode,g)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${pu(h,i)};\n              ${ou(t.nearestMode,n,g)};\n              ${du(h,c,i,u,l.length,o.length,f)};\n              `;case"linear":return`\n              ${hu(c,i,u,l.length,o.length)};\n              ${(()=>{if(2===i.length||4===i.length)return`${mu(h,c,i,f,m)}`;if(3===i.length||5===i.length)return`${bu(h,c,i,f,m)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(2===i.length||4===i.length)return`${gu(h,c,i,u,l,o,t.cubicCoeffA,f,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${e.registerUniform("output_size","u32").registerUniform("scales","f32",l.length).registerUniform("roi","f32",o.length).declareVariables(h,c)}\n      ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${p?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${c.offsetToIndices("global_idx")};\n        var input_indices: ${h.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${h.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${2===i.length||4===i.length?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n`}\n      }`,getRunData:()=>({outputs:[{dims:u,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:[{type:12,data:d},{type:1,data:l},{type:1,data:o},...In(i,u)]})}},xu=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},wu=(e,t)=>{let n=[],r=[],s=[],a=xu(e);if(0!==t.antialias)throw Error("Only default value (0) for Antialias attribute is supported");au(e.inputs,t,a,n,r,s),e.compute(yu(e.inputs[0],t,a,n,r,s),{inputs:[0]})},vu=e=>{let t=e.antialias,n=e.axes,r=e.coordinateTransformMode,s=e.cubicCoeffA,a=0!==e.excludeOutside,i=e.extrapolationValue,o=e.keepAspectRatioPolicy,u=e.mode,l=""===e.nearestMode?"simple":e.nearestMode;return dn({antialias:t,axes:n,coordinateTransformMode:r,cubicCoeffA:s,excludeOutside:a,extrapolationValue:i,keepAspectRatioPolicy:o,mode:u,nearestMode:l})}})),sc=Oe((()=>{ul(),ml(),fl(),gl(),$u=(e,t)=>{let[n,r,s,a]=e,{numHeads:i,rotaryEmbeddingDim:o}=t;if(3!==n.dims.length&&4!==n.dims.length)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${n.dims.length}`);if(!mn.areEqual(r.dims,[])&&!mn.areEqual(r.dims,[1])&&2!==r.dims.length)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${r.dims.length}`);if(2!==s.dims.length)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${s.dims.length}`);if(2!==a.dims.length)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${a.dims.length}`);if(!mn.areEqual(s.dims,a.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(o>0&&0===i)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let u=n.dims[0],l=n.dims[n.dims.length-2],c=s.dims[0],h=mn.sizeFromDimension(n.dims,1)/l,d=0===o?2*s.dims[1]:h/i;if(o>d)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(2===r.dims.length){if(u!==r.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${r.dims[0]}`);if(l!==r.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${r.dims[1]}`)}if(d/2!==s.dims[1]&&o/2!==s.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${s.dims[1]}`);if(l>c)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},ku=(e,t)=>{let{interleaved:n,numHeads:r,rotaryEmbeddingDim:s,scale:a}=t,i=e[0].dims[0],o=mn.sizeFromDimension(e[0].dims,1),u=e[0].dims[e[0].dims.length-2],l=o/u,c=e[2].dims[1],h=0===s?2*c:l/r,d=new Array(i,u,l/h,h-c),p=mn.computeStrides(d),f=[{type:1,data:a},{type:12,data:d},{type:12,data:p},...3===e[0].dims.length?new Array({type:12,data:[o,l,h,1]}):[],...4===e[0].dims.length?new Array({type:12,data:[o,h,u*h,1]}):[],...In(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)];return{name:"RotaryEmbedding",shaderCache:{hint:dn({interleaved:n}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:t=>{let r=Rn("input",e[0].dataType,e[0].dims.length),s=Rn("position_ids",e[1].dataType,e[1].dims.length),a=Rn("cos_cache",e[2].dataType,e[2].dims.length),i=Rn("sin_cache",e[3].dataType,e[3].dims.length),o=An("output",e[0].dataType,e[0].dims.length);return t.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:d.length},{name:"global_strides",type:"u32",length:p.length},{name:"input_output_strides",type:"u32",length:p.length}]),`\n        ${t.declareVariables(r,s,a,i,o)}\n\n        ${t.mainStart(wn)}\n          let half_rotary_emb_dim = uniforms.${a.name}_shape[1];\n          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;\n          let size = uniforms.global_shape[0] * uniforms.global_strides[0];\n          ${t.guardAgainstOutOfBoundsWorkgroupSizes("size")}\n\n          if (bsnh[3] < half_rotary_emb_dim) {\n            let position_ids_idx =\n                ${s.broadcastedIndicesToOffset("bsnh.xy",An("",s.type.tensor,2))};\n            let position_id =\n                u32(${s.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);\n            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${n});\n            let j = i + select(half_rotary_emb_dim, 1, ${n});\n            let re = ${r.getByOffset("i")} * ${a.get("position_id","bsnh[3]")} -\n                ${r.getByOffset("j")} * ${i.get("position_id","bsnh[3]")};\n            ${o.setByOffset("i","re")}\n            let im = ${r.getByOffset("i")} * ${i.get("position_id","bsnh[3]")} +\n                ${r.getByOffset("j")} * ${a.get("position_id","bsnh[3]")};\n            ${o.setByOffset("j","im")}\n          } else {\n            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;\n            ${o.setByOffset("k",r.getByOffset("k"))}\n          }\n        }`},getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(mn.size(d)/wn)},programUniforms:f})}},Iu=(e,t)=>{$u(e.inputs,t),e.compute(ku(e.inputs,t))}})),ac=Oe((()=>{ul(),ml(),gl(),Su=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],n=e[1],r=e[2];if(t.dataType!==n.dataType||t.dataType!==r.dataType)throw new Error("All inputs must have the same data type");if(3!==t.dims.length&&2!==t.dims.length)throw new Error("Input must be 2D or 3D");if(3!==n.dims.length&&2!==n.dims.length)throw new Error("Skip must be 2D or 3D");let s=t.dims[t.dims.length-1],a=t.dims[t.dims.length-2];if(n.dims[n.dims.length-1]!==s)throw new Error("Skip must have the same hidden size as input");if(n.dims[n.dims.length-2]!==a)throw new Error("Skip must have the same sequence length as input");if(1!==r.dims.length)throw new Error("Gamma must be 1D");if(r.dims[r.dims.length-1]!==s)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let t=e[3];if(1!==t.dims.length)throw new Error("Beta must be 1D");if(t.dims[t.dims.length-1]!==s)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let t=e[4];if(1!==t.dims.length)throw new Error("Bias must be 1D");if(t.dims[t.dims.length-1]!==s)throw new Error("Bias must have the same hidden size as input")}},_u=(e,t,n,r)=>{let s=t.simplified,a=e[0].dims,i=mn.size(a),o=a,u=i,l=a.slice(-1)[0],c=r?a.slice(0,-1).concat(1):[],h=!s&&e.length>3,d=e.length>4,p=r&&n>1,f=r&&n>2,m=n>3,g=Sn(l),b=[{type:12,data:u},{type:12,data:g},{type:12,data:l},{type:1,data:t.epsilon}],y=[{dims:o,dataType:e[0].dataType}];return n>1&&y.push({dims:c,dataType:1}),n>2&&y.push({dims:c,dataType:1}),n>3&&y.push({dims:a,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${g};${p};${f};${m}`,inputDependencies:e.map(((e,t)=>"type"))},getShaderSource:t=>{let n=[Rn("x",e[0].dataType,e[0].dims,g),Rn("skip",e[1].dataType,e[1].dims,g),Rn("gamma",e[2].dataType,e[2].dims,g)];h&&n.push(Rn("beta",e[3].dataType,e[3].dims,g)),d&&n.push(Rn("bias",e[4].dataType,e[4].dims,g)),n.push(An("output",e[0].dataType,o,g)),p&&n.push(An("mean_output",1,c)),f&&n.push(An("inv_std_output",1,c)),m&&n.push(An("input_skip_bias_sum",e[0].dataType,o,g));let r=$n(e[0].dataType),a=$n(1,g);return`\n\n      ${t.registerUniforms([{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(...n)}\n      var<workgroup> sum_shared : array<${a}, 64>;\n      var<workgroup> sum_squared_shared : array<${a}, 64>;\n\n      ${t.mainStart([64,1,1])}\n        let ix = local_id.x;\n        let iy = global_id.x / 64;\n\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        var stride = hidden_size_vectorized / 64;\n        let offset = ix * stride + iy * hidden_size_vectorized;\n        let offset1d = stride * ix;\n        if (ix == 63) {\n          stride = hidden_size_vectorized - stride * ix;\n        }\n        for (var i: u32 = 0; i < stride; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${d?"bias[offset1d + i]":r+"(0.0)"};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${m?"input_skip_bias_sum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32_value = ${Cn(r,g,"value")};\n          sum_shared[ix] += f32_value;\n          sum_squared_shared[ix] += f32_value * f32_value;\n        }\n        workgroupBarrier();\n\n        var reduce_size : u32 = 64;\n        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {\n          reduce_size = curr_size + (reduce_size & 1);\n          if (ix < curr_size) {\n            sum_shared[ix] += sum_shared[ix + reduce_size];\n            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];\n          }\n          workgroupBarrier();\n        }\n\n        let sum = sum_shared[0];\n        let square_sum = sum_squared_shared[0];\n        let mean = ${Tn("sum",g)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${Tn("square_sum",g)} / f32(uniforms.hidden_size) ${s?"":"- mean * mean"} + uniforms.epsilon);\n        ${p?"mean_output[global_idx] = mean;":""}\n        ${f?"inv_std_output[global_idx] = inv_std_dev;":""}\n\n        for (var i: u32 = 0; i < stride; i++) {\n          output[offset + i] = (output[offset + i] ${s?"":`- ${r}(mean)`}) *\n            ${r}(inv_std_dev) * gamma[offset1d + i]\n            ${h?"+ beta[offset1d + i]":""};\n        }\n      }`},getRunData:()=>({outputs:y,dispatchGroup:{x:Math.ceil(u/l)},programUniforms:b})}},Cu=(e,t)=>{Su(e.inputs);let n=[0];e.outputCount>1&&n.push(-3),e.outputCount>2&&n.push(-3),e.outputCount>3&&n.push(3),e.compute(_u(e.inputs,t,e.outputCount,!1),{outputs:n})}})),ic=Oe((()=>{ul(),ml(),fl(),gl(),Tu=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(0!==t.axes.length){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach(((t,n)=>{if(6!==e[n+1].dataType&&7!==e[n+1].dataType)throw new Error(`Input ${n} must be an array of int32 or int64`)}))},Eu=(e,t)=>{let n=[];if(e.length>t)if(7===e[t].dataType)e[t].getBigInt64Array().forEach((e=>n.push(Number(e))));else{if(6!==e[t].dataType)throw new Error(`Input ${t} must be an array of int32 or int64`);e[t].getInt32Array().forEach((e=>n.push(Number(e))))}return n},Nu=(e,t)=>{if(e.length>1){let t=Eu(e,1),n=Eu(e,2),r=Eu(e,3);return 0===r.length&&(r=[...Array(e[0].dims.length).keys()]),dn({starts:t,ends:n,axes:r})}return t},Ru=(e,t,n,r,s)=>{let a=e;return e<0&&(a+=n[r[t]]),s[t]<0?Math.max(0,Math.min(a,n[r[t]]-1)):Math.max(0,Math.min(a,n[r[t]]))},Au=(e,t,n)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${n.length}; i >= 0; i--) {\n            let input_shape_i = ${En("uniforms.input_shape","i",n.length)};\n            let steps_i = ${En("uniforms.steps","i",n.length)};\n            let signs_i = ${En("uniforms.signs","i",n.length)};\n            let starts_i = ${En("uniforms.starts","i",n.length)};\n            var output_index = ${t.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,Du=(e,t)=>{let n=e[0].dims,r=mn.size(n),s=t.axes.length>0?mn.normalizeAxes(t.axes,n.length):[...Array(n.length).keys()],a=Eu(e,4);a.forEach((e=>0!==e||(()=>{throw new Error("step cannot be 0")}))),0===a.length&&(a=Array(s.length).fill(1));let i=t.starts.map(((e,t)=>Ru(e,t,n,s,a))),o=t.ends.map(((e,t)=>Ru(e,t,n,s,a)));if(s.length!==i.length||s.length!==o.length)throw new Error("start, ends and axes should have the same number of elements");if(s.length!==n.length)for(let e=0;e<n.length;++e)s.includes(e)||(i.splice(e,0,0),o.splice(e,0,n[e]),a.splice(e,0,1));let u=a.map((e=>Math.sign(e)));a.forEach(((e,t,n)=>{if(e<0){let r=(o[t]-i[t])/e,s=i[t],u=s+r*a[t];i[t]=u,o[t]=s,n[t]=-e}}));let l=n.slice(0);s.forEach(((e,t)=>{l[e]=Math.ceil((o[e]-i[e])/a[e])}));let c={dims:l,dataType:e[0].dataType},h=An("output",e[0].dataType,l.length),d=Rn("input",e[0].dataType,e[0].dims.length),p=mn.size(l),f=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:i.length},{name:"signs",type:"i32",length:u.length},{name:"steps",type:"u32",length:a.length}],m=[{type:12,data:p},{type:12,data:i},{type:6,data:u},{type:12,data:a},...In(e[0].dims,l)];return{name:"Slice",shaderCache:{hint:`${u.length}_${i.length}_${a.length}`,inputDependencies:["rank"]},getShaderSource:e=>`\n      ${e.registerUniforms(f).declareVariables(d,h)}\n        ${Au(d,h,n)}\n        ${e.mainStart()}\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${h.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${h.setByOffset("global_idx",d.getByIndices("input_indices"))}\n      }`,getRunData:()=>({outputs:[c],dispatchGroup:{x:Math.ceil(r/64)},programUniforms:m})}},Ou=(e,t)=>{Tu(e.inputs,t);let n=Nu(e.inputs,t);e.compute(Du(e.inputs,n),{inputs:[0]})},Fu=e=>{let t=e.starts,n=e.ends,r=e.axes;return dn({starts:t,ends:n,axes:r})}})),oc=Oe((()=>{ul(),ml(),fl(),gl(),zu=e=>{if(!e||1!==e.length)throw new Error("Softmax op requires 1 input.")},Mu=(e,t)=>{let n=e.dims,r=mn.size(n),s=t.axis;if(s<0&&(s=n.length+s),s<n.length-1)throw new Error("softmax only supports last axis for now.");let a=n[s],i=r/a,o=Sn(a),u=a/o,l=Rn("x",e.dataType,e.dims,o),c=An("result",e.dataType,e.dims,o),h=l.type.value,d="f32"===$n(e.dataType)?`var threadMax = ${h}(-3.402823e+38f);`:`var threadMax = ${h}(-65504.0h);`;return{name:"Softmax",shaderCache:{hint:`${o}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:n,dataType:e.dataType}],dispatchGroup:{x:i},programUniforms:[{type:6,data:u}]}),getShaderSource:e=>`\n      var<workgroup> rowMaxShared : ${h};\n      var<workgroup> rowSumShared : ${h};\n      var<workgroup> threadShared : array<${h}, 64>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${h} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${h}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${e.registerUniform("packedCols","i32").declareVariables(l,c)}\n      ${e.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = 64;\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${d}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${h}(${((e,t)=>4===t?`max(max(${e}.x, ${e}.y), max(${e}.z, ${e}.w))`:2===t?`max(${e}.x, ${e}.y)`:3===t?`max(max(${e}.x, ${e}.y), ${e}.z)`:e)("threadShared[0]",o)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${h}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${h}(${Tn("threadShared[0]",o)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`}},Lu=(e,t)=>{zu(e.inputs),e.compute(Mu(e.inputs[0],t))},Bu=e=>dn({axis:e.axis})})),uc=Oe((()=>{ul(),ml(),fl(),gl(),Pu=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Wu=(e,t)=>{let n=[],r=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach((e=>n.push(Number(e)))),r=n.length),dn({numOutputs:r,axis:t.axis,splitSizes:n})},Uu=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${En("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,Vu=e=>{let t=e.length,n=[];for(let r=0;r<t;++r){let s=e[r].setByIndices("indices","input[global_idx]");1===t?n.push(s):0===r?n.push(`if (output_number == ${r}u) { ${s} }`):r===t-1?n.push(`else { ${s} }`):n.push(`else if (output_number == ${r}) { ${s} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${n.join("\n")}\n      }`},Gu=(e,t)=>{let n=e[0].dims,r=mn.size(n),s=e[0].dataType,a=mn.normalizeAxis(t.axis,n.length),i=new Array(t.numOutputs),o=Rn("input",s,n.length),u=new Array(t.numOutputs),l=[],c=[],h=0,d=[{type:12,data:r}];for(let r=0;r<t.numOutputs;r++){h+=t.splitSizes[r],u[r]=h;let a=n.slice();a[t.axis]=t.splitSizes[r],c.push(a),i[r]=An(`output${r}`,s,a.length),l.push({dims:c[r],dataType:e[0].dataType})}return d.push({type:12,data:u},...In(n,...c)),{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:e=>`\n  ${e.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",u.length).declareVariables(o,...i)}\n  ${Uu(u.length)}\n  ${Vu(i)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${o.offsetToIndices("global_idx")};\n    var index = ${o.indicesGet("indices",a)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${En("uniforms.size_in_split_axis","output_number - 1u",u.length)};\n      ${o.indicesSet("indices",a,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`,getRunData:()=>({outputs:l,dispatchGroup:{x:Math.ceil(r/64)},programUniforms:d})}},Hu=(e,t)=>{Pu(e.inputs);let n=1===e.inputs.length?t:Wu(e.inputs,t);e.compute(Gu(e.inputs,n),{inputs:[0]})},ju=e=>{let t=e.axis,n=e.splitSizes,r=e.numOutputs<0?n.length:e.numOutputs;if(r!==n.length)throw new Error("numOutputs and splitSizes lengh must be equal");return dn({axis:t,numOutputs:r,splitSizes:n})}})),lc=Oe((()=>{ul(),ml(),gl(),qu=(e,t,n,r,s)=>{let a,i=An("output_data",s,n.length,4),o=Rn("a_data",t[1].dataType,t[1].dims.length,4),u=Rn("b_data",t[2].dataType,t[2].dims.length,4),l=Rn("c_data",t[0].dataType,t[0].dims.length,4),c=(e,t,n)=>`select(${t}, ${e}, ${n})`;if(r){let e=(e,t,n="")=>{let r=`a_data[index_a${t}][component_a${t}]`,s=`b_data[index_b${t}][component_b${t}]`,a=`bool(c_data[index_c${t}] & (0xffu << (component_c${t} * 8)))`;return`\n            let output_indices${t} = ${i.offsetToIndices(`global_idx * 4u + ${t}u`)};\n            let offset_a${t} = ${o.broadcastedIndicesToOffset(`output_indices${t}`,i)};\n            let offset_b${t} = ${u.broadcastedIndicesToOffset(`output_indices${t}`,i)};\n            let offset_c${t} = ${l.broadcastedIndicesToOffset(`output_indices${t}`,i)};\n            let index_a${t} = offset_a${t} / 4u;\n            let index_b${t} = offset_b${t} / 4u;\n            let index_c${t} = offset_c${t} / 4u;\n            let component_a${t} = offset_a${t} % 4u;\n            let component_b${t} = offset_b${t} % 4u;\n            let component_c${t} = offset_c${t} % 4u;\n            ${e}[${t}] = ${n}(${c(r,s,a)});\n          `};a=9===s?`\n            var data = vec4<u32>(0);\n            ${e("data",0,"u32")}\n            ${e("data",1,"u32")}\n            ${e("data",2,"u32")}\n            ${e("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`\n            ${e("output_data[global_idx]",0)}\n            ${e("output_data[global_idx]",1)}\n            ${e("output_data[global_idx]",2)}\n            ${e("output_data[global_idx]",3)}\n          `}else a=i.setByOffset("global_idx",c(o.getByOffset("global_idx"),u.getByOffset("global_idx"),l.getByOffset("global_idx")));return`\n        ${e.registerUniform("vec_size","u32").declareVariables(l,o,u,i)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${a}\n      }`},Ku=e=>{let t=e[1].dims,n=e[2].dims,r=e[0].dims,s=e[1].dataType,a=!(mn.areEqual(t,n)&&mn.areEqual(n,r)),i=t,o=mn.size(t);if(a){let e=fn.calcShape(fn.calcShape(t,n,!1),r,!1);if(!e)throw new Error("Can't perform where op on the given tensors");i=e,o=mn.size(i)}let u=Math.ceil(o/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:t=>qu(t,e,i,a,s),getRunData:()=>({outputs:[{dims:i,dataType:s}],dispatchGroup:{x:Math.ceil(o/64/4)},programUniforms:[{type:12,data:u},...In(r,t,n,i)]})}},Xu=e=>{e.compute(Ku(e.inputs))}})),cc=Oe((()=>{wl(),vl(),$l(),kl(),Sl(),_l(),Cl(),zl(),Bl(),Pl(),Wl(),Ul(),Vl(),Gl(),Hl(),jl(),ql(),Yl(),Zl(),Jl(),Fl(),Ql(),Kl(),ec(),tc(),nc(),xl(),rc(),sc(),ac(),ic(),oc(),uc(),Xl(),bl(),Il(),lc(),Yu=new Map([["Abs",[rs]],["Acos",[ss]],["Acosh",[as]],["Add",[Js]],["ArgMax",[Br,Pr]],["ArgMin",[Lr,Pr]],["Asin",[is]],["Asinh",[os]],["Atan",[us]],["Atanh",[ls]],["Attention",[qr]],["AveragePool",[Ho,Go]],["BatchNormalization",[Zr]],["BiasAdd",[es]],["BiasSplitGelu",[Ks]],["Cast",[hs,cs]],["Ceil",[fs]],["Clip",[ps]],["Concat",[da,pa]],["Conv",[Ja,Ka]],["ConvTranspose",[di,oi]],["Cos",[ms]],["Cosh",[gs]],["CumSum",[fi,mi]],["DepthToSpace",[xi,wi]],["Div",[Qs]],["Einsum",[Ei,Ni]],["Elu",[ys,bs]],["Equal",[ea]],["Erf",[ws]],["Exp",[vs]],["Expand",[Fi]],["FastGelu",[Mi]],["Floor",[$s]],["FusedConv",[Ja,Ka]],["Gather",[Wi,Pi]],["GatherElements",[Hi,Gi]],["Gelu",[ks]],["Gemm",[Xi,Ki]],["GlobalAveragePool",[Ko,qo]],["GlobalMaxPool",[Qo,Jo]],["Greater",[sa]],["GreaterOrEqual",[ia]],["GroupQueryAttention",[fo,co]],["HardSigmoid",[Rs,Ns]],["InstanceNormalization",[yo]],["LayerNormalization",[vo]],["LeakyRelu",[Is,bs]],["Less",[aa]],["LessOrEqual",[oa]],["Log",[Us]],["MatMul",[Va]],["MatMulNBits",[Io,So]],["MaxPool",[Yo,Zo]],["Mul",[ta]],["MultiHeadAttention",[no,Ji]],["Neg",[_s]],["Not",[Ss]],["Pad",[Oo]],["Pow",[na]],["QuickGelu",[Hs,bs]],["Range",[nu]],["Reciprocal",[Cs]],["ReduceMin",[Ar]],["ReduceMean",[Cr]],["ReduceMax",[Rr]],["ReduceSum",[Or]],["ReduceProd",[Dr]],["ReduceL1",[Tr]],["ReduceL2",[Er]],["ReduceLogSum",[zr]],["ReduceLogSumExp",[Nr]],["ReduceSumSquare",[Fr]],["Relu",[Ts]],["Resize",[wu,vu]],["RotaryEmbedding",[Iu]],["Sigmoid",[Es]],["Sin",[As]],["Sinh",[Ds]],["Slice",[Ou,Fu]],["SkipLayerNormalization",[Cu]],["Split",[Hu,ju]],["Sqrt",[Os]],["Softmax",[Lu,Bu]],["Sub",[ra]],["Tan",[Fs]],["Tanh",[Ms]],["ThresholdedRelu",[Ws,bs]],["Tile",[oo]],["Transpose",[Un,Vn]],["Where",[Xu]]])})),hc=Oe((()=>{rt(),cl(),gl(),Zu=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,n,r,s){ke(e.programInfo.name);let a=this.backend.device,i=this.backend.getComputePassEncoder();this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber);let o=[];for(let e of t)o.push({binding:o.length,resource:{buffer:e.buffer}});for(let e of n)o.push({binding:o.length,resource:{buffer:e.buffer}});s&&o.push({binding:o.length,resource:s});let u=a.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:o,label:e.programInfo.name});if("capturing"===this.backend.sessionStatus){let t={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:u,dispatchGroup:r};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(t)}i.setPipeline(e.computePipeline),i.setBindGroup(0,u),i.dispatchWorkgroups(...r),this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||"at-passes"===this.backend.queryType)&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Ie(e.programInfo.name)}dispose(){}build(e,t){ke(e.name);let n=this.backend.device,r=[];n.features.has("shader-f16")&&r.push("enable f16;");let s=Fn(t,this.backend.device.limits),a=e.getShaderSource(s),i=`${r.join("\n")}\n${s.additionalImplementations}\n${a}`,o=n.createShaderModule({code:i,label:e.name});Qt("verbose",(()=>`[WebGPU] ${e.name} shader code: ${i}`));let u=n.createComputePipeline({compute:{module:o,entryPoint:"main"},layout:"auto",label:e.name});return Ie(e.name),{programInfo:e,computePipeline:u,uniformVariablesInfo:s.variablesInfo}}normalizeDispatchGroupSize(e){let t="number"==typeof e?e:e.x,n="number"==typeof e?1:e.y||1,r="number"==typeof e?1:e.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=s&&n<=s&&r<=s)return[t,n,r];let a=t*n*r,i=Math.ceil(Math.sqrt(a));if(i>s){if(i=Math.ceil(Math.cbrt(a)),i>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[i,i,i]}return[i,i,1]}}})),dc=Oe((()=>{rt(),ul(),cl(),hl(),pl(),cc(),hc(),Ju=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let n=[];for(let r=0;r<e.length;++r){let s=e[r].dataType;switch(t[r]){case"none":n.push("");break;case"type":n.push(`${s}`);break;case"rank":{let t=e[r].dims.length;n.push(`${s};${t}`);break}case"dims":{let t=e[r].dims.join(",");n.push(`${s};${t}`);break}default:throw new Error(`unsupported input dependency: ${t[r]}`)}}return n.join("|")},Qu=(e,t,n)=>{let r=e.name;return e.shaderCache?.hint&&(r+="["+e.shaderCache.hint+"]"),r+=":"+n+`:${Ju(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,r},el=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},tl=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(null===this.currentKernelId)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,t){this.env=e;let n=[],r={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:n};t.features.has("chromium-experimental-timestamp-query-inside-passes")?n.push("chromium-experimental-timestamp-query-inside-passes"):t.features.has("timestamp-query")&&n.push("timestamp-query"),t.features.has("shader-f16")&&n.push("shader-f16"),this.device=await t.requestDevice(r),this.adapterInfo=new el(t.info||await t.requestAdapterInfo()),this.gpuDataManager=cn(this),this.programManager=new Zu(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Zt(e.logLevel,!!e.debug),this.device.onuncapturederror=e=>{e.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${e.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:t,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),t={};"at-passes"===this.queryType&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:2*this.pendingDispatchNumber,endOfPassWriteIndex:2*this.pendingDispatchNumber+1}),this.computePassEncoder=e.beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;let e;ke(),this.endComputePass(),"none"!==this.queryType&&(this.commandEncoder.resolveQuerySet(this.querySet,0,2*this.pendingDispatchNumber,this.queryResolveBuffer,0),e=this.device.createBuffer({size:2*this.pendingDispatchNumber*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,2*this.pendingDispatchNumber*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,"none"!==this.queryType&&e.mapAsync(GPUMapMode.READ).then((()=>{let t=new BigUint64Array(e.getMappedRange()),n=this.pendingQueries.get(e);for(let e=0;e<t.length/2;e++){let r=n[e],s=r.kernelId,a=this.kernels.get(s),i=a.kernelType,o=a.kernelName,u=r.programName,l=r.inputTensorViews,c=r.outputTensorViews,h=t[2*e],d=t[2*e+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=h);let p=Number(h-this.queryTimeBase),f=Number(d-this.queryTimeBase);if(!Number.isSafeInteger(p)||!Number.isSafeInteger(f))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:l.map((e=>({dims:e.dims,dataType:Pt(e.dataType)}))),outputsMetadata:c.map((e=>({dims:e.dims,dataType:Pt(e.dataType)}))),kernelId:s,kernelType:i,kernelName:o,programName:u,startTime:p,endTime:f});else{let e="";l.forEach(((t,n)=>{e+=`input[${n}]: [${t.dims}] | ${Pt(t.dataType)}, `}));let t="";c.forEach(((e,n)=>{t+=`output[${n}]: [${e.dims}] | ${Pt(e.dataType)}, `})),console.log(`[profiling] kernel "${s}|${i}|${o}|${u}" ${e}${t}execution time: ${f-p} ns`)}ve("GPU",`${u}::${h}::${d}`)}e.unmap(),this.pendingQueries.delete(e)})),Ie()}run(e,t,n,r,s,a){ke(e.name);let i=[];for(let e=0;e<t.length;++e){let n=t[e].data;if(0===n)continue;let r=this.gpuDataManager.get(n);if(!r)throw new Error(`no GPU data for input: ${n}`);i.push(r)}let{outputs:o,dispatchGroup:u,programUniforms:l}=e.getRunData(t),c=0===n.length?o.map(((e,t)=>t)):n;if(c.length!==o.length)throw new Error(`Output size ${c.length} must be equal to ${o.length}.`);let h,d=[],p=[];for(let e=0;e<o.length;++e){if(!Number.isInteger(c[e])||c[e]<-3||c[e]>=a)throw new Error(`Invalid output index: ${c[e]}`);if(-3===c[e])continue;let t=-1===c[e],n=-2===c[e],i=t||n?s(o[e].dataType,o[e].dims):r(c[e],o[e].dataType,o[e].dims);if(d.push(i),0===i.data)continue;let u=this.gpuDataManager.get(i.data);if(!u)throw new Error(`no GPU data for output: ${i.data}`);if(t&&this.temporaryData.push(u),n){let e=this.kernelPersistentData.get(this.currentKernelId);e||(e=[],this.kernelPersistentData.set(this.currentKernelId,e)),e.push(u)}p.push(u)}if(i.length!==t.length||p.length!==d.length){if(0===p.length)return Ie(e.name),d;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}if(l){let e=0,t=[];l.forEach((n=>{let r="number"==typeof n.data?[n.data]:n.data;if(0===r.length)return;let s,a,i=10===n.type?2:4;10===n.type?(a=r.length>4?16:r.length>2?8:r.length*i,s=r.length>4?16:i*r.length):(a=r.length<=2?r.length*i:16,s=16),e=Math.ceil(e/a)*a,t.push(e);let o=10===n.type?8:4;e+=r.length>4?Math.ceil(r.length/o)*s:r.length*i}));let n=16;e=Math.ceil(e/n)*n;let r=new ArrayBuffer(e);l.forEach(((e,n)=>{let s=t[n],a="number"==typeof e.data?[e.data]:e.data;if(6===e.type)new Int32Array(r,s,a.length).set(a);else if(12===e.type)new Uint32Array(r,s,a.length).set(a);else if(10===e.type)new Uint16Array(r,s,a.length).set(a);else{if(1!==e.type)throw new Error(`Unsupported uniform type: ${Pt(e.type)}`);new Float32Array(r,s,a.length).set(a)}}));let s=this.gpuDataManager.create(e,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(s.buffer,0,r,0,e),this.gpuDataManager.release(s.id),h={offset:0,size:e,buffer:s.buffer}}let f=this.programManager.normalizeDispatchGroupSize(u),m=1===f[1]&&1===f[2],g=Qu(e,t,m),b=this.programManager.getArtifact(g);if(b||(b=this.programManager.build(e,f),this.programManager.setArtifact(g,b),Qt("info",(()=>`[artifact] key: ${g}, programName: ${e.name}`))),l&&b.uniformVariablesInfo){if(l.length!==b.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${b.uniformVariablesInfo.length}, got ${l.length} in program "${b.programInfo.name}".`);for(let e=0;e<l.length;e++){let t=l[e],n=t.type,r="number"==typeof t.data?1:t.data.length,[s,a]=b.uniformVariablesInfo[e];if(n!==s||r!==a)throw new Error(`Uniform variable ${e} mismatch: expect type ${s} with size ${a}, got type ${n} with size ${r} in program "${b.programInfo.name}".`)}}if(Qt("info",(()=>`[ProgramManager] run "${e.name}" (key=${g}) with ${f[0]}x${f[1]}x${f[2]}`)),"none"!==this.queryType||"capturing"===this.sessionStatus){let e={kernelId:this.currentKernelId,programName:b.programInfo.name,inputTensorViews:t,outputTensorViews:d};this.pendingKernels.push(e),"capturing"===this.sessionStatus&&this.capturedPendingKernels.get(this.currentSessionId).push(e)}return this.programManager.run(b,i,p,f,h),Ie(e.name),d}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){await this.gpuDataManager.download(e,t)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,n,r){let s=Yu.get(e);if(!s)throw new Error(`kernel not implemented: ${e}`);let a={kernelType:e,kernelName:r,kernelEntry:s[0],attributes:[s[1],n]};this.kernels.set(t,a)}releaseKernel(e){let t=this.kernelPersistentData.get(e);if(t){for(let e of t)this.gpuDataManager.release(e.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t,n){let r=this.kernels.get(e);if(!r)throw new Error(`kernel not created: ${e}`);let s=r.kernelType,a=r.kernelName,i=r.kernelEntry,o=r.attributes;if(null!==this.currentKernelId)throw new Error(`kernel "[${s}] ${a}" is not allowed to be called recursively`);this.currentKernelId=e,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),Qt("info",(()=>`[WebGPU] Start to run kernel "[${s}] ${a}"...`));let u=this.env.debug;this.temporaryData=[];try{return u&&this.device.pushErrorScope("validation"),i(t,o[1]),0}catch(e){return n.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${a}" failed. ${e}`)),1}finally{u&&n.push(this.device.popErrorScope().then((e=>e?`GPU validation error for kernel "[${s}] ${a}": ${e.message}`:null)));for(let e of this.temporaryData)this.gpuDataManager.release(e.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,t,n,r){let s=this.sessionExternalDataMapping.get(e);s||(s=new Map,this.sessionExternalDataMapping.set(e,s));let a=s.get(t),i=this.gpuDataManager.registerExternalBuffer(n,r,a?.[1]);return s.set(t,[i,n]),i}unregisterBuffers(e){let t=this.sessionExternalDataMapping.get(e);t&&(t.forEach((e=>this.gpuDataManager.unregisterExternalBuffer(e[1]))),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let t=this.gpuDataManager.get(e);if(!t)throw new Error(`no GPU data for buffer: ${e}`);return t.buffer}createDownloader(e,t,n){return async()=>{let r=await un(this,e,t);return en(r.buffer,n)}}writeTimestamp(e){"inside-passes"===this.queryType&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){this.queryType="none",("default"===this.env.webgpu.profiling?.mode||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),"none"!==this.queryType&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:2*this.maxDispatchNumber}),this.queryResolveBuffer=this.device.createBuffer({size:2*this.maxDispatchNumber*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Qt("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Qt("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Qt("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),t=this.capturedPendingKernels.get(this.currentSessionId),n=e.length;this.pendingKernels=[];for(let r=0;r<n;r++){let n=this.getComputePassEncoder(),s=e[r];this.writeTimestamp(2*this.pendingDispatchNumber),n.setPipeline(s.computePipeline),n.setBindGroup(0,s.bindGroup),n.dispatchWorkgroups(...s.dispatchGroup),this.writeTimestamp(2*this.pendingDispatchNumber+1),this.pendingDispatchNumber++,"none"!==this.queryType&&this.pendingKernels.push(t[r]),(this.pendingDispatchNumber>=this.maxDispatchNumber||"at-passes"===this.queryType)&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}})),pc={};Fe(pc,{init:()=>gc});var fc,mc,gc,bc,yc,xc,wc,vc,$c,kc,Ic,Sc,_c,Cc,Tc,Ec,Nc,Rc,Ac,Dc,Oc,Fc,zc,Mc,Lc,Bc,Pc,Wc,Uc,Vc,Gc,Hc,jc,qc,Kc,Xc,Yc,Zc,Jc=Oe((()=>{ul(),dc(),cl(),ml(),fc=class e{constructor(e,t,n,r){this.module=e,this.dataType=t,this.data=n,this.dims=r}getFloat32Array(){if(1!==this.dataType)throw new Error("Invalid data type");let e=mn.size(this.dims);return 0===e?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,e)}getBigInt64Array(){if(7!==this.dataType)throw new Error("Invalid data type");let e=mn.size(this.dims);return 0===e?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,e)}getInt32Array(){if(6!==this.dataType)throw new Error("Invalid data type");let e=mn.size(this.dims);return 0===e?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,e)}reshape(t){if(mn.size(t)!==mn.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},mc=class{constructor(e,t,n){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=t.adapterInfo;let r=e.HEAPU32,s=n>>>2;this.opKernelContext=r[s++];let a=r[s++];this.outputCount=r[s++],this.customDataOffset=r[s++],this.customDataSize=r[s++];let i=[];for(let t=0;t<a;t++){let t=r[s++],n=r[s++],a=r[s++],o=[];for(let e=0;e<a;e++)o.push(r[s++]);i.push(new fc(e,t,n,o))}this.inputs=i}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}getMaxComputeWorkgroupSizes(){return[this.backend.device.limits.maxComputeWorkgroupSizeX,this.backend.device.limits.maxComputeWorkgroupSizeY,this.backend.device.limits.maxComputeWorkgroupSizeZ]}getMaxComputeWorkgroupStoragesize(){return this.backend.device.limits.maxComputeWorkgroupStorageSize}compute(e,t){let n=t?.inputs?.map((e=>"number"==typeof e?this.inputs[e]:e))??this.inputs,r=t?.outputs??[];return this.backend.run(e,n,r,((e,t,n)=>new fc(this.module,t,this.output(e,n),n)),((e,t)=>{let n=Wt(e);if(!n)throw new Error(`Unsupported data type: ${e}`);let r=n*mn.size(t),s=r>0?this.backend.gpuDataManager.create(r).id:0;return new fc(this.module,e,s,t)}),this.outputCount)}output(e,t){let n=this.module.stackSave();try{let n=this.module.stackAlloc(4*(1+t.length)),r=n>>2;this.module.HEAPU32[r++]=t.length;for(let e=0;e<t.length;e++)this.module.HEAPU32[r++]=t[e];return this.module._JsepOutput(this.opKernelContext,e,n)}catch(n){throw new Error(`Failed to generate kernel's output[${e}] with dims [${t}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(n)}}},gc=async(e,t,n,r)=>{let s=t.jsepInit;if(!s)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if("webgpu"===e){let e=new tl;await e.initialize(n,r),s("webgpu",[e,t=>e.alloc(t),t=>e.free(t),(n,r,s,a=!1)=>{if(a)Qt("verbose",(()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${r}, size=${s}`)),e.memcpy(n,r);else{Qt("verbose",(()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${r}, size=${s}`));let a=t.HEAPU8.subarray(n>>>0,(n>>>0)+s);e.upload(r,a)}},async(n,r,s)=>{Qt("verbose",(()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${r}, size=${s}`)),await e.download(n,(()=>t.HEAPU8.subarray(r>>>0,(r>>>0)+s)))},(n,r,s)=>e.createKernel(n,r,s,t.UTF8ToString(t._JsepGetNodeName(r))),t=>e.releaseKernel(t),(n,r,s,a)=>{Qt("verbose",(()=>`[WebGPU] jsepRun: sessionHandle=${s}, kernel=${n}, contextDataOffset=${r}`));let i=new mc(t,e,r);return e.computeKernel(n,i,a)},()=>e.captureBegin(),()=>e.captureEnd(),()=>e.replay()])}else s("webnn")}})),Qc=Oe((()=>{il(),ol(),ul(),sl(),al(),ll(),bc=(e,t)=>{0!==Et()._OrtInit(e,t)&&At("Can't initialize onnxruntime.")},yc=async e=>{bc(e.wasm.numThreads,Vt(e.logLevel))},xc=async(e,t)=>{{let n=(Jc(),ze(pc)).init;if("webgpu"===t){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let t=e.webgpu.adapter;if(t){if("object"!=typeof t.limits||"object"!=typeof t.features||"function"!=typeof t.requestDevice)throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let n=e.webgpu.powerPreference;if(void 0!==n&&"low-power"!==n&&"high-performance"!==n)throw new Error(`Invalid powerPreference setting: "${n}"`);let r=e.webgpu.forceFallbackAdapter;if(void 0!==r&&"boolean"!=typeof r)throw new Error(`Invalid forceFallbackAdapter setting: "${r}"`);if(t=await navigator.gpu.requestAdapter({powerPreference:n,forceFallbackAdapter:r}),!t)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await n("webgpu",Et(),e,t)}if("webnn"===t){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await n("webnn",Et(),e)}}},wc=new Map,vc=e=>{let t=Et(),n=t.stackSave();try{let n=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,n,n+4)&&At("Can't get session input/output count."),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(n)}},$c=e=>{let t=Et(),n=t._malloc(e.byteLength);if(0===n)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,n),[n,e.byteLength]},kc=async(e,t)=>{let n,r,s=Et();Array.isArray(e)?[n,r]=e:e.buffer===s.HEAPU8.buffer?[n,r]=[e.byteOffset,e.byteLength]:[n,r]=$c(e);let a=0,i=0,o=0,u=[],l=[],c=[];try{if([i,u]=Lt(t),t?.externalData&&s.mountExternalData){let e=[];for(let n of t.externalData){let t="string"==typeof n?n:n.path;e.push(jt("string"==typeof n?n:n.data).then((e=>{s.mountExternalData(t,e)})))}await Promise.all(e)}for(let e of t?.executionProviders??[])if("webnn"===("string"==typeof e?e:e.name)){if(s.currentContext)throw new Error("WebNN execution provider is already set.");if("string"!=typeof e){let t=e,n=t?.context,r=t?.gpuDevice,a=t?.deviceType,i=t?.numThreads,o=t?.powerPreference;s.currentContext=n||(r?await navigator.ml.createContext(r):await navigator.ml.createContext({deviceType:a,numThreads:i,powerPreference:o}))}else s.currentContext=await navigator.ml.createContext();break}a=await s._OrtCreateSession(n,r,i),0===a&&At("Can't create a session."),s.currentContext&&(s.currentContext=void 0);let[e,h]=vc(a),d=!!t?.enableGraphCapture,p=[],f=[],m=[];for(let t=0;t<e;t++){let e=s._OrtGetInputName(a,t);0===e&&At("Can't get an input name."),l.push(e),p.push(s.UTF8ToString(e))}for(let e=0;e<h;e++){let n=s._OrtGetOutputName(a,e);0===n&&At("Can't get an output name."),c.push(n);let r=s.UTF8ToString(n);f.push(r);{if(d&&void 0===t?.preferredOutputLocation){m.push("gpu-buffer");continue}let e="string"==typeof t?.preferredOutputLocation?t.preferredOutputLocation:t?.preferredOutputLocation?.[r]??"cpu";if("cpu"!==e&&"cpu-pinned"!==e&&"gpu-buffer"!==e)throw new Error(`Not supported preferred output location: ${e}.`);if(d&&"gpu-buffer"!==e)throw new Error(`Not supported preferred output location: ${e}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);m.push(e)}}let g=null;return m.some((e=>"gpu-buffer"===e))&&(o=s._OrtCreateBinding(a),0===o&&At("Can't create IO binding."),g={handle:o,outputPreferredLocations:m,outputPreferredLocationsEncoded:m.map((e=>Ht(e)))}),wc.set(a,[a,l,c,g,d,!1]),[a,p,f]}catch(e){throw l.forEach((e=>s._OrtFree(e))),c.forEach((e=>s._OrtFree(e))),0!==o&&s._OrtReleaseBinding(o),0!==a&&s._OrtReleaseSession(a),e}finally{s._free(n),0!==i&&s._OrtReleaseSessionOptions(i),u.forEach((e=>s._free(e))),s.unmountExternalData?.()}},Ic=e=>{let t=Et(),n=wc.get(e);if(!n)throw new Error(`cannot release session. invalid session id: ${e}`);let[r,s,a,i,o]=n;i&&(o&&t._OrtClearBoundOutputs(i.handle),t._OrtReleaseBinding(i.handle)),t.jsepOnReleaseSession?.(e),s.forEach((e=>t._OrtFree(e))),a.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(r),wc.delete(e)},Sc=(e,t,n,r,s,a=!1)=>{if(!e)return void t.push(0);let i,o,u=Et(),l=e[0],c=e[1],h=e[3];if("string"===l&&"gpu-buffer"===h)throw new Error("String tensor is not supported on GPU.");if(a&&"gpu-buffer"!==h)throw new Error(`External buffer must be provided for input/output index ${s} when enableGraphCapture is true.`);if("gpu-buffer"===h){let t=e[2].gpuBuffer,n=Wt(Bt(l));o=c.reduce(((e,t)=>e*t),1)*n;let a=u.jsepRegisterBuffer;if(!a)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');i=a(r,s,t,o)}else{let t=e[2];if(Array.isArray(t)){o=4*t.length,i=u._malloc(o),n.push(i);let e=i/4;for(let r=0;r<t.length;r++){if("string"!=typeof t[r])throw new TypeError(`tensor data at index ${r} is not a string`);u.HEAPU32[e++]=Nt(t[r],n)}}else o=t.byteLength,i=u._malloc(o),n.push(i),u.HEAPU8.set(new Uint8Array(t.buffer,t.byteOffset,o),i)}let d=u.stackSave(),p=u.stackAlloc(4*c.length);try{let e=p/4;c.forEach((t=>u.HEAP32[e++]=t));let n=u._OrtCreateTensor(Bt(l),i,o,p,c.length,Ht(h));0===n&&At(`Can't create tensor for input/output. session=${r}, index=${s}.`),t.push(n)}finally{u.stackRestore(d)}},_c=async(e,t,n,r,s,a)=>{let i=Et(),o=wc.get(e);if(!o)throw new Error(`cannot run inference. invalid session id: ${e}`);let u=o[0],l=o[1],c=o[2],h=o[3],d=o[4],p=o[5],f=t.length,m=r.length,g=0,b=[],y=[],x=[],w=[],v=i.stackSave(),$=i.stackAlloc(4*f),k=i.stackAlloc(4*f),I=i.stackAlloc(4*m),S=i.stackAlloc(4*m);try{[g,b]=Dt(a);for(let r=0;r<f;r++)Sc(n[r],y,w,e,t[r],d);for(let t=0;t<m;t++)Sc(s[t],x,w,e,f+r[t],d);let o,v=$/4,_=k/4,C=I/4,T=S/4;for(let e=0;e<f;e++)i.HEAPU32[v++]=y[e],i.HEAPU32[_++]=l[t[e]];for(let e=0;e<m;e++)i.HEAPU32[C++]=x[e],i.HEAPU32[T++]=c[r[e]];if(h&&!p){let{handle:n,outputPreferredLocations:a,outputPreferredLocationsEncoded:o}=h;if(l.length!==f)throw new Error(`input count from feeds (${f}) is expected to be always equal to model's input count (${l.length}).`);for(let r=0;r<f;r++){let s=t[r];0!==await i._OrtBindInput(n,l[s],y[r])&&At(`Can't bind input[${r}] for session=${e}.`)}for(let t=0;t<m;t++){let u=r[t];s[t]?.[3]?0!==i._OrtBindOutput(n,c[u],x[t],0)&&At(`Can't bind pre-allocated output[${t}] for session=${e}.`):0!==i._OrtBindOutput(n,c[u],0,o[u])&&At(`Can't bind output[${t}] to ${a[t]} for session=${e}.`)}wc.set(e,[u,l,c,h,d,!0])}i.jsepOnRunStart?.(u),o=h?await i._OrtRunWithBinding(u,h.handle,m,I,g):await i._OrtRun(u,k,$,f,S,m,I,g),0!==o&&At("failed to call OrtRun().");let E=[];for(let e=0;e<m;e++){let t=i.HEAPU32[I/4+e];if(t===x[e]){E.push(s[e]);continue}let n,a=i.stackSave(),o=i.stackAlloc(16),u=!1,l=0;try{0!==i._OrtGetTensorData(t,o,o+4,o+8,o+12)&&At(`Can't access output tensor data on index ${e}.`);let s=o/4,a=i.HEAPU32[s++];l=i.HEAPU32[s++];let c=i.HEAPU32[s++],d=i.HEAPU32[s++],p=[];for(let e=0;e<d;e++)p.push(i.HEAPU32[c/4+e]);i._OrtFree(c);let f=p.reduce(((e,t)=>e*t),1);n=Pt(a);let m=h?.outputPreferredLocations[r[e]];if("string"===n){if("gpu-buffer"===m)throw new Error("String tensor is not supported on GPU.");let e=[],t=l/4;for(let n=0;n<f;n++){let r=i.HEAPU32[t++],s=n===f-1?void 0:i.HEAPU32[t]-r;e.push(i.UTF8ToString(r,s))}E.push([n,p,e,"cpu"])}else if("gpu-buffer"===m&&f>0){let e=i.jsepGetBuffer;if(!e)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let r=e(l),s=Wt(a);if(void 0===s||!Gt(n))throw new Error(`Unsupported data type: ${n}`);u=!0,E.push([n,p,{gpuBuffer:r,download:i.jsepCreateDownloader(r,f*s,n),dispose:()=>{i._OrtReleaseTensor(t)}},"gpu-buffer"])}else{let e=new(Ut(n))(f);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(i.HEAPU8.subarray(l,l+e.byteLength)),E.push([n,p,e,"cpu"])}}finally{i.stackRestore(a),"string"===n&&l&&i._free(l),u||i._OrtReleaseTensor(t)}}return h&&!d&&(i._OrtClearBoundOutputs(h.handle),wc.set(e,[u,l,c,h,d,!1])),E}finally{i.stackRestore(v),y.forEach((e=>i._OrtReleaseTensor(e))),x.forEach((e=>i._OrtReleaseTensor(e))),w.forEach((e=>i._free(e))),0!==g&&i._OrtReleaseRunOptions(g),b.forEach((e=>i._free(e)))}},Cc=e=>{let t=Et(),n=wc.get(e);if(!n)throw new Error("invalid session id");let r=n[0],s=t._OrtEndProfiling(r);0===s&&At("Can't get an profile file name."),t._OrtFree(s)},Tc=e=>{let t=[];for(let n of e){let e=n[2];!Array.isArray(e)&&"buffer"in e&&t.push(e.buffer)}return t}})),eh=Oe((()=>{rt(),Qc(),sl(),rl(),Ec=()=>!!ae.wasm.proxy&&typeof document<"u",Rc=!1,Ac=!1,Dc=!1,zc=new Map,Mc=(e,t)=>{let n=zc.get(e);n?n.push(t):zc.set(e,[t])},Lc=()=>{if(Rc||!Ac||Dc||!Nc)throw new Error("worker not ready")},Bc=e=>{switch(e.data.type){case"init-wasm":Rc=!1,e.data.err?(Dc=!0,Fc[1](e.data.err)):(Ac=!0,Fc[0]()),Oc&&(URL.revokeObjectURL(Oc),Oc=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=zc.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}}},Pc=async()=>{if(!Ac){if(Rc)throw new Error("multiple calls to 'initWasm()' detected.");if(Dc)throw new Error("previous call to 'initWasm()' failed.");if(Rc=!0,Ec())return new Promise(((e,t)=>{Nc?.terminate(),xt().then((([n,r])=>{try{(Nc=r).onerror=e=>t(e),Nc.onmessage=Bc,Fc=[e,t];let s={type:"init-wasm",in:ae};Nc.postMessage(s),Oc=n}catch(e){t(e)}}),t)}));try{await Tt(ae.wasm),await yc(ae),Ac=!0}catch(e){throw Dc=!0,e}finally{Rc=!1}}},Wc=async e=>{if(Ec())return Lc(),new Promise(((t,n)=>{Mc("init-ep",[t,n]);let r={type:"init-ep",in:{epName:e,env:ae}};Nc.postMessage(r)}));await xc(ae,e)},Uc=async e=>Ec()?(Lc(),new Promise(((t,n)=>{Mc("copy-from",[t,n]);let r={type:"copy-from",in:{buffer:e}};Nc.postMessage(r,[e.buffer])}))):$c(e),Vc=async(e,t)=>{if(Ec()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Lc(),new Promise(((n,r)=>{Mc("create",[n,r]);let s={type:"create",in:{model:e,options:{...t}}},a=[];e instanceof Uint8Array&&a.push(e.buffer),Nc.postMessage(s,a)}))}return kc(e,t)},Gc=async e=>{if(Ec())return Lc(),new Promise(((t,n)=>{Mc("release",[t,n]);let r={type:"release",in:e};Nc.postMessage(r)}));Ic(e)},Hc=async(e,t,n,r,s,a)=>{if(Ec()){if(n.some((e=>"cpu"!==e[3])))throw new Error("input tensor on GPU is not supported for proxy.");if(s.some((e=>e)))throw new Error("pre-allocated output tensor is not supported for proxy.");return Lc(),new Promise(((s,i)=>{Mc("run",[s,i]);let o=n,u={type:"run",in:{sessionId:e,inputIndices:t,inputs:o,outputIndices:r,options:a}};Nc.postMessage(u,Tc(o))}))}return _c(e,t,n,r,s,a)},jc=async e=>{if(Ec())return Lc(),new Promise(((t,n)=>{Mc("end-profiling",[t,n]);let r={type:"end-profiling",in:e};Nc.postMessage(r)}));Cc(e)}})),th=Oe((()=>{rt(),eh(),ul(),st(),ll(),qc=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},Kc=e=>{switch(e[3]){case"cpu":return new we(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!Gt(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:n,download:r,dispose:s}=e[2];return we.fromGpuBuffer(n,{dataType:t,dims:e[1],download:r,dispose:s})}default:throw new Error(`invalid data location: ${e[3]}`)}},Xc=class{async fetchModelAndCopyToWasmMemory(e){return Uc(await jt(e))}async loadModel(e,t){let n;ke(),n="string"==typeof e?await this.fetchModelAndCopyToWasmMemory(e):e,[this.sessionId,this.inputNames,this.outputNames]=await Vc(n,t),Ie()}async dispose(){return Gc(this.sessionId)}async run(e,t,n){ke();let r=[],s=[];Object.entries(e).forEach((e=>{let t=e[0],n=e[1],a=this.inputNames.indexOf(t);if(-1===a)throw new Error(`invalid input '${t}'`);r.push(n),s.push(a)}));let a=[],i=[];Object.entries(t).forEach((e=>{let t=e[0],n=e[1],r=this.outputNames.indexOf(t);if(-1===r)throw new Error(`invalid output '${t}'`);a.push(n),i.push(r)}));let o=r.map(((e,t)=>qc(e,(()=>`input "${this.inputNames[s[t]]}"`)))),u=a.map(((e,t)=>e?qc(e,(()=>`output "${this.outputNames[i[t]]}"`)):null)),l=await Hc(this.sessionId,s,o,i,u,n),c={};for(let e=0;e<l.length;e++)c[this.outputNames[i[e]]]=a[e]??Kc(l[e]);return Ie(),c}startProfiling(){}endProfiling(){jc(this.sessionId)}}})),nh=Oe((()=>{rt(),eh(),th(),rl(),Yc=()=>{if(("number"!=typeof ae.wasm.initTimeout||ae.wasm.initTimeout<0)&&(ae.wasm.initTimeout=0),!1===ae.wasm.simd&&console.warn('Deprecated property "env.wasm.simd" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'),"boolean"!=typeof ae.wasm.proxy&&(ae.wasm.proxy=!1),"boolean"!=typeof ae.wasm.trace&&(ae.wasm.trace=!1),"number"!=typeof ae.wasm.numThreads||!Number.isInteger(ae.wasm.numThreads)||ae.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)ae.wasm.numThreads=1;else{let e=typeof navigator>"u"?De("node:os").cpus().length:navigator.hardwareConcurrency;ae.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},Zc=class{async init(e){Yc(),await Pc(),await Wc(e)}async createInferenceSessionHandler(e,t){let n=new Xc;return await n.loadModel(e,t),Promise.resolve(n)}}})),rh={};Fe(rh,{wasmBackend:()=>sh});var sh,ah=Oe((()=>{nh(),sh=new Zc}));rt(),rt(),rt();{let e=(ah(),ze(rh)).wasmBackend;Q("webgpu",e,5),Q("webnn",e,5),Q("cpu",e,10),Q("wasm",e,10)}Object.defineProperty(ae.versions,"web",{value:"1.19.0-dev.20240801-4b8f6dcbb6",enumerable:!0});class ih{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class oh{refCount(e){return uh("refCount")}incRef(e){return uh("incRef")}timerAvailable(){return!0}time(e){return uh("time")}read(e){return uh("read")}readSync(e){return uh("readSync")}readToGPU(e,t){return uh("readToGPU")}numDataIds(){return uh("numDataIds")}disposeData(e,t){return uh("disposeData")}write(e,t,n){return uh("write")}move(e,t,n,r,s){return uh("move")}createTensorFromGPUData(e,t,n){return uh("createTensorFromGPUData")}memory(){return uh("memory")}floatPrecision(){return uh("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return uh("dispose")}}function uh(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function lh(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,dh(e,t,n)}function ch(e,t,n){return Math.max(e,Math.min(t,n))}function hh(e){return e%2==0?e:e+1}function dh(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function ph(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function fh(e,t,n=""){ph(bh(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function mh(e){ph(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function gh(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function bh(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function yh(e){return e%1==0}function xh(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function wh(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function vh(e,t=e=>0,n,r){return new Promise(((s,a)=>{let i=0;const o=()=>{if(e())return void s();i++;const u=t(i);null!=n&&i>=n?a():null!=r?r(o,u):setTimeout(o,u)};o()}))}function $h(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function kh(e,t){const n=t.length;return ph((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),ph(e.every((e=>yh(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function Ih(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:kh(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function Sh(e,t){return _h(e,t)}function _h(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function Ch(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function Th(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function Eh(e){return"string"==typeof e||e instanceof String}function Nh(e){return"number"==typeof e}function Rh(e){return Array.isArray(e)?Rh(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":Nh(e)?"float32":Eh(e)?"string":"boolean"==typeof e?"bool":"float32"}function Ah(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Dh(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function Oh(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Fh(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=Fh(e+t*o,i,n,r)}return s}function zh(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Fh(0,e,t,n)}function Mh(e,t){const n=Lh(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Lh(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Bh(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return zh(e,new Float32Array(n));if("int32"===t)return zh(e,new Int32Array(n));if("bool"===t)return zh(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function Ph(e){e.forEach((t=>{ph(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Wh(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function Uh(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function Vh(e){return e&&e.then&&"function"==typeof e.then}const Gh="tfjsflags";class Hh{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=jh,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(qh().getBool("IS_TEST")||qh().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];qh().getBool("IS_TEST")||qh().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Vh(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);Gh in e&&e[Gh].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){const n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)}))}}function jh(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function qh(){return Xh}let Kh,Xh=null;function Yh(){if(null==Kh){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Kh=e}return Kh}function Zh(e,t){const n=function(){const e=Yh();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const Jh="Abs",Qh="Acos",ed="Acosh",td="Add",nd="AddN",rd="All",sd="Any",ad="ArgMax",id="ArgMin",od="Asin",ud="Asinh",ld="Atan",cd="Atanh",hd="Atan2",dd="AvgPool",pd="AvgPoolGrad",fd="AvgPool3D",md="AvgPool3DGrad",gd="BatchMatMul",bd="BatchToSpaceND",yd="Bincount",xd="BitwiseAnd",wd="BroadcastArgs",vd="Cast",$d="Ceil",kd="ClipByValue",Id="Complex",Sd="ComplexAbs",_d="Concat",Cd="Conv2D",Td="Conv2DBackpropFilter",Ed="Conv2DBackpropInput",Nd="Conv3D",Rd="Conv3DBackpropFilterV2",Ad="Conv3DBackpropInputV2",Dd="Cos",Od="Cosh",Fd="Cumprod",zd="Cumsum",Md="CropAndResize",Ld="DenseBincount",Bd="DepthToSpace",Pd="DepthwiseConv2dNative",Wd="DepthwiseConv2dNativeBackpropFilter",Ud="DepthwiseConv2dNativeBackpropInput",Vd="Diag",Gd="Dilation2D",Hd="Dilation2DBackpropInput",jd="Dilation2DBackpropFilter",qd="RealDiv",Kd="Einsum",Xd="Elu",Yd="EluGrad",Zd="Erf",Jd="Equal",Qd="Exp",ep="ExpandDims",tp="Expm1",np="FFT",rp="Fill",sp="FlipLeftRight",ap="Floor",ip="FloorDiv",op="FusedBatchNorm",up="GatherV2",lp="GatherNd",cp="Greater",hp="GreaterEqual",dp="Identity",pp="IFFT",fp="Imag",mp="IsFinite",gp="IsInf",bp="IsNan",yp="LeakyRelu",xp="Less",wp="LessEqual",vp="LinSpace",$p="Log",kp="Log1p",Ip="LogicalAnd",Sp="LogicalNot",_p="LogicalOr",Cp="LRN",Tp="LRNGrad",Ep="Max",Np="Maximum",Rp="MaxPool",Ap="MaxPoolGrad",Dp="MaxPool3D",Op="MaxPool3DGrad",Fp="MaxPoolWithArgmax",zp="Mean",Mp="Min",Lp="Minimum",Bp="MirrorPad",Pp="Mod",Wp="Multinomial",Up="Multiply",Vp="Neg",Gp="NotEqual",Hp="NonMaxSuppressionV3",jp="NonMaxSuppressionV4",qp="NonMaxSuppressionV5",Kp="OnesLike",Xp="OneHot",Yp="Pack",Zp="PadV2",Jp="Pow",Qp="Prelu",ef="Prod",tf="RaggedGather",nf="RaggedRange",rf="RaggedTensorToTensor",sf="Range",af="Real",of="Reciprocal",uf="Relu",lf="Reshape",cf="ResizeNearestNeighbor",hf="ResizeNearestNeighborGrad",df="ResizeBilinear",pf="ResizeBilinearGrad",ff="Relu6",mf="Reverse",gf="Round",bf="Rsqrt",yf="ScatterNd",xf="TensorScatterUpdate",wf="SearchSorted",vf="Select",$f="Selu",kf="Slice",If="Sin",Sf="Sinh",_f="Sign",Cf="Sigmoid",Tf="Softplus",Ef="Sqrt",Nf="Sum",Rf="SpaceToBatchND",Af="SplitV",Df="Softmax",Of="SparseFillEmptyRows",Ff="SparseReshape",zf="SparseSegmentMean",Mf="SparseSegmentSum",Lf="SparseToDense",Bf="SquaredDifference",Pf="Square",Wf="StaticRegexReplace",Uf="StridedSlice",Vf="StringNGrams",Gf="StringSplit",Hf="StringToHashBucketFast",jf="Sub",qf="Tan",Kf="Tanh",Xf="Tile",Yf="TopK",Zf="Transform",Jf="Transpose",Qf="Unique",em="Unpack",tm="UnsortedSegmentSum",nm="ZerosLike",rm="Step",sm="RotateWithOffset",am="_FusedMatMul",im="FusedConv2D",om="FusedDepthwiseConv2D";function um(...e){qh().getBool("IS_TEST")||qh().getBool("PROD")||console.warn(...e)}function lm(...e){qh().getBool("IS_TEST")||qh().getBool("PROD")||console.log(...e)}const cm=Zh("kernelRegistry",(()=>new Map)),hm=Zh("gradRegistry",(()=>new Map));function dm(e,t){const n=bm(e,t);return cm.get(n)}function pm(e){return hm.get(e)}function fm(e){const t=cm.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===e&&n.push(i)}return n}function mm(e){const{kernelName:t,backendName:n}=e,r=bm(t,n);cm.has(r)&&um(`The kernel '${t}' for backend '${n}' is already registered`),cm.set(r,e)}function gm(e){const{kernelName:t}=e;hm.has(t)&&qh().getBool("DEBUG")&&um(`Overriding the gradient for '${t}'`),hm.set(t,e)}function bm(e,t){return`${t}_${e}`}function ym(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}var xm=n(570);const wm=n.n(xm)()||xm;function vm(e){return wm.fromString(e,!0,16)}const $m=vm("c3a5c85c97cb3127"),km=vm("b492b66fbe98f273"),Im=vm("9ae16a3b2f90404f");function Sm(e){return e.xor(e.shru(47))}function _m(e,t,n){const r=e.slice(t,t+n);return wm.fromBytes(Array.from(r),!0,!0)}function Cm(e,t){return _m(e,t,8)}function Tm(e,t){return _m(e,t,4)}function Em(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Nm(e,t,n=vm("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function Rm(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=Em(a.add(s).add(r),21);const i=s;return s=(s=s.add(t)).add(n),a=a.add(Em(s,44)),[s.add(r),a.add(i)]}(Cm(e,t),Cm(e,t+8),Cm(e,t+16),Cm(e,t+24),n,r)}function Am(e,t=e.length){const n=wm.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Im.add(2*t),r=Cm(e,0).add(Im),s=Cm(e,t-8);return Nm(Em(s,37).mul(n).add(r),Em(r,25).add(s).mul(n),n)}if(t>=4){const n=Im.add(2*t);return Nm(Tm(e,0).shl(3).add(t),Tm(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return Sm(Im.mul(n).xor($m.mul(r))).mul(Im)}return Im}(e,t):function(e,t=e.length){const n=Im.add(2*t),r=Cm(e,0).mul(km),s=Cm(e,8),a=Cm(e,t-8).mul(n),i=Cm(e,t-16).mul(Im);return Nm(Em(r.add(s),43).add(Em(a,30)).add(i),r.add(Em(s.add(Im),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Im.add(2*t),r=Cm(e,0).mul(Im),s=Cm(e,8),a=Cm(e,t-8).mul(n),i=Cm(e,t-16).mul(Im),o=Em(r.add(s),43).add(Em(a,30)).add(i),u=Nm(o,r.add(Em(s.add(Im),18)).add(a),n),l=Cm(e,16).mul(n),c=Cm(e,24),h=o.add(Cm(e,t-32)).mul(n),d=u.add(Cm(e,t-24)).mul(n);return Nm(Em(l.add(c),43).add(Em(h,30)).add(d),l.add(Em(c.add(r),18)).add(h),n)}(e,t);let r=n,s=n.mul(km).add(113),a=Sm(s.mul(Im).add(113)).mul(Im),i=[wm.UZERO,wm.UZERO],o=[wm.UZERO,wm.UZERO];r=r.mul(Im).add(Cm(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=Em(r.add(s).add(i[0]).add(Cm(e,u+8)),37).mul(km),s=Em(s.add(i[1]).add(Cm(e,u+48)),42).mul(km),r=r.xor(o[1]),s=s.add(i[0]).add(Cm(e,u+40)),a=Em(a.add(o[0]),33).mul(km),i=Rm(e,u,i[1].mul(km),r.add(o[0])),o=Rm(e,u+32,a.add(o[1]),s.add(Cm(e,u+16))),[a,r]=[r,a],u+=64}while(u!==l);const h=km.add(a.and(255).shl(1));return u=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),r=Em(r.add(s).add(i[0]).add(Cm(e,u+8)),37).mul(h),s=Em(s.add(i[1]).add(Cm(e,u+48)),42).mul(h),r=r.xor(o[1].mul(9)),s=s.add(i[0].mul(9).add(Cm(e,u+40))),a=Em(a.add(o[0]),33).mul(h),i=Rm(e,u,i[1].mul(h),r.add(o[0])),o=Rm(e,u+32,a.add(o[1]),s.add(Cm(e,u+16))),[a,r]=[r,a],Nm(Nm(i[0],o[0],h).add(Sm(s).mul($m)).add(a),Nm(i[1],o[1],h).add(r),h)}function Dm(e,t){return"string"===t?zm(e):Om([e],t)}function Om(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=Bm(e)),qh().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Fm(){return qh().platform.now()}function zm(e,t="utf-8"){return t=t||"utf-8",qh().platform.encode(e,t)}function Mm(e,t="utf-8"){return t=t||"utf-8",qh().platform.decode(e,t)}function Lm(e){return null!=qh().platform.isTypedArray?qh().platform.isTypedArray(e):ym(e)}function Bm(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||Vh(e)||null==e||Lm(e)&&n)t.push(e);else if(Array.isArray(e)||Lm(e))for(let r=0;r<e.length;++r)Bm(e[r],t,n);else{let r=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(r=Math.max(r,Number(t)));for(let s=0;s<=r;s++)Bm(e[s],t,n)}return t}class Pm{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Um)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const i=Fm();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:Fm()-i})}if(qh().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{Wm(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function Wm(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Um{logKernelProfile(e,t,n,r,s,a){const i="number"==typeof r?wh(`${r}ms`,9):r.error,o=wh(e,25),u=t.rank,l=t.size,c=wh(t.shape.toString(),14);let h="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;h+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${o}\t%c${i}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const Vm=20,Gm=3,Hm=7;function jm(e,t,n,r){const s=Oh(t),a=function(e,t,n,r){const s=gh(t),a=r[r.length-1],i=new Array(a).fill(0),o=t.length,u="complex64"===n?Ym(e):e;if(o>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],qm(u[t+e],0,n).length)}return i}(e,t,n,s),i=t.length,o=Xm(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${i}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(o.map((e=>"    "+e)).join("\n")),u.join("\n")}function qm(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(Hm))} + ${parseFloat(e[1].toFixed(Hm))}j`:Eh(e)?`'${e}'`:"bool"===n?Km(e):parseFloat(e.toFixed(Hm)).toString(),wh(r,t)}function Km(e){return 0===e?"false":"true"}function Xm(e,t,n,r,s,a=!0){const i="complex64"===n?2:1,o=t[0],u=t.length;if(0===u)return"complex64"===n?[qm(Ym(e)[0],0,n)]:"bool"===n?[Km(e[0])]:[e[0].toString()];if(1===u){if(o>Vm){const t=Gm*i;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-Gm)*i,o*i));return"complex64"===n&&(r=Ym(r),a=Ym(a)),["["+r.map(((e,t)=>qm(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>qm(e,s[o-Gm+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Ym(e):Array.from(e)).map(((e,t)=>qm(e,s[t],n))).join(", ")+"]"]}const l=t.slice(1),c=r.slice(1),h=r[0]*i,d=[];if(o>Vm){for(let t=0;t<Gm;t++){const r=t*h,a=r+h;d.push(...Xm(e.slice(r,a),l,n,c,s,!1))}d.push("...");for(let t=o-Gm;t<o;t++){const r=t*h,a=r+h;d.push(...Xm(e.slice(r,a),l,n,c,s,t===o-1))}}else for(let t=0;t<o;t++){const r=t*h,a=r+h;d.push(...Xm(e.slice(r,a),l,n,c,s,t===o-1))}const p=2===u?",":"";d[0]="["+(o>0?d[0]+p:"");for(let e=1;e<d.length-1;e++)d[e]=" "+d[e]+p;let f=",\n";for(let e=2;e<u;e++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(a?"":f),d}function Ym(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Zm{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=gh(e),null!=n){const e=n.length;ph(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||_h(t,this.size),this.strides=Oh(e)}set(e,...t){0===t.length&&(t=[0]),ph(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Jm().makeTensor(this.values,this.shape,this.dtype)}}let Jm=null,Qm=null,eg=null;class tg{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=gh(e),this.strides=Oh(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Qm.buffer(this.shape,this.dtype,e)}bufferSync(){return Qm.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return zh(this.shape,e,"complex64"===this.dtype)}arraySync(){return zh(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Jm().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Mm(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Jm().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Jm().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Mm(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Jm().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),Jm().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Qm.print(this,e)}clone(){return this.throwIfDisposed(),Qm.clone(this)}toString(e=!1){return jm(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Qm.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Jm().makeVariable(this,e,t,n)}}function ng(){return Zh("Tensor",(()=>tg))}Object.defineProperty(tg,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),ng();class rg extends tg{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!bh(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Jm().disposeTensor(this),this.dataId=e.dataId,Jm().incRef(this,null)}dispose(){Jm().disposeVariable(this),this.isDisposedInternal=!0}}var sg,ag,ig,og,ug;Object.defineProperty(rg,Symbol.hasInstance,{value:e=>e instanceof tg&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(sg||(sg={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(ag||(ag={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(ig||(ig={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(og||(og={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(ug||(ug={}));const lg={float32:og,int32:ag,bool:ig,complex64:ug};function cg(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return lg[e][t]}function hg(e){return cg(e,"int32")}function dg(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function pg(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function fg(e,t){if(e.dtype===t.dtype)return[e,t];const n=cg(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function mg(e,t){return t.some((t=>t.id===e.id))}function gg(e){const t=[];return bg(e,t,new Set),t}function bg(e,t,n){if(null==e)return;if(e instanceof tg)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),bg(r,t,n))}}function yg(e){return null!=e.kernelName}class xg{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class wg{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new xg}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(um(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Pm(this.backendInstance),!0}setupRegisteredKernels(){fm(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){fm(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof oh||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,um(`Initialization of backend ${e} failed`),um(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return um(`Initialization of backend ${e} failed`),um(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return wg.nextTensorId++}nextVariableId(){return wg.nextVariableId++}clone(e){const t=$g.runKernel(dp,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return $g.runKernel(vd,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==dm(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-t-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=yg(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(yg(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const u=dm(t,this.backendName);ph(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const l=i.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,h=yg(e)?null:e.backwardsFunc;let d;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(u,l,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=i()})),r&&this.addTapeNode(u,l,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map((e=>null!=l[e]?l[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=pm(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(ph(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>s[t]));return a.concat(i)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&Eh(e[0])&&(s=e.map((e=>zm(e))));const a=r.write(s,t,n),i=new tg(t,n,a,this.nextTensorId());if(this.trackTensor(i,r),"string"===n){const e=this.state.tensorInfo.get(a),t=function(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new tg(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new rg(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*Th(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof rg||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*Th(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},o=pm(e);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=Lh(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=gg(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(ph(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));ph(s instanceof tg,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=Mh(gh(e),"float32");return $g.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const s=n((()=>o[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[t];if(!bh(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=s;else{const t=e[i.id];e[i.id]=r(t,s),t.dispose()}}}}(e,a,(e=>this.tidy(e)),kg);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return ph(Ah(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;ph(t.every((e=>e instanceof tg)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return t.forEach(((e,t)=>{r[t]=e})),this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),ph(n.value instanceof tg,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),ph(Ah(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];ph(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),ph(a.every((e=>e instanceof tg)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Fm(),n=await this.backend.time(e);return n.wallMs=Fm()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new xg;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function vg(){const e=Yh();if(null==e._tfengine){const t=new Hh(e);e._tfengine=new wg(t)}var t;return t=e._tfengine.ENV,Xh=t,Jm=()=>e._tfengine,e._tfengine}wg.nextTensorId=0,wg.nextVariableId=0;const $g=vg();function kg(e,t){const n={a:e,b:t};return $g.runKernel(td,n)}function Ig(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Sg(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const _g=qh();function Cg(e,t){let n=e;if(Lm(e))return"string"===t?[]:[e.length];if(dg(e)){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(pg(e))return[e.buffer.size/(null==t?4:Th(t))];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||Lm(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&qh().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Tg(e,r,[]),r}function Tg(e,t,n){if(n=n||[],!Array.isArray(e)&&!Lm(e))return void ph(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));ph(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),ph(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)Tg(e[t],r,n.concat(t))}function Eg(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function Ng(e,t,n,r="numeric"){if(e instanceof ng())return Eg(r,e.dtype,t,n),e;let s=Rh(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Eg(r,s,t,n),null==e||!Lm(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=Cg(e,s);Lm(e)||Array.isArray(e)||(e=[e]);const i="string"!==s?Om(e,s):Bm(e,[],!0);return $g.makeTensor(i,a,s)}function Rg(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>Ng(e,`${t}[${s}]`,n,r)))}function Ag(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...e)=>{$g.startScope(n);try{const t=r(...e);return Vh(t)&&console.error("Cannot return a Promise inside of tidy."),$g.endScope(t),t}catch(e){throw $g.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}_g.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),_g.registerFlag("IS_BROWSER",(()=>Sg())),_g.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),_g.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),_g.registerFlag("IS_SAFARI",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor))),_g.registerFlag("PROD",(()=>!1)),_g.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>_g.getBool("DEBUG"))),_g.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),_g.registerFlag("IS_TEST",(()=>!1)),_g.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>_g.getBool("DEBUG"))),_g.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),_g.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),_g.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const Dg=Ag({complex_:function(e,t){const n=Ng(e,"real","complex"),r=Ng(t,"imag","complex");fh(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return $g.runKernel(Id,s)}});function Og(e,t,n,r){if(null==r)r=Rh(e);else if("complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(pg(e)||dg(e)){if("float32"!==r&&"int32"!==r)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${r}.`);return $g.backend.createTensorFromGPUData(e,t||n,r)}if(!Lm(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Ph(t);const e=gh(t),r=gh(n);ph(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==gh(t.slice(e));ph(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return Lm(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?Om(e,r):Bm(e,[],!0),$g.makeTensor(e,t,r)}function Fg(e,t,n){return Og(e,t,Cg(e,n),n)}class zg{static join(e){return new zg(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e)return;if(e instanceof Array||(e=[e]),0===(e=e.map((e=>Lm(e)?e.buffer:e))).length)return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){const r=e[n];n!==e.length-1&&r.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const s=t+r.byteLength;this.shards.push({buffer:r,start:t,end:s}),t=s}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e)return new ArrayBuffer(0);const n=this.findShardForByte(e);if(-1===n)throw new Error(`Could not find start shard for byte ${e}`);const r=new ArrayBuffer(t-e),s=new Uint8Array(r);let a=0;for(let r=n;r<this.shards.length;r++){const n=this.shards[r],i=e+a-n.start,o=a,u=Math.min(t,n.end)-n.start,l=new Uint8Array(n.buffer,i,u-i);if(s.set(l,o),a+=l.length,t<n.end)break}return r}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(e,t){let n=0,r=e.length;for(;n<=r;){const s=Math.floor((r-n)/2)+n,a=t(e[s]);if(0===a)return s;a<0?r=s:n=s+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}function Mg(){return $g}function Lg(){return $g.memory()}function Bg(e,t){return $g.tidy(e,t)}function Pg(e){gg(e).forEach((e=>e.dispose()))}function Wg(e){return $g.keep(e)}function Ug(e,t,n=1){return $g.registerBackend(e,t,n)}eg=function(e){qh().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};async function Vg(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(o.data());null!=t&&(u.group=t),n.push(u)}return{data:Gg(await Promise.all(r)),specs:n}}function Gg(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const Hg="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function jg(e){return Hg?Buffer.byteLength(e,"utf8"):new Blob([e]).size}function qg(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Kg(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:jg(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:jg(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new zg(e.weightData).byteLength}}function Xg(e){const t=[];for(const n of e)t.push(...n.weights);return t}class Yg{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Yg.instance&&(Yg.instance=new Yg),Yg.instance}static registerSaveRouter(e){Yg.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Yg.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Yg.getHandlers(e,"save")}static getLoadHandlers(e,t){return Yg.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Yg.getInstance().loadRouters:Yg.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const Zg="tensorflowjs",Jg="models_store",Qg="model_info_store";function eb(){if(!qh().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function tb(e){const t=e.result;t.createObjectStore(Jg,{keyPath:"modelPath"}),t.createObjectStore(Qg,{keyPath:"modelPath"})}class nb{constructor(e){if(this.indexedDB=eb(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(Zg,1);r.onupgradeneeded=()=>tb(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(Jg,"readonly"),r=t.objectStore(Jg).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{t.weightData=zg.join(t.weightData);const r=Kg(t),a=s.transaction(Qg,"readwrite");let i,o,u=a.objectStore(Qg);try{i=u.put({modelPath:this.modelPath,modelArtifactsInfo:r})}catch(e){return n(e)}i.onsuccess=()=>{o=s.transaction(Jg,"readwrite");const i=o.objectStore(Jg);let l;try{l=i.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r})}catch(e){return n(e)}l.onsuccess=()=>e({modelArtifactsInfo:r}),l.onerror=e=>{u=a.objectStore(Qg);const t=u.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(l.error)),t.onerror=e=>(s.close(),n(l.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==o?s.close():o.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}nb.URL_SCHEME="indexeddb://";const rb=e=>{return qh().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(nb.URL_SCHEME)?(t=e.slice(nb.URL_SCHEME.length),new nb(t)):null;var t};Yg.registerSaveRouter(rb),Yg.registerLoadRouter(rb);class sb{constructor(){this.indexedDB=eb()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(Zg,1);n.onupgradeneeded=()=>tb(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(Qg,"readonly"),a=s.objectStore(Qg).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(nb.URL_SCHEME)?t.slice(nb.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(Zg,1);r.onupgradeneeded=()=>tb(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(Qg,"readwrite"),i=a.objectStore(Qg),o=i.get(e);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=i.delete(e),a=()=>{u=s.transaction(Jg,"readwrite");const r=u.objectStore(Jg).delete(e);r.onsuccess=()=>t(o.result.modelArtifactsInfo),r.onerror=e=>n(o.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const ab="/",ib="tensorflowjs_models",ob="info",ub="model_topology",lb="weight_specs",cb="weight_data",hb="model_metadata";function db(e){return{info:[ib,e,ob].join(ab),topology:[ib,e,ub].join(ab),weightSpecs:[ib,e,lb].join(ab),weightData:[ib,e,cb].join(ab),modelMetadata:[ib,e,hb].join(ab)}}function pb(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function fb(e){const t=e.split(ab);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(ab)}class mb{constructor(e){if(!qh().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=db(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Kg(e),s=zg.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(Hg)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(s));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw pb(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Hg){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}mb.URL_SCHEME="localstorage://";const gb=e=>{return qh().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(mb.URL_SCHEME)?(t=e.slice(mb.URL_SCHEME.length),new mb(t)):null;var t};Yg.registerSaveRouter(gb),Yg.registerLoadRouter(gb);class bb{constructor(){ph(qh().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),ph("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=ib+ab,n=ab+ob;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(t)&&s.endsWith(n)&&(e[fb(s)]=JSON.parse(this.LS.getItem(s)))}return e}async removeModel(e){var t;const n=db(e=(t=e).startsWith(mb.URL_SCHEME)?t.slice(mb.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return pb(n),r}}class yb{constructor(){this.managers={}}static getInstance(){return null==yb.instance&&(yb.instance=new yb),yb.instance}static registerManager(e,t){ph(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),ph(e.length>0,(()=>"scheme must not be an empty string."));const n=yb.getInstance();ph(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=yb.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(yb.getInstance().managers)}}class xb{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&qh().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))}),!0))):setTimeout(e,t)}isTypedArray(e){return ym(e)}}if(qh().get("IS_BROWSER")){qh().setPlatform("browser",new xb);try{yb.registerManager(mb.URL_SCHEME,new bb)}catch(e){}try{yb.registerManager(nb.URL_SCHEME,new sb)}catch(e){}}let wb;function vb(e,t="float32",n){return t=t||"float32",Ph(e),new Zm(e,t,n)}qh().get("IS_NODE")&&!qh().get("IS_BROWSER")&&qh().setPlatform("node",new class{constructor(){this.util=n(590),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=qh().global.fetch?qh().global.fetch(e,t):(null==wb&&(wb=n(817)),wb(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});const $b=Ag({cast_:function(e,t){const n=Ng(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return $g.runKernel(vd,r,s)}}),kb=Ag({clone_:function(e){const t={x:Ng(e,"x","clone","string_or_numeric")};return $g.runKernel(dp,t)}});vg(),Qm={buffer:vb,cast:$b,clone:kb,print:function(e,t=!1){console.log(e.toString(t))}};const Ib=Ag({add_:function(e,t){let n=Ng(e,"a","add"),r=Ng(t,"b","add");[n,r]=fg(n,r);const s={a:n,b:r};return $g.runKernel(td,s)}}),Sb=Ag({floorDiv_:function(e,t){let n=Ng(e,"a","floorDiv"),r=Ng(t,"b","floorDiv");[n,r]=fg(n,r);const s={a:n,b:r};return $g.runKernel(ip,s)}}),_b=Ag({div_:function(e,t){let n=Ng(e,"a","div"),r=Ng(t,"b","div");if([n,r]=fg(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Sb(n,r);const s={a:n,b:r};return $g.runKernel(qd,s,{})}}),Cb=Ag({mul_:function(e,t){let n=Ng(e,"a","mul"),r=Ng(t,"b","mul");[n,r]=fg(n,r);const s={a:n,b:r};return $g.runKernel(Up,s)}}),Tb=Ag({sqrt_:function(e){const t={x:Ng(e,"x","sqrt","float32")};return $g.runKernel(Ef,t)}}),Eb=Ag({square_:function(e){const t=Ng(e,"x","square");return $g.runKernel("Square",{x:t},{})}}),Nb=Ag({zerosLike_:function(e){const t={x:Ng(e,"x","zerosLike")};return $g.runKernel(nm,t)}});function Rb(e){return $g.customGrad(e)}function Ab(e,t){if((Lm(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Lm(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Og(e,[],[],t)}const Db=new Map,Ob=new Map;class Fb{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class zb{constructor(){this.classNameMap={}}static getMap(){return null==zb.instance&&(zb.instance=new zb),zb.instance}static register(e){zb.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Mb(e,t,n){ph(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),ph("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),ph(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),void 0===t&&(t="Custom"),void 0===n&&(n=e.className);const r=t+">"+n;return zb.register(e),Db.set(r,e),Ob.set(e,r),e}class Lb extends Fb{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:s[e.name]})));this.applyGradients(e)}else this.applyGradients(s);return Pg(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){ph(Ah(e),(()=>"The f passed in variableGrads(f) must be a function")),ph(null==t||Array.isArray(t)&&t.every((e=>e instanceof rg)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in $g.registeredVariables)t.push($g.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,s=t.length;ph((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:i}=$g.gradients(e,t,null,!0);ph(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),ph(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=r&&r.forEach((e=>o[e.name]=null)),{value:a,grads:o}}(e,t)}dispose(){null!=this.iterations_&&Pg(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Ab(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Lb,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Bb extends Lb{static get className(){return"Adadelta"}constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=$g.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=$g.registeredVariables[t],s=!1;null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:Bg((()=>Nb(r).variable(s)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:Bg((()=>Nb(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;Bg((()=>{const e=Ib(Cb(i,this.rho),Cb(Eb(a),1-this.rho)),t=Cb(_b(Tb(Ib(o,this.epsilon)),Tb(Ib(i,this.epsilon))),a),n=Ib(Cb(o,this.rho),Cb(Eb(t),1-this.rho));i.assign(e),o.assign(n);const s=Ib(Cb(t,-this.learningRate),r);r.assign(s)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Pg(this.accumulatedGrads.map((e=>e.variable))),Pg(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2,n=!1;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function Pb(e,t,n){Ph(e);const r={shape:e,value:t,dtype:n=n||Rh(t)};return $g.runKernel(rp,{},r)}class Wb extends Lb{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=$g.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:Bg((()=>Pb(r.shape,this.initialAccumulatorValue).variable(e)))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;Bg((()=>{const e=Ib(a,Eb(s));a.assign(e);const t=Ib(Cb(_b(s,Tb(Ib(e,$g.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Pg(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}const Ub=Ag({pow_:function(e,t){let n=Ng(e,"base","pow"),r=Ng(t,"exp","pow");[n,r]=fg(n,r);const s={a:n,b:r};return $g.runKernel(Jp,s)}}),Vb=Ag({sub_:function(e,t){let n=Ng(e,"a","sub"),r=Ng(t,"b","sub");[n,r]=fg(n,r);const s={a:n,b:r};return $g.runKernel(jf,s)}});class Gb extends Lb{static get className(){return"Adam"}constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Bg((()=>{this.accBeta1=Ab(t).variable(),this.accBeta2=Ab(n).variable()})),null==r&&(this.epsilon=$g.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Bg((()=>{const n=Vb(1,this.accBeta1),r=Vb(1,this.accBeta2);t.forEach(((t,s)=>{const a=$g.registeredVariables[t],i=!1;null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:Bg((()=>Nb(a).variable(i)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:Bg((()=>Nb(a).variable(i)))});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const u=this.accumulatedFirstMoment[s].variable,l=this.accumulatedSecondMoment[s].variable,c=Ib(Cb(u,this.beta1),Cb(o,1-this.beta1)),h=Ib(Cb(l,this.beta2),Cb(Eb(o),1-this.beta2)),d=_b(c,n),p=_b(h,r);u.assign(c),l.assign(h);const f=Ib(Cb(_b(d,Ib(Tb(p),this.epsilon)),-this.learningRate),a);a.assign(f)})),this.accBeta1.assign(Cb(this.accBeta1,this.beta1)),this.accBeta2.assign(Cb(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Pg(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&Pg(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),Bg((()=>{this.accBeta1.assign(Ub(this.beta1,this.iterations_+1)),this.accBeta2.assign(Ub(this.beta2,this.iterations_+1))}));const t=e.length/2,n=!1;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}const Hb=Ag({abs_:function(e){const t=Ng(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return $g.runKernel(Sd,e)}{const e={x:t};return $g.runKernel(Jh,e)}}});function jb(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=e[a]||1;(t[t.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function qb(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,i=t[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function Kb(e,t){const n=Math.max(e.length,t.length),r=new Array(n);for(let s=0;s<n;s++){let a=e[e.length-s-1];null==a&&(a=1);let i=t[t.length-s-1];if(null==i&&(i=1),1===a)r[n-s-1]=i;else if(1===i)r[n-s-1]=a;else{if(a!==i)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);r[n-s-1]=a}}return r}const Xb=Ag({maximum_:function(e,t){let n=Ng(e,"a","maximum"),r=Ng(t,"b","maximum");[n,r]=fg(n,r),"bool"===n.dtype&&(n=$b(n,"int32"),r=$b(r,"int32")),Kb(n.shape,r.shape);const s={a:n,b:r};return $g.runKernel(Np,s)}});class Yb extends Lb{static get className(){return"Adamax"}constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Bg((()=>{this.iteration=Ab(0).variable(),this.accBeta1=Ab(t).variable()})),null==r&&(this.epsilon=$g.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Bg((()=>{const n=Vb(1,this.accBeta1),r=_b(-this.learningRate,Ib(Cb(this.iteration,this.decay),1));t.forEach(((t,s)=>{const a=$g.registeredVariables[t],i=!1;null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:Nb(a).variable(i)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:Nb(a).variable(i)});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const u=this.accumulatedFirstMoment[s].variable,l=this.accumulatedWeightedInfNorm[s].variable,c=Ib(Cb(u,this.beta1),Cb(o,1-this.beta1)),h=Cb(l,this.beta2),d=Hb(o),p=Xb(h,d);u.assign(c),l.assign(p);const f=Ib(Cb(_b(r,n),_b(c,Ib(p,this.epsilon))),a);a.assign(f)})),this.iteration.assign(Ib(this.iteration,1)),this.accBeta1.assign(Cb(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Pg(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&Pg(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}class Zb extends Lb{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=$g.registeredVariables[t];Bg((()=>{const e=Ib(Cb(this.c,r),s);s.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Wg(Ab(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}class Jb extends Zb{static get className(){return"Momentum"}constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Ab(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=$g.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:Bg((()=>Nb(r).variable(e)))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Bg((()=>{let e;const t=Ib(Cb(this.m,s),a);e=this.useNesterov?Ib(Cb(this.c,Ib(a,Cb(t,this.m))),r):Ib(Cb(this.c,t),r),s.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Pg(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}class Qb extends Lb{static get className(){return"RMSProp"}constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=$g.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=$g.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:Bg((()=>Nb(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:Bg((()=>Nb(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:Bg((()=>Nb(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Bg((()=>{const e=Ib(Cb(i,this.decay),Cb(Eb(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=Ib(Cb(t,this.decay),Cb(a,1-this.decay)),u=_b(Cb(a,this.learningRate),Tb(Vb(e,Ib(Eb(s),this.epsilon)))),l=Ib(Cb(o,this.momentum),u);i.assign(e),t.assign(s),o.assign(l);const c=Vb(r,l);r.assign(c)}else{const e=Ib(Cb(i,this.decay),Cb(Eb(a),1-this.decay)),t=Ib(Cb(o,this.momentum),_b(Cb(a,this.learningRate),Tb(Ib(e,this.epsilon))));i.assign(e),o.assign(t);const n=Vb(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Pg(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Pg(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&Pg(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}const ey=[Bb,Wb,Gb,Yb,Jb,Qb,Zb];function ty(e){return new Promise((e=>setTimeout(e))).then(e)}class ny{constructor(e){if(!qh().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(ny.URL_SCHEME)&&(e=e.slice(ny.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=zg.join(e.weightData),n=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const t=qg(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(t)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await ty((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=n,await ty((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Kg(e)}}}}function ry(e,t,n,r){!function(e){ph(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){ph(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),ph(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),ph(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++s/e.length*(r-n);return t(i),a})),a))))}async function sy(e,t){null==t&&(t={});const n=null==t.fetchFunc?qh().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await ry(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await ry(s,t.onProgress,.5,1)}ny.URL_SCHEME="downloads://",Yg.registerSaveRouter((e=>qh().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ny.URL_SCHEME)?function(e="model"){return new ny(e)}(e.slice(ny.URL_SCHEME.length)):null));class ay{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(ph("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=qh().platform.fetch,ph(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&ph(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{},this.loadOptions=t}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=qg(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData){const n=zg.join(e.weightData);t.body.append("model.weights.bin",new Blob([n],{type:"application/octet-stream"}),"model.weights.bin")}const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Kg(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async loadModelJSON(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return t}async load(){return this.loadOptions.streamWeights?this.loadStream():async function(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),function(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(r.initializerSignature=e.initializerSignature),r}(e,n,r)}(await this.loadModelJSON(),(e=>this.loadWeights(e)))}async loadStream(){const e=await this.loadModelJSON(),t=await this.getWeightUrls(e.weightsManifest),n=Xg(e.weightsManifest);return Object.assign(Object.assign({},e),{weightSpecs:n,getWeightStream:()=>function(e,t){var n;const r=null==t.fetchFunc?qh().platform.fetch:t.fetchFunc;let s,a=0;return null===(n=t.onProgress)||void 0===n||n.call(t,0),new ReadableStream({pull:async n=>{for(var i;a<e.length;){if(!s){const n=(await r(e[a],t.requestInit,{isBinary:!0})).body;s=n.getReader()}const{done:o,value:u}=await s.read();if(!o)return void n.enqueue(u);a++,s=void 0,null===(i=t.onProgress)||void 0===i||i.call(t,a/e.length)}n.close()}})}(t,this.loadOptions)})}async getWeightUrls(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),s=this.weightPathPrefix||n,a=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):a.push(s+e+r);return this.weightUrlConverter&&a.push(...await Promise.all(i)),a}async loadWeights(e){const t=await this.getWeightUrls(e);return[Xg(e),await sy(t,this.loadOptions)]}}function iy(e){return null!=e.match(ay.URL_SCHEME_REGEX)}ay.URL_SCHEME_REGEX=/^https?:\/\//;const oy=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>iy(e))):iy(e),n)return function(e,t){return new ay(e,t)}(e,t)}return null};Yg.registerSaveRouter(oy),Yg.registerLoadRouter(oy);const uy=-2,ly=-1;function cy(e,t,n){const r=e.shape.length;ph(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),ph(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)ph(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function hy(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function dy(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function py(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}function fy(e,t,n){return n<=e?n:n-(t-1)}function my(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function gy(e,t,n,r,s,a,i,o,u){const l=e.length;let c=new Array(l),h=new Array(l),d=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=by(i,u,l,r,e),h=yy(o,u,l,s,e),d=py(a,u,l,e)}else for(let t=0;t<l;t++)c[t]=wy(i,r,a,e,t,u),h[t]=vy(o,s,a,e,t,u),d[t]=xy(a,t,u);return{begin:c,end:h,strides:d}}function by(e,t,n,r,s){const a=[...s],i=my(n,t);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=0;else{const i=fy(t,n,s);let o=r[i];e&1<<i&&(o=0),a[s]=o}return a}function yy(e,t,n,r,s){const a=[...s],i=my(n,t);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const i=fy(t,n,s);let o=r[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[s]=o}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=ch(0,a[e],s[e])}return a}function xy(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function wy(e,t,n,r,s,a){let i=t[s];const o=n[s]||1;(e&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=ch(0,i,u-1),i}function vy(e,t,n,r,s,a){let i=t[s];const o=n[s]||1;(e&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=o>0?ch(0,i,u):ch(-1,i,u-1),i}function $y(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function ky(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function Iy(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach((e=>{ph(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(ph(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,a]}function Sy(e,t,n,r,s,a,i,o,u){let l;if(null==r?(l=new Array(t.length),l.fill(1)):l=r,null!=i&&i&i-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};for(let e=0;e<h.dims;e++)c&&1<<e&o&&h.numAddAxisAfterEllipsis++,1<<e&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const s=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<s;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(uy),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(ly),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(h,d);let p=!0,f=!0,m=!0;const g=[],b=[];for(let t=0;t<e.length;++t){if(0===d.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(d.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const s=[d.beginMask&1<<t,d.endMask&1<<t],a=[d.strides[t]>0?0:-1,d.strides[t]>0?r:r-1];if(n&&d.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===d.strides[t];const i=!!(d.beginMask&1<<t&&d.endMask&1<<t);if(d.beginValid&&d.endValid){if(n){const e=d.begin[t]<0?r+d.begin[t]:d.begin[t];if(d.begin[t]=e,d.end[t]=d.begin[t]+1,e<0||e>=r)throw Error(`slice index ${d.begin[t]} of dimension ${t} out of bounds.`)}else d.begin[t]=_y(d.begin[t],0,d.strides[t],r,s,a),d.end[t]=_y(d.end[t],1,d.strides[t],r,s,a);const e=1===d.strides[t]&&0===d.begin[t]&&d.end[t]===r;p=p&&e,f=f&&(0===t&&1===d.strides[t]||e)}else p=p&&1===d.strides[t]&&i,f=f&&(0===t&&1===d.strides[t]||i);let o,u=!1;if(d.beginValid&&d.endValid?(o=d.end[t]-d.begin[t],u=!0):n?(o=1,u=!0):i&&r>=0&&(o=d.strides[t]<0?-r:r,u=!0),u){let e;e=0===o||o<0!=d.strides[t]<0?0:Math.trunc(o/d.strides[t])+(o%d.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<d.finalShapeGatherIndices.length;++e){const t=d.finalShapeGatherIndices[e];t>=0?b.push(g[t]):t===uy&&b.push(1)}return{finalShapeSparse:b.filter(((e,t)=>d.finalShapeGatherIndices[t]!==uy)),finalShape:b,isIdentity:p,sliceDim0:f,isSimpleSlice:m,begin:d.begin,end:d.end,strides:d.strides}}function _y(e,t,n,r,s,a){if(s[t])return n>0?a[t]:a[t+1&1];{const t=e<0?r+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}const Cy=Ag({all_:function(e,t=null,n=!1){const r={x:Ng(e,"x","all","bool")},s={axis:t,keepDims:n};return $g.runKernel(rd,r,s)}}),Ty=Ag({any_:function(e,t=null,n=!1){const r={x:Ng(e,"x","any","bool")},s={axis:t,keepDims:n};return $g.runKernel(sd,r,s)}}),Ey=Ag({argMax_:function(e,t=0){const n={x:Ng(e,"x","argMax")},r={axis:t};return $g.runKernel(ad,n,r)}});function Ny(e,t,n,r,s="NHWC",a){return Dy(e,[...t,e[3]],n,a,r,null,null,Vy(s))}function Ry(e,t,n,r,s,a,i="channelsLast"){const[o,u]=zy(t);let l;if("channelsLast"===i)l=[o,u,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);l=[o,u,e[1],e[1]]}return Dy(e,l,n,r,s,a,!1,i)}function Ay(e,t,n,r,s,a,i="NDHWC"){const[o,u,l]=My(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,u,l,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,u,l,e[1],e[1]]}return Oy(e,c,n,r,s,!1,h,a)}function Dy(e,t,n,r,s,a,i=!1,o="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,h,l,c]=e}const[d,p,,f]=t,[m,g]=zy(n),[b,y]=zy(r),x=Ly(d,b),w=Ly(p,y),{padInfo:v,outHeight:$,outWidth:k}=function(e,t,n,r,s,a,i,o,u){let l,c,h;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Fy(e,t,n));const a=e[1];return[By((e[0]-t+2*r)/n+1,s),By((a-t+2*r)/n+1,s)]}([t,n],a,r,e,o);c=s[0],h=s[1]}else if("same"===e){c=Math.ceil(t/r),h=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),o=Math.max(0,(h-1)*s+i-n),u=Math.floor(e/2),d=e-u,p=Math.floor(o/2);l={top:u,bottom:d,left:p,right:o-p,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const d="channelsLast"===u?e[1][0]:e[2][0],p="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},c=By((t-a+d+p)/r+1,o),h=By((n-i+f+m)/s+1,o)}}return{padInfo:l,outHeight:c,outWidth:h}}(s,l,c,m,g,x,w,a,o),I=i?f*h:f;let S;return"channelsFirst"===o?S=[u,I,$,k]:"channelsLast"===o&&(S=[u,$,k,I]),{batchSize:u,dataFormat:o,inHeight:l,inWidth:c,inChannels:h,outHeight:$,outWidth:k,outChannels:I,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:b,dilationWidth:y,inShape:e,outShape:S,filterShape:t}}function Oy(e,t,n,r,s,a=!1,i="channelsLast",o){let[u,l,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,h,d]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,d,l,c,h]=e}const[p,f,m,,g]=t,[b,y,x]=My(n),[w,v,$]=My(r),k=Ly(p,w),I=Ly(f,v),S=Ly(m,$),{padInfo:_,outDepth:C,outHeight:T,outWidth:E}=function(e,t,n,r,s,a,i,o,u,l,c){let h,d,p,f;if("valid"===e&&(e=0),"number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const m=function(e,t,n,r,s,a){null==s&&(s=Fy(e,t[0],r[0]));const i=[0,0,0,1];for(let n=0;n<3;n++)e[n]+2*s>=t[n]&&(i[n]=By((e[n]-t[n]+2*s)/r[n]+1,a));return i}([t,n,r,1],[o,u,l],0,[s,a,i],e,c);d=m[0],p=m[1],f=m[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{d=Math.ceil(t/s),p=Math.ceil(n/a),f=Math.ceil(r/i);const e=(d-1)*s+o-t,c=(p-1)*a+u-n,m=(f-1)*i+l-r,g=Math.floor(e/2),b=e-g,y=Math.floor(c/2),x=c-y,w=Math.floor(m/2);h={top:y,bottom:x,left:w,right:m-w,front:g,back:b,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(s,l,c,h,b,y,x,k,I,S,o),N=a?g*d:g;let R;return"channelsFirst"===i?R=[u,N,C,T,E]:"channelsLast"===i&&(R=[u,C,T,E,N]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:c,inWidth:h,inChannels:d,outDepth:C,outHeight:T,outWidth:E,outChannels:N,padInfo:_,strideDepth:b,strideHeight:y,strideWidth:x,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:k,effectiveFilterHeight:I,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:v,dilationWidth:$,inShape:e,outShape:R,filterShape:t}}function Fy(e,t,n,r=1){const s=Ly(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function zy(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function My(e){return"number"==typeof e?[e,e,e]:e}function Ly(e,t){return t<=1?e:e+(e-1)*(t-1)}function By(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Py(e){const[t,n,r]=zy(e);return 1===t&&1===n&&1===r}function Wy(e,t){return Py(e)||Py(t)}function Uy(e){return zy(e).every((e=>e>0))}function Vy(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function Gy(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)ph(yh(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{ph(yh(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const Hy=Ag({reshape_:function(e,t){const n={x:Ng(e,"x","reshape","string_or_numeric")},r={shape:t};return $g.runKernel(lf,n,r)}}),jy=Ag({avgPool_:function(e,t,n,r,s){const a=Ng(e,"x","avgPool","float32");ph(Wy(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=Hy(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ph(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),Gy("avgPool",r,s);const u={x:i},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=$g.runKernel(dd,u,l);return c=$b(c,a.dtype),o?Hy(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),qy=Ag({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const i=Ng(e,"x","avgPool3d","float32");let o=i,u=!1;4===i.rank&&(u=!0,o=Hy(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ph(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),ph("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),ph("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,(()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`)),Gy("avgPool3d",r,s);const l={x:o},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let h=$g.runKernel(fd,l,c);return h=$b(h,o.dtype),u?Hy(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Ky=Ag({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const i=Ng(e,"x","batchNorm"),o=Ng(t,"mean","batchNorm"),u=Ng(n,"variance","batchNorm");let l,c;null!=s&&(l=Ng(s,"scale","batchNorm")),null!=r&&(c=Ng(r,"offset","batchNorm")),ph(o.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ph(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ph(null==l||o.rank===l.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h={x:function(e){let t;return t=0===e.rank||1===e.rank?Hy(e,[1,1,1,e.size]):2===e.rank?Hy(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Hy(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),scale:l,offset:c,mean:o,variance:u},d={varianceEpsilon:a},p=$g.runKernel(op,h,d);return Hy(p,i.shape)}}),Xy=Ag({batchNorm2d_:function(e,t,n,r,s,a){const i=Ng(e,"x","batchNorm"),o=Ng(t,"mean","batchNorm"),u=Ng(n,"variance","batchNorm");let l,c;return null!=s&&(l=Ng(s,"scale","batchNorm")),null!=r&&(c=Ng(r,"offset","batchNorm")),ph(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),ph(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),ph(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&ph(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&ph(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),Ky(i,o,u,c,l,a)}}),Yy=Ag({batchNorm3d_:function(e,t,n,r,s,a){const i=Ng(e,"x","batchNorm"),o=Ng(t,"mean","batchNorm"),u=Ng(n,"variance","batchNorm");let l,c;return null!=s&&(l=Ng(s,"scale","batchNorm")),null!=r&&(c=Ng(r,"offset","batchNorm")),ph(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),ph(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),ph(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&ph(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&ph(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),Ky(i,o,u,c,l,a)}}),Zy=Ag({batchNorm4d_:function(e,t,n,r,s,a){const i=Ng(e,"x","batchNorm"),o=Ng(t,"mean","batchNorm"),u=Ng(n,"variance","batchNorm");let l,c;return null!=s&&(l=Ng(s,"scale","batchNorm")),null!=r&&(c=Ng(r,"offset","batchNorm")),ph(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),ph(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),ph(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&ph(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&ph(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),Ky(i,o,u,c,l,a)}}),Jy=Ag({broadcastTo_:function(e,t){let n=Ng(e,"broadcastTo","x");const r=n.shape;if(Ph(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Hy(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return kb(n);const i={x:n},o={reps:a};return $g.runKernel(Xf,i,o)}}),Qy=Ag({clipByValue_:function(e,t,n){const r=Ng(e,"x","clipByValue");if(ph(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return Pb(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return $g.runKernel(kd,s,a)}}),ex=Ag({concat_:function(e,t=0){ph(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Rg(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return kb(n[0]);const r=n,s={axis:t};return $g.runKernel(_d,r,s)}}),tx=Ag({concat1d_:function(e){return ex(e,0)}}),nx=Ag({concat2d_:function(e,t){return ex(e,t)}}),rx=Ag({concat3d_:function(e,t){return ex(e,t)}}),sx=Ag({concat4d_:function(e,t){return ex(e,t)}}),ax=Ag({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=Ng(e,"x","conv2d","float32"),u=Ng(t,"filter","conv2d","float32");let l=o,c=!1;3===o.rank&&(c=!0,l=Hy(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ph(4===l.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`)),ph(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),Gy("conv2d",r,i);const h="NHWC"===s?l.shape[3]:l.shape[1];ph(h===u.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`)),ph(Wy(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),ph(Uy(a),(()=>"Error in conv2D: Dilated rates should be larger than 0.")),ph(Uy(n),(()=>"Error in conv2D: Strides should be larger than 0."));const d={x:l,filter:u},p={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},f=$g.runKernel(Cd,d,p);return c?Hy(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),ix=Ag({conv1d_:function(e,t,n,r,s="NWC",a=1,i){const o=Ng(e,"x","conv1d"),u=Ng(t,"filter","conv1d");let l=o,c=!1;2===o.rank&&(c=!0,l=Hy(o,[1,o.shape[0],o.shape[1]])),ph(3===l.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`)),ph(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),Gy("conv1d",r,i),ph(l.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),ph(Wy(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),ph(Uy(a),(()=>"Error in conv1D: Dilated rates should be larger than 0.")),ph(Uy(n),(()=>"Error in conv1D: Stride should be larger than 0.")),ph("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const h=Hy(u,[1,u.shape[0],u.shape[1],u.shape[2]]),d=Hy(l,[l.shape[0],1,l.shape[1],l.shape[2]]),p=ax(d,h,[1,n],r,"NHWC",[1,a],i);return Hy(p,c?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}}),ox=Ag({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",i){ph(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,u=t,l=!1;3===t.rank&&(l=!0,u=Hy(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),ph(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),ph(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),ph(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?u.shape[3]:u.shape[1];ph(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),ph(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),Gy("conv2dDerInput",s,i);const d={dy:u,filter:n},p={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o},f=$g.runKernel(Ed,d,p);return l?Hy(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),ux=Ag({conv2dTranspose_:function(e,t,n,r,s,a){const i=Ng(e,"x","conv2dTranspose"),o=Ng(t,"filter","conv2dTranspose");return ox(n,i,o,r,s,"NHWC",a)}}),lx=Ag({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const i=Ng(e,"x","conv3d"),o=Ng(t,"filter","conv3d");let u=i,l=!1;4===i.rank&&(l=!0,u=Hy(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ph(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),ph(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),ph(u.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),ph(Wy(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),ph("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`)),ph(Uy(a),(()=>"Error in conv3D: Dilated rates should be larger than 0.")),ph(Uy(n),(()=>"Error in conv3D: Strides should be larger than 0."));const c={x:u,filter:o},h={strides:n,pad:r,dataFormat:s,dilations:a},d=$g.runKernel(Nd,c,h);return l?Hy(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),cx=Ag({conv3DBackpropInput_:function(e,t,n,r,s){ph(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=Hy(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=i.shape[4];ph(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),ph(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),ph(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),ph(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),ph(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:s,strides:r,inputShape:a},d=$g.runKernel(Ad,c,h);return o?Hy(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),hx=Ag({conv3dTranspose_:function(e,t,n,r,s){const a=Ng(e,"x","conv3dTranspose"),i=Ng(t,"filter","conv3dTranspose");return cx(n,a,i,r,s)}}),dx=Ag({denseBincount_:function(e,t,n,r=!1){const s=Ng(e,"x","denseBincount"),a=Ng(t,"weights","denseBincount");ph("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),ph(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),ph(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ph(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const i={x:s,weights:a},o={size:n,binaryOutput:r};return $g.runKernel(Ld,i,o)}}),px=Ag({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=Ng(e,"x","depthwiseConv2d","float32"),u=Ng(t,"filter","depthwiseConv2d","float32");let l=o,c=!1;3===o.rank&&(c=!0,l=Hy(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ph(4===l.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`)),ph(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`));const h="NHWC"===s?l.shape[3]:l.shape[1];ph(h===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${u.shape[2]}.`)),Gy("depthwiseConv2d",r,i);const d={x:l,filter:u},p={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},f=$g.runKernel(Pd,d,p);return c?Hy(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),fx=Ag({elu_:function(e){const t={x:Ng(e,"x","elu","float32")};return $g.runKernel(Xd,t)}}),mx=Ag({equal_:function(e,t){let n=Ng(e,"a","equal","string_or_numeric"),r=Ng(t,"b","equal","string_or_numeric");[n,r]=fg(n,r),Kb(n.shape,r.shape);const s={a:n,b:r};return $g.runKernel(Jd,s)}}),gx=Ag({erf_:function(e){let t=Ng(e,"x","erf");ph("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=$b(t,"float32"));const n={x:t};return $g.runKernel(Zd,n)}}),bx=Ag({exp_:function(e){const t={x:Ng(e,"x","exp")};return $g.runKernel(Qd,t)}}),yx=Ag({expandDims_:function(e,t=0){const n=Ng(e,"x","expandDims","string_or_numeric");ph(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return $g.runKernel(ep,r,s)}}),xx=Ag({tile_:function(e,t){const n=Ng(e,"x","tile","string_or_numeric");ph(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return $g.runKernel(Xf,r,s)}}),wx=Ag({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=vb([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const i=Hy(s.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return xx(yx(i,0),[n[0],1,1]);if(2===n.length)return xx(yx(yx(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return xx(yx(yx(yx(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),vx=Ag({floor_:function(e){const t={x:Ng(e,"x","floor","float32")};return $g.runKernel(ap,t)}}),$x=Ag({gather_:function(e,t,n=0,r=0){const s={x:Ng(e,"x","gather"),indices:Ng(t,"indices","gather","int32")},a={axis:n,batchDims:r};return $g.runKernel(up,s,a)}}),kx=Ag({greater_:function(e,t){let n=Ng(e,"a","greater","string_or_numeric"),r=Ng(t,"b","greater","string_or_numeric");[n,r]=fg(n,r),Kb(n.shape,r.shape);const s={a:n,b:r};return $g.runKernel(cp,s)}}),Ix=Ag({greaterEqual_:function(e,t){let n=Ng(e,"a","greaterEqual","string_or_numeric"),r=Ng(t,"b","greaterEqual","string_or_numeric");[n,r]=fg(n,r),Kb(n.shape,r.shape);const s={a:n,b:r};return $g.runKernel(hp,s)}}),Sx=Ag({leakyRelu_:function(e,t=.2){const n={x:Ng(e,"x","leakyRelu")},r={alpha:t};return $g.runKernel(yp,n,r)}}),_x=Ag({log_:function(e){const t={x:Ng(e,"x","log","float32")};return $g.runKernel($p,t)}}),Cx=Ag({log1p_:function(e){const t={x:Ng(e,"x","log1p")};return $g.runKernel(kp,t)}}),Tx=Ag({max_:function(e,t=null,n=!1){const r={x:Ng(e,"x","max")},s={reductionIndices:t,keepDims:n};return $g.runKernel(Ep,r,s)}}),Ex=Ag({sum_:function(e,t=null,n=!1){let r=Ng(e,"x","sum");"bool"===r.dtype&&(r=$b(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return $g.runKernel(Nf,s,a)}}),Nx=Ag({logSoftmax_:function(e,t=-1){const n=Ng(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=Rb(((e,n)=>{const r=Tx(e,t,!0),s=Vb(e,r),a=Vb($b(s,"float32"),_x(Ex(bx(s),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[r]=n,s=bx(r);return Vb(e,Cb(Ex(e,t,!0),s))}}}));return r(n)}});function Rx(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Ax(e,t,n){const r=e.length+t.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(e[a++]):s.push(t[i++]);return s}function Dx(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function Ox(e,t){return Ax(e,t.map((e=>1)),t)}function Fx(e,t,n){ph(Rx(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function zx(e,t){if(Rx(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function Mx(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Lx(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const Bx=Ag({logSumExp_:function(e,t=null,n=!1){const r=Ng(e,"x","logSumExp"),s=kh(t,r.shape),a=Tx(r,s,!0),i=Vb(r,a),o=bx(i),u=Ex(o,s),l=_x(u),c=Ib(Hy(a,l.shape),l);if(n){const e=Ox(c.shape,s);return Hy(c,e)}return c}}),Px=Ag({logicalAnd_:function(e,t){const n=Ng(e,"a","logicalAnd","bool"),r=Ng(t,"b","logicalAnd","bool");Kb(n.shape,r.shape);const s={a:n,b:r};return $g.runKernel(Ip,s)}}),Wx=Ag({matMul_:function(e,t,n=!1,r=!1){let s=Ng(e,"a","matMul"),a=Ng(t,"b","matMul");[s,a]=fg(s,a);const i={a:s,b:a},o={transposeA:n,transposeB:r};return $g.runKernel(gd,i,o)}}),Ux=Ag({maxPool_:function(e,t,n,r,s){const a=Ng(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=Hy(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ph(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),ph(Wy(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Gy("maxPool",r,s);const u={x:i},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=$g.runKernel(Rp,u,l);return o?Hy(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Vx=Ag({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const i=Ng(e,"x","maxPool3d");let o=i,u=!1;4===i.rank&&(u=!0,o=Hy(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ph(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),ph("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Gy("maxPool3d",r,s);const l={x:o},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},h=$g.runKernel(Dp,l,c);return u?Hy(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Gx=Ag({mean_:function(e,t=null,n=!1){const r={x:Ng(e,"x","mean")},s={axis:t,keepDims:n};return $g.runKernel(zp,r,s)}}),Hx=Ag({min_:function(e,t=null,n=!1){const r={x:Ng(e,"x","min")},s={axis:t,keepDims:n};return $g.runKernel(Mp,r,s)}}),jx=Ag({minimum_:function(e,t){let n=Ng(e,"a","minimum"),r=Ng(t,"b","minimum");[n,r]=fg(n,r),"bool"===n.dtype&&(n=$b(n,"int32"),r=$b(r,"int32")),Kb(n.shape,r.shape);const s={a:n,b:r};return $g.runKernel(Lp,s)}}),qx=Ag({moments_:function(e,t=null,n=!1){const r=kh(t,(e=Ng(e,"x","moments")).shape),s=Gx(e,r,n);let a=s.shape;n||(a=Ox(s.shape,r));const i=Eb(Vb($b(e,"float32"),Hy(s,a)));return{mean:s,variance:Gx(i,r,n)}}}),Kx=Ag({neg_:function(e){const t={x:Ng(e,"x","neg")};return $g.runKernel(Vp,t)}}),Xx=Ag({notEqual_:function(e,t){let n=Ng(e,"a","notEqual","string_or_numeric"),r=Ng(t,"b","notEqual","string_or_numeric");[n,r]=fg(n,r),Kb(n.shape,r.shape);const s={a:n,b:r};return $g.runKernel(Gp,s)}}),Yx=Ag({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:Ng(e,"indices","oneHot","int32")},i={dtype:s,depth:t,onValue:n,offValue:r};return $g.runKernel(Xp,a,i)}});function Zx(e,t="float32"){if(Ph(e),"complex64"===t){const t=Zx(e,"float32"),n=Zx(e,"float32");return Dg(t,n)}const n=Lh(gh(e),t);return $g.makeTensor(n,e,t)}function Jx(e,t="float32"){if(Ph(e),"complex64"===t){const t=Jx(e,"float32"),n=Zx(e,"float32");return Dg(t,n)}const n=Mh(gh(e),t);return $g.makeTensor(n,e,t)}const Qx=Ag({onesLike_:function(e){const t={x:Ng(e,"x","onesLike")};return $g.runKernel(Kp,t)}}),ew=Ag({pad_:function(e,t,n=0){const r=Ng(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return $g.runKernel(Zp,a,s)}}),tw=Ag({prelu_:function(e,t){const n={x:Ng(e,"x","prelu"),alpha:Ng(t,"alpha","prelu")};return $g.runKernel(Qp,n)}});var nw=n(391);class rw{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=nw.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*i,t=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class sw{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=nw.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const aw=Ag({randomNormal_:function(e,t=0,n=1,r,s){if(Ph(e),null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new rw(t,n,r,!1,s),i=vb(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),iw=Ag({randomUniform_:function(e,t=0,n=1,r="float32",s){Ph(e);const a=vb(e,r),i=new sw(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});function ow(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return $g.runKernel(sf,{},s)}const uw=Ag({relu_:function(e){const t={x:Ng(e,"x","relu")};return $g.runKernel(uf,t)}}),lw=Ag({reverse_:function(e,t){const n={x:Ng(e,"x","reverse")},r={dims:t};return $g.runKernel(mf,n,r)}}),cw=Ag({selu_:function(e){const t={x:Ng(e,"x","selu")};return $g.runKernel($f,t)}}),hw=Ag({separableConv2d_:function(e,t,n,r,s,a=[1,1],i="NHWC"){const o=Ng(e,"x","separableConv2d"),u=Ng(t,"depthwiseFilter","separableConv2d"),l=Ng(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=Hy(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");ph(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),ph(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),ph(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),ph(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),ph(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const d=u.shape[2],p=u.shape[3];ph(l.shape[2]===d*p,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${l.shape[2]}.`));const f=px(c,u,r,s,i,a),m=ax(f,l,1,"valid",i);return h?Hy(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),dw=Ag({sigmoid_:function(e){const t={x:Ng(e,"x","sigmoid","float32")};return $g.runKernel(Cf,t)}}),pw=Ag({slice_:function(e,t,n){const r=Ng(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return $g.runKernel(kf,s,a)}}),fw=Ag({slice1d_:function(e,t,n){const r=Ng(e,"x","slice1d");return ph(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),pw(r,[t],[n])}}),mw=Ag({slice2d_:function(e,t,n){const r=Ng(e,"x","slice2d");return ph(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),pw(r,t,n)}}),gw=Ag({slice3d_:function(e,t,n){const r=Ng(e,"x","slice3d");return ph(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),pw(r,t,n)}}),bw=Ag({slice4d_:function(e,t,n){const r=Ng(e,"x","slice4d");return ph(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),pw(r,t,n)}}),yw=Ag({softmax_:function(e,t=-1){const n=Ng(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return $g.runKernel(Df,r,s)}}),xw=Ag({softplus_:function(e){const t={x:Ng(e,"x","softplus")};return $g.runKernel(Tf,t)}}),ww=Ag({split_:function(e,t,n=0){const r={x:Ng(e,"x","split")},s={numOrSizeSplits:t,axis:n};return $g.runKernel(Af,r,s)}}),vw=Ag({squeeze_:function(e,t){const n=Ng(e,"x","squeeze","string_or_numeric");return Hy(n,Ih(n.shape,t).newShape)}}),$w=Ag({stack_:function(e,t=0){const n=Rg(e,"tensors","stack","string_or_numeric");ph(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&ph(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return $g.runKernel(Yp,r,s)}}),kw=Ag({tanh_:function(e){const t={x:Ng(e,"x","tanh","float32")};return $g.runKernel(Kf,t)}});function Iw(e,t){mh(e);const n=Cg(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Og(e,null,n,t)}function Sw(e,t,n){if(mh(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Cg(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Og(e,t,r,n)}const _w=Ag({truncatedNormal_:function(e,t=0,n=1,r,s){if(Ph(e),null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new rw(t,n,r,!0,s),i=vb(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),Cw=Ag({unstack_:function(e,t=0){const n=Ng(e,"x","unstack","string_or_numeric");ph(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return $g.runKernel(em,r,s)}}),Tw=Ag({where_:function(e,t,n){const r=Ng(t,"a","where"),s=Ng(n,"b","where"),a=Ng(e,"condition","where","bool"),i=Kb(Kb(a.shape,r.shape),s.shape),o={condition:Jy(a,i),t:Jy(r,i),e:Jy(s,i)};return $g.runKernel(vf,o)}}),Ew=Ag({imag_:function(e){const t={input:Ng(e,"input","imag")};return $g.runKernel(fp,t)}}),Nw=Ag({real_:function(e){const t={input:Ng(e,"input","real")};return $g.runKernel(af,t)}}),Rw=Ag({transpose_:function(e,t,n){const r=Ng(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),ph(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{ph(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?Bg((()=>{let e=Nw(r),t=Ew(r);return e=$g.runKernel(Jf,{x:e},a),t=$g.runKernel(Jf,{x:t},a),n&&(t=Kx(t)),Dg(e,t)})):$g.runKernel(Jf,s,a)}}),Aw=Ag({dropout_:function(e,t,n,r){const s=Ng(e,"x","dropout");if(ph("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),ph(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof tg?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(bh(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),i=1-t,o=_b(vx(Ib(iw(a,0,1,"float32",r),i)),i);return Cb(s,o)}}),Dw=Ag({fft_:function(e){ph("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return $g.runKernel(np,t)}}),Ow=Ag({rfft_:function(e,t){ph("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=pw(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=ex([e,Zx(r)],e.shape.length-1),n=t}else s=e;const a=Nb(s),i=Hy(Dg(s,a),[r,n]),o=Dw(i),u=Math.floor(n/2)+1,l=Nw(o),c=Ew(o),h=ww(l,[u,n-u],l.shape.length-1),d=ww(c,[u,n-u],c.shape.length-1),p=s.shape.slice();return p[s.shape.length-1]=u,Hy(Dg(h[0],d[0]),p)}}),Fw=Ag({ifft_:function(e){ph("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return $g.runKernel(pp,t)}}),zw=Ag({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=Hy(e,[n,t]);r=Fw(s)}else{const s=[n,2*(t-1)],a=Hy(Nw(e),[n,t]),i=Hy(Ew(e),[n,t]),o=lw(pw(a,[0,1],[n,t-2]),1),u=Cb(lw(pw(i,[0,1],[n,t-2]),1),Ab(-1)),l=ex([a,o],1),c=ex([i,u],1),h=Hy(Dg(l,c),[s[0],s[1]]);r=Fw(h)}if(r=Nw(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Hy(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}}),Mw=Ag({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",i){let o=e;3===e.rank&&(o=Hy(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Hy(t,[1,t.shape[0],t.shape[1],t.shape[2]])),ph(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),ph(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),ph(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const l="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];ph(l===n[2],(()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`)),ph(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),Gy("conv2dDerFilter",s,i);const h={x:o,dy:u},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,filterShape:n};return $g.runKernel(Td,h,d)}}),Lw=Ag({relu6_:function(e){const t={x:Ng(e,"x","relu6")};return $g.runKernel(ff,t)}}),Bw=Ag({step_:function(e,t=0){const n={x:Ng(e,"x","step")},r={alpha:t};return $g.runKernel(rm,n,r)}});function Pw(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Cb(e,Bw(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Ww(e,t){let n=t;const r=qb(e.shape,t.shape);return r.length>0&&(n=Ex(n,r)),Hy(n,e.shape)}function Uw(e,t,n,r){if("linear"===t)return e;if("relu"===t)return uw(e);if("elu"===t)return fx(e);if("relu6"===t)return Lw(e);if("prelu"===t)return tw(e,n);if("leakyrelu"===t)return Sx(e,r);if("sigmoid"===t)return dw(e);throw new Error(`Unknown fused activation ${t}.`)}const Vw=(e,t)=>!(e>0)||"linear"===t,Gw=Ag({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(u=u||"linear",!1===Vw($g.state.gradientDepth,u)){ph("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let h=ax(e,t,n,r,s,a,i);return null!=o&&(h=Ib(h,o)),Uw(h,u,l,c)}const h=Ng(e,"x","conv2d","float32"),d=Ng(t,"filter","conv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=Hy(h,[1,h.shape[0],h.shape[1],h.shape[2]])),ph(4===p.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`)),ph(4===d.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`)),Gy("fused conv2d",r,i);const m="NHWC"===s?p.shape[3]:p.shape[1];ph(d.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${d.shape[2]}.`)),ph(Wy(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=Dy(p.shape,d.shape,n,a,r,i);let b,y;if(null!=o&&(b=Ng(o,"bias","fused conv2d"),[b]=fg(b,h),"NHWC"===s?Kb(g.outShape,b.shape):(ph(b.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${b.shape.length}.`)),ph(0===b.shape.length||b.shape[0]===g.outChannels||1===b.shape[0],(()=>`Error in fused conv2d: bias shape (${b.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=l){const e=l.shape;if(ph(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)ph(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{Kb(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}y=Ng(l,"prelu weights","fused conv2d")}const x=(e,t)=>{ph("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[i,o,l,c]=t,h=Pw(e,l,u);ph(Py(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const d=[ox(o.shape,h,i,n,r),Mw(o,h,i.shape,n,r)];if(null!=c){const e=Ww(c,h);d.push(e)}return d},w={x:p,filter:d,bias:b,preluActivationWeights:y},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:c};if(null==o){const e=Rb(((e,t,n)=>{let r=$g.runKernel(im,w,v);return n([t,e,r]),f&&(r=Hy(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}));return e(p,d)}{const e=Rb(((e,t,n,r)=>{let s=$g.runKernel(im,w,v);return r([t,e,s,n]),f&&(s=Hy(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}));return e(p,d,b)}}}),Hw=Ag({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],i){let o=e;3===e.rank&&(o=Hy(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Hy(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:o,dy:u},c={strides:r,pad:s,dimRoundingMode:i,dilations:a,filterShape:n};return $g.runKernel(Wd,l,c)}}),jw=Ag({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],i){let o=t,u=!1;3===t.rank&&(u=!0,o=Hy(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:o,filter:n},c={strides:r,pad:s,dimRoundingMode:i,dilations:a,inputShape:e},h=$g.runKernel(Ud,l,c);return u?Hy(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),qw=Ag({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o=.2}){if(!1===Vw($g.state.gradientDepth,a)){let u=Wx(e,t,n,r);return null!=s&&(u=Ib(u,s)),Uw(u,a,i,o)}let u=Ng(e,"a","fused matMul"),l=Ng(t,"b","fused matMul");[u,l]=fg(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],h=r?l.shape[l.rank-1]:l.shape[l.rank-2],d=n?u.shape[u.rank-1]:u.shape[u.rank-2],p=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=gh(f),b=gh(m);ph(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`));const y=Kb(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([d,p]),x=Hy(u,n?[g,c,d]:[g,d,c]),w=Hy(l,r?[b,p,h]:[b,h,p]);let v,$;null!=s&&(v=Ng(s,"bias","fused matMul"),[v]=fg(v,u),Kb(y,v.shape)),null!=i&&($=Ng(i,"prelu weights","fused matMul"));const k=(e,t)=>{const[i,o,u,l]=t,c=Pw(Hy(e,u.shape),u,a);let h,d;return n||r?!n&&r?(h=Wx(c,o,!1,!1),d=Wx(c,i,!0,!1)):n&&!r?(h=Wx(o,c,!1,!0),d=Wx(i,c,!1,!1)):(h=Wx(o,c,!0,!0),d=Wx(c,i,!0,!0)):(h=Wx(c,o,!1,!0),d=Wx(i,c,!0,!1)),null!=s?[h,d,Ww(l,c)]:[h,d]},I={a:x,b:w,bias:v,preluActivationWeights:$},S={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:o};if(null==s){const e=Rb(((e,t,n)=>{const r=$g.runKernel(am,I,S);return n([e,t,r]),{value:Hy(r,y),gradFunc:k}}));return e(x,w)}{const e=Rb(((e,t,n,r)=>{const s=$g.runKernel(am,I,S);return r([e,t,s,n]),{value:Hy(s,y),gradFunc:k}}));return e(x,w,v)}}}),Kw=Ag({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const i=Ng(e,"image","cropAndResize"),o=Ng(t,"boxes","cropAndResize","float32"),u=Ng(n,"boxInd","cropAndResize","int32"),l=o.shape[0];ph(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),ph(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${o.shape}.`)),ph(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${o.shape}.`)),ph(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),ph(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),ph("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:i,boxes:o,boxInd:u},h={method:s,extrapolationValue:a,cropSize:r};return $g.runKernel(Md,c,h)}}),Xw=Ag({flipLeftRight_:function(e){const t=Ng(e,"image","flipLeftRight","float32");ph(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return $g.runKernel(sp,n,{})}}),Yw=Ag({grayscaleToRGB_:function(e){const t=Ng(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];ph(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),ph(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,xx(t,s)}}),Zw=Ag({einsum_:function(e,...t){const n=t.map(((e,t)=>Ng(e,`tensors${t}`,"einsum"))),r={equation:e};return $g.runKernel(Kd,n,r)}}),Jw=Ag({rgbToGrayscale_:function(e){const t=Ng(e,"image","RGBToGrayscale"),n=t.rank-1,r=t.shape[n];ph(t.rank>=2,(()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`)),ph(3===r,(()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${r}.`));const s=t.dtype,a=$b(t,"float32"),i=Iw([.2989,.587,.114]);let o;switch(t.rank){case 2:o=Zw("ij,j->i",a,i);break;case 3:o=Zw("ijk,k->ij",a,i);break;case 4:o=Zw("ijkl,l->ijk",a,i);break;case 5:o=Zw("ijklm,m->ijkl",a,i);break;case 6:o=Zw("ijklmn,n->ijklm",a,i);break;default:throw new Error("Not a valid tensor rank.")}return o=yx(o,-1),$b(o,s)}}),Qw=Ag({rotateWithOffset_:function(e,t,n=0,r=.5){const s=Ng(e,"image","rotateWithOffset","float32");ph(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},i={radians:t,fillValue:n,center:r};return $g.runKernel(sm,a,i)}});function ev(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),ph(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),ph(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),ph(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),ph(1===t.rank,(()=>"scores must be a 1D tensor")),ph(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),ph(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const tv=Ag({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ng(e,"boxes","nonMaxSuppression","float32"),i=Ng(t,"scores","nonMaxSuppression","float32"),o=ev(a,i,n,r,s),u={maxOutputSize:n=o.maxOutputSize,iouThreshold:r=o.iouThreshold,scoreThreshold:s=o.scoreThreshold};return $g.runKernel(Hp,{boxes:a,scores:i},u)}});function nv(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(t,e[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(e,t,n||rv)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function rv(e,t){return e>t?1:e<t?-1:0}function sv(e,t,n,r,s){return ov(e,t,n,r,s,0)}function av(e,t,n,r,s,a){return ov(e,t,n,r,s,0,!1,a,!0)}function iv(e,t,n,r,s,a){return ov(e,t,n,r,s,a,!0)}function ov(e,t,n,r,s,a,i=!1,o=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>s&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(cv);const c=a>0?-.5/a:0,h=[],d=[];for(;h.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<s)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=uv(e,a,h[n]);if(i>=r){o=!0;break}if(t.score=t.score*lv(r,c,i),t.score<=s)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),d.push(t.score)):t.score>s&&nv(l,t,cv))}const p=h.length,f=n-p;o&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=d),u&&(m.validOutputs=p),m}function uv(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),d=Math.max(s[1],s[3]),p=(o-a)*(u-i),f=(h-l)*(d-c);if(p<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(i,c),b=Math.min(o,h),y=Math.min(u,d),x=Math.max(b-m,0)*Math.max(y-g,0);return x/(p+f-x)}function lv(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function cv(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const hv=Ag({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Ng(e,"boxes","nonMaxSuppression"),o=Ng(t,"scores","nonMaxSuppression"),u=ev(i,o,n,r,s,a),l={boxes:i,scores:o},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},h=$g.runKernel(qp,l,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),dv=Ag({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Ng(e,"boxes","nonMaxSuppression"),o=Ng(t,"scores","nonMaxSuppression"),u=ev(i,o,n,r,s,null),l={boxes:i,scores:o},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},h=$g.runKernel(jp,l,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),pv=Ag({resizeBilinear_:function(e,t,n=!1,r=!1){const s=Ng(e,"images","resizeBilinear");ph(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),ph(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),ph(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,i=!1;3===s.rank&&(i=!0,a=Hy(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=$g.runKernel(df,o,u);return i?Hy(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),fv=Ag({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=Ng(e,"images","resizeNearestNeighbor");ph(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),ph(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),ph("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),ph(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,i=!1;3===s.rank&&(i=!0,a=Hy(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=$g.runKernel(cf,o,u);return i?Hy(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),mv=Ag({bincount_:function(e,t,n){const r=Ng(e,"x","bincount"),s=Ng(t,"weights","bincount");ph("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),ph(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ph(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},i={size:n};return $g.runKernel(yd,a,i)}}),gv=Ag({lessEqual_:function(e,t){let n=Ng(e,"a","lessEqual","string_or_numeric"),r=Ng(t,"b","lessEqual","string_or_numeric");[n,r]=fg(n,r),Kb(n.shape,r.shape);const s={a:n,b:r};return $g.runKernel(wp,s)}}),bv=Ag({round_:function(e){const t={x:Ng(e,"x","round")};return $g.runKernel(gf,t)}}),yv=Ag({threshold_:function(e,t="binary",n=!1,r=.5){const s=Ng(e,"image","threshold"),a=s.shape[0]*s.shape[1];let i,o,u,l,c=Cb(Iw([r]),255);if(ph(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),ph(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),ph("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),ph("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[i,o,u]=ww(s,[1,1,1],-1);const e=Cb(i,.2989),t=Cb(o,.587),n=Cb(u,.114);l=Ib(Ib(e,t),n)}else l=e;"otsu"===t&&(c=function(e,t){let n,r,s,a,i,o,u=Iw([-1]),l=Iw([0]),c=Iw([0]);for(let h=0;h<e.size-1;h++){n=pw(e,0,h+1),r=pw(e,h+1),i=_b(Ex(n),t),o=_b(Ex(r),t);const d=Ex(Cb(n,ow(0,n.size)));s=_b(d,Ex(n));const p=Pb(r.shape,n.size),f=Ib(ow(0,r.size),p),m=Cb(r,f);a=_b(Ex(m),Ex(r));const g=Vb(s,a),b=Vb(s,a),y=Cb(i,o);c=Cb(Cb(y,g),b);const x=kx(c,l);l=Tw(x,c,l),u=Tw(x,Iw([h]),u)}return u}(mv($b(bv(l),"int32"),Fg([]),256),a));const h=n?gv(l,c):kx(l,c);return $b(Cb(h,255),"int32")}}),xv=Ag({transform_:function(e,t,n="nearest",r="constant",s=0,a){const i=Ng(e,"image","transform","float32"),o=Ng(t,"transforms","transform","float32");ph(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),ph(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),ph(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:i,transforms:o},l={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return $g.runKernel(Zf,u,l)}}),wv=Ag({less_:function(e,t){let n=Ng(e,"a","less","string_or_numeric"),r=Ng(t,"b","less","string_or_numeric");[n,r]=fg(n,r),Kb(n.shape,r.shape);const s={a:n,b:r};return $g.runKernel(xp,s)}}),vv=Ag({bandPart_:function(e,t,n){const r=Ng(e,"a","bandPart");ph(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,i]=r.shape.slice(-2);let o,u;"number"==typeof t?(ph(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),ph(t<=a,(()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`)),o=Ng(t<0?a:t,"numLower","bandPart")):(ph("int32"===t.dtype,(()=>"bandPart(): numLower's dtype must be an int32.")),o=Tw(wv(t,0),a,jx(t,a))),"number"==typeof n?(ph(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`)),ph(n<=i,(()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`)),u=Ng(n<0?i:n,"numUpper","bandPart")):(ph("int32"===n.dtype,(()=>"bandPart(): numUpper's dtype must be an int32.")),u=Tw(wv(n,0),i,jx(n,i)));const l=Hy(ow(0,a,1,"int32"),[-1,1]),c=ow(0,i,1,"int32"),h=Vb(l,c),d=Px(gv(h,o),Ix(h,Kx(u))),p=Zx([a,i],r.dtype);return Hy($w(Cw(Hy(r,[-1,a,i])).map((e=>Tw(d,e,p)))),s)}});function $v(e,t,n=null){if(0===e.rank)return Hb(e);if(1!==e.rank&&null===n)return $v(Hy(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Ex(Hb(e),n);if(t===1/0)return Tx(Hb(e),n);if(t===-1/0)return Hx(Hb(e),n);if("euclidean"===t||2===t)return Tb(Ex(Ub(Hb(e),Ab(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Tx(Ex(Hb(e),n[0]),n[1]-1);if(t===1/0)return Tx(Ex(Hb(e),n[1]),n[0]);if(t===-1/0)return Hx(Ex(Hb(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Tb(Ex(Eb(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const kv=Ag({norm_:function(e,t="euclidean",n=null,r=!1){const s=$v(e=Ng(e,"x","norm"),t,n);let a=s.shape;if(r){const t=kh(n,e.shape);a=Ox(s.shape,t)}return Hy(s,a)}}),Iv=Ag({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,ph(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)ph(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=ww(e,e.shape[0],0).map((e=>vw(e,[0])));ph(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push($g.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=Cb(Ex(Cb(n[r],e)),n[r]);e=Vb(e,t)}return _b(e,kv(e,"euclidean"))})));return t?$w(n,0):n}});function Sv(e,t=!1){return $g.tidy((()=>{ph(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=wx(n),a=kb(e);const i=Sw([[1]],[1,1]);let o=kb(i);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=o,l=s;[o,a,s]=$g.tidy((()=>{const t=pw(a,[e,e],[n-e,1]),u=kv(t),l=pw(a,[e,e],[1,1]),c=Tw(kx(l,0),Sw([[-1]]),Sw([[1]])),h=Vb(l,Cb(c,u)),d=_b(t,h);o=1===d.shape[0]?kb(i):ex([i,pw(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=Kx(_b(Wx(c,h),u)),f=pw(a,[e,0],[n-e,r]),m=Cb(p,o),g=Rw(o);if(0===e)a=Vb(f,Wx(m,Wx(g,f)));else{const t=Vb(f,Wx(m,Wx(g,f)));a=ex([pw(a,[0,0],[e,r]),t],0)}const b=Rw(m),y=pw(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Vb(y,Wx(Wx(y,o),b));else{const t=Vb(y,Wx(Wx(y,o),b));s=ex([pw(s,[0,0],[n,e]),t],1)}return[o,a,s]})),Pg([t,u,l])}return!t&&n>r&&(s=pw(s,[0,0],[n,r]),a=pw(a,[0,0],[r,r])),[s,a]}))}const _v=Ag({qr_:function(e,t=!1){if(ph(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Sv(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=Cw(Hy(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];return r.forEach((e=>{const[n,r]=Sv(e,t);s.push(n),a.push(r)})),[Hy($w(s,0),e.shape),Hy($w(a,0),e.shape)]}}});var Cv;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Cv||(Cv={}));const Tv=Ag({squaredDifference_:function(e,t){let n=Ng(e,"a","squaredDifference"),r=Ng(t,"b","squaredDifference");[n,r]=fg(n,r),Kb(n.shape,r.shape);const s={a:n,b:r};return $g.runKernel(Bf,s,{})}}),Ev={flipLeftRight:Xw,grayscaleToRGB:Yw,resizeNearestNeighbor:fv,resizeBilinear:pv,rgbToGrayscale:Jw,rotateWithOffset:Qw,cropAndResize:Kw,nonMaxSuppression:tv,nonMaxSuppressionAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ng(e,"boxes","nonMaxSuppressionAsync"),i=Ng(t,"scores","nonMaxSuppressionAsync"),o=ev(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),l=u[0],c=u[1],{selectedIndices:h}=sv(l,c,n,r,s);return a!==e&&a.dispose(),i!==t&&i.dispose(),Iw(h,"int32")},nonMaxSuppressionWithScore:hv,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Ng(e,"boxes","nonMaxSuppressionAsync"),o=Ng(t,"scores","nonMaxSuppressionAsync"),u=ev(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),c=l[0],h=l[1],{selectedIndices:d,selectedScores:p}=iv(c,h,n,r,s,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Iw(d,"int32"),selectedScores:Iw(p)}},nonMaxSuppressionPadded:dv,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Ng(e,"boxes","nonMaxSuppressionAsync"),o=Ng(t,"scores","nonMaxSuppressionAsync"),u=ev(i,o,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,h=u.scoreThreshold,[d,p]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=av(d,p,l,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Iw(f,"int32"),validOutputs:Ab(m,"int32")}},threshold:yv,transform:xv},Nv={bandPart:vv,gramSchmidt:Iv,qr:_v},Rv=class{static sgd(e){return new Zb(e)}static momentum(e,t,n=!1){return new Jb(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new Qb(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new Gb(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new Bb(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new Yb(e,t,n,r,s)}static adagrad(e,t=.1){return new Wb(e,t)}},Av="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Dv(){return new Promise((e=>Av((()=>e()))))}function Ov(e,t){const n=e[0].length;e.forEach(((e,t)=>{ph(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),ph(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)ph(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function Fv(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var zv;function Mv(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let s=1;s<n.length;++s){const a=n[s],i=r[r.length-n.length+s],o=r[i];if(a>=0)if(o>=0){if(o!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${s+e}] = ${a} but shape[${s+e}] = ${o}`)}else r[i]=a}return r}function Lv(e){const t={FIRST_DIM_SIZE:zv.FIRST_DIM_SIZE,VALUE_ROWIDS:zv.VALUE_ROWIDS,ROW_LENGTHS:zv.ROW_LENGTHS,ROW_SPLITS:zv.ROW_SPLITS,ROW_LIMITS:zv.ROW_LIMITS,ROW_STARTS:zv.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function Bv(e){return 0===e.length?0:e[0]===zv.FIRST_DIM_SIZE?e.length-1:e.length}function Pv(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(n,r-1);++s){const n=e[s],r=t[s+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${s-e.length}] = ${n} but ragged tensor input.flatValues.shape[${s-e.length}] = ${r}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(zv||(zv={}));const Wv=30;function Uv(e){return e<=Wv?e:Dh(e,Math.floor(Math.sqrt(e)))}function Vv(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Gv(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function Hv(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function jv(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function qv(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function Kv(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}function Xv(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===gh(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let i=1;for(let e=0;e<s.length-1;++e)i*=s[e];const o=e.shape,u=s.slice();u.pop();let l=1;for(let e=a;e<n;++e)l*=o[e],u.push(o[e]);const c=[...Oh(e.shape).map((e=>e/l)),1].slice(0,a);return[u,i,l,c]}function Yv(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}function Zv(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Yv(n,t,e)}function Jv(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let i=1;for(let e=s;e<a;++e)i*=n[e];const o=s<1?1:s;return{sliceRank:s,numUpdates:gh(t.shape)/o,sliceSize:i,strides:[...Oh(n.slice(0,s)),1],outputSize:gh(n)}}const Qv=1.7580993408473768,e$=1.0507009873554805,t$=.3275911,n$=.254829592,r$=-.284496736,s$=1.421413741,a$=-1.453152027,i$=1.061405429;function o$(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function u$(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function l$(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function c$(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function h$(e,t){return{real:e[2*t],imag:e[2*t+1]}}function d$(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function p$(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function f$(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const m$="->",g$=/->/g,b$=",",y$="...";function x$(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(g$,"").length)/m$.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${m$}").`);const[r,s]=e.split(m$);ph(-1===r.indexOf(y$),(()=>`The ellipsis notation ("${y$}") is not supported yet.`));const a=r.split(b$),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<s.length;++e){const t=s[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===o.indexOf(t)&&t!==b$&&o.push(t)}const u=new Array(a.length);for(let e=0;e<i;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<a[e].length;++t)u[e].push(o.indexOf(a[e][t]))}const l=o.length,c=[];for(let e=s.length;e<l;++e)c.push(e);return{allDims:o,summedDims:c,idDims:u}}function w$(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function v$(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const s=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=s[n]:ph(r[t[e][n]]===s[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(s)}, but got dimension ${s[n]}`))}}function $$(e,t){const n=e,r=[];let s=0;0===e.length&&n.push(-1),s=e.length+1;for(let e=0;e<s;++e)r.push([]);const a=[];for(let e=0;e<n.length;++e){const s=I$(t,n[e]);for(const t of s)-1===a.indexOf(t)&&(r[e].push(t),a.push(t))}return{path:n,steps:r}}function k$(e){return e.every(((e,t)=>e===t))}function I$(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function S$(e,t,n=0){let r=[];if("number"==typeof t)ph(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{const s=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);ph(s<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const r=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-r}ph(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function _$(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function C$(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function T$(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function E$(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function N$(e,t){return`size ${e} must be non-negative, not ${t}`}function R$(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function A$(e,t){return`Input to reshape is a SparseTensor with ${gh(e)}\n  dense values, but the requested shape requires a multiple of ${gh(t)}. inputShape=${e} outputShape= ${t}`}function D$(e,t){return`Input to reshape is a tensor with ${gh(e)} dense values, but the requested shape has ${gh(t)}. inputShape=${e} outputShape=${t}`}function O$(){return"segment ids must be >= 0"}function F$(){return"segment ids are not increasing"}function z$(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function M$(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function L$(e,t){let n,r=!1;for(e<=Wv?(n=e,r=!0):n=Dh(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Dh(e,n+1);return n}function B$(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}function P$(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let u=1,l=1,c=1;for(let t=0;t<r;++t)o.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)o.push(e.shape[t]),l*=e.shape[t];for(let e=r;e<s;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:i,outputShape:o}}function W$(e){try{return e.map((e=>Mm(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function U$(e){return e.map((e=>zm(e)))}function V$(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=vb(e,"int32"),s=vb([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),i=t*e.length;s.values.set(a,i)}return s.toTensor()}!function(){for(const e of ey)Mb(e)}();const G$={kernelName:Jh,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cb(e,Bw($b(n,"float32"),-1))}}},H$={kernelName:Qh,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Eb($b(n,"float32")),r=Tb(Vb(Ab(1),t));return Kx(_b(e,r))}}}},j$={kernelName:ed,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Tb(Vb(Eb($b(n,"float32")),1));return _b(e,t)}}}},q$={kernelName:td,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Kb(n.shape,r.shape);return{a:()=>{let t=e;const r=qb(n.shape,s);return r.length>0&&(t=Ex(t,r)),Hy(t,n.shape)},b:()=>{let t=e;const n=qb(r.shape,s);return n.length>0&&(t=Ex(t,n)),Hy(t,r.shape)}}}},K$={kernelName:nd,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}},X$={kernelName:ad,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Nb(n)}}},Y$={kernelName:id,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Nb(n)}}},Z$={kernelName:od,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_b(e,Tb(Vb(Ab(1),Eb($b(n,"float32")))))}}},J$={kernelName:ud,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Tb(Ib(Ab(1),Eb($b(n,"float32"))));return _b(e,t)}}}},Q$={kernelName:hd,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Kb(n.shape,r.shape);return{a:()=>{const t=Ib(Eb(n),Eb(r));let a=Cb(e,_b(r,t));const i=qb(n.shape,s);return i.length>0&&(a=Ex(a,i)),Hy(a,n.shape)},b:()=>{const t=Ib(Eb(n),Eb(r));let a=Kx(Cb(e,_b(n,t)));const i=qb(r.shape,s);return i.length>0&&(a=Ex(a,i)),Hy(a,r.shape)}}}},ek={kernelName:ld,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_b(e,Ib(Eb($b(n,"float32")),1))}}},tk={kernelName:cd,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_b(e,Vb(Ab(1),Eb($b(n,"float32"))))}}},nk=Ag({avgPool3dGrad_:function(e,t,n,r,s,a){const i=Ng(e,"dy","avgPool3dGrad"),o=Ng(t,"input","avgPool3dGrad");let u=i,l=o,c=!1;4===o.rank&&(c=!0,u=Hy(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),l=Hy(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ph(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),ph(5===l.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${l.rank}.`)),Gy("avgPool3dGrad",s,a);const h={dy:u,input:l},d={filterSize:n,strides:r,pad:s,dimRoundingMode:a},p=$g.runKernel(md,h,d);return c?Hy(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),rk={kernelName:fd,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>nk(e,r,s,a,i,o)}}},sk=Ag({avgPoolGrad_:function(e,t,n,r,s){const a=Ng(e,"dy","avgPoolGrad"),i=Ng(t,"input","avgPoolGrad");ph(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,u=a,l=!1;3===i.rank&&(l=!0,o=Hy(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=Hy(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ph(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),ph(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:u,input:o},h={filterSize:n,strides:r,pad:s},d=$g.runKernel(pd,c,h);return l?Hy(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),ak={kernelName:dd,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i}=n;return{x:()=>sk(e,r,s,a,i)}}},ik={kernelName:gd,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Wx(e,s,!1,!1),b:()=>Wx(e,r,!0,!1)}:a&&!i?{a:()=>Wx(s,e,!1,!0),b:()=>Wx(r,e,!1,!1)}:{a:()=>Wx(s,e,!0,!0),b:()=>Wx(e,r,!0,!0)}:{a:()=>Wx(e,s,!1,!0),b:()=>Wx(r,e,!0,!1)}}},ok=Ag({spaceToBatchND_:function(e,t,n){const r=Ng(e,"x","spaceToBatchND");ph(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),ph(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),ph(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return $g.runKernel(Rf,s,a)}}),uk={kernelName:bd,gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>ok(e,r,s)}}},lk={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let e=s.length-1;e>=0;e--)if(s[e]===a[e])i[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>Ex(e,o,!0)}}},ck={kernelName:vd,gradFunc:e=>({x:()=>e.clone()})},hk={kernelName:$d,gradFunc:e=>({x:()=>Nb(e)})},dk={kernelName:kd,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>Tw(Px(Ix(r,s),gv(r,a)),e,Nb(e))}}},pk={kernelName:Sd,inputsToSave:["x"],gradFunc:G$.gradFunc},fk={kernelName:_d,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:s}=n,a=kh(s,t[0].shape)[0],i=r.map((e=>e[a]));return ww(e,i,a).map((e=>()=>e))}},mk={kernelName:Cd,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return ph(Py(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>ox(r.shape,e,s,i,o,u),filter:()=>Mw(r,e,s.shape,i,o,u)}}},gk={kernelName:Ed,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>ax(e,s,a,i,o,1,u),filter:()=>Mw(e,r,s.shape,a,i,o,u)}}},bk=Ag({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=Hy(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=Hy(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),ph(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),ph(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),ph(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),ph(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),ph(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},u={strides:r,pad:s,filterShape:n};return $g.runKernel(Rd,o,u)}}),yk={kernelName:Nd,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;ph(Py(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[i,o]=t;return{x:()=>cx(i.shape,e,o,s,a),filter:()=>bk(i,e,o.shape,s,a)}}},xk=Ag({sin_:function(e){const t={x:Ng(e,"x","sin","float32")};return $g.runKernel(If,t)}}),wk={kernelName:Dd,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cb(Kx(xk($b(n,"float32"))),e)}}},vk=Ag({sinh_:function(e){const t={x:Ng(e,"x","sinh")};return $g.runKernel(Sf,t)}}),$k={kernelName:Od,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cb(vk($b(n,"float32")),e)}}},kk=Ag({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:Ng(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return $g.runKernel(zd,s,a)}}),Ik={kernelName:zd,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const t=zx([s],r.rank);let n=kk(e,s,a,!i);return null!=t&&(n=Rw(n,t)),n}}}},Sk={kernelName:Pd,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;ph(Py(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[u,l]=t;return ph(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),ph(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`)),ph(u.shape[3]===l.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),ph(Wy(s,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`)),Gy("depthwiseConv2d",a,i),{x:()=>jw(u.shape,e,l,s,a,o,i),filter:()=>Hw(u,e,l.shape,s,a,o,i)}}},_k={kernelName:Gd,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},i={x:r,filter:s,dy:e};return{x:()=>$g.runKernel(Hd,a,n),filter:()=>$g.runKernel(jd,i,n)}}},Ck={kernelName:Xd,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>$g.runKernel(Yd,r)}}},Tk={kernelName:Zd,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Cb(bx(Kx(Eb(n))),2/Math.sqrt(Math.PI));return{x:()=>Cb(e,r)}}},Ek={kernelName:Qd,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cb(e,n)}}},Nk={kernelName:ep,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Hy(e,n.shape)}}},Rk={kernelName:tp,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cb(e,bx(n))}}},Ak={kernelName:ap,gradFunc:e=>({x:()=>Nb(e)})},Dk={kernelName:ip,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Kb(n.shape,r.shape);return{a:()=>{const t=_b(e,$b(r,"float32")),a=qb(n.shape,s);return a.length>0?Hy(Ex(t,a),n.shape):t},b:()=>{let t=Cb(e,$b(n,"float32"));const a=qb(r.shape,s);a.length>0&&(t=Hy(Ex(t,a),r.shape));const i=Eb(r);return Kx(_b(t,$b(i,"float32")))}}}},Ok=Ag({rsqrt_:function(e){const t={x:Ng(e,"x","rsqrt","float32")};return $g.runKernel(bf,t)}}),Fk={kernelName:op,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=t,u=null==o?Ab(1):o,l=qb(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const h=Vb(s,a),d=Cb(e,u),p=Ok(Ib(i,Ab(r))),f=Cb(Cb(Cb(p,p),p),Ab(-.5));return{x:()=>1===a.rank?Hy(Cb(Cb(e,xx(Hy(p,[1,1,1,a.shape[0]]),c)),u),s.shape):Hy(Cb(Cb(e,p),u),s.shape),mean:()=>{let e=Cb(Cb(p,Ab(-1)),d);return 1===a.rank&&(e=Ex(e,l)),Hy(e,a.shape)},variance:()=>{let e=Cb(Cb(f,h),d);return 1===a.rank&&(e=Ex(e,l)),Hy(e,a.shape)},scale:()=>{const t=Cb(h,p);let n=Cb(e,t);return 1===a.rank&&(n=Ex(n,l)),Hy(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Ex(t,l)),Hy(t,a.shape)}}}},zk=Ag({unsortedSegmentSum_:function(e,t,n){const r=Ng(e,"x","unsortedSegmentSum"),s=Ng(t,"segmentIds","unsortedSegmentSum","int32");ph(yh(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},i={numSegments:n};return $g.runKernel(tm,a,i)}}),Mk={kernelName:up,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a,batchDims:i}=n,o=kh(a,r.shape)[0],u=(e,t,n)=>()=>{const r=e.shape,s=t.size,i=r.slice(0,o),u=i.length,l=r.slice(a,r.length).slice(1),c=l.length,h=Lk(0,u),d=Lk(u+1,u+1+c),p=Bk([i,[s],l]),f=Hy(n,p),m=Hy(t,[s]),g=Bk([[u],h,d]),b=Rw(f,g);let y=zk(b,m,e.shape[o]);const x=Mx(g);return y=Rw(y,x),y};if(1===i){const t=r.shape[0],n=r.split(t,0);return{x:()=>{const t=$w(n.map(((t,n)=>u(t,s.slice(n,1),e.slice(n,1))())));return t.reshape(r.shape)},indices:()=>s}}return{x:u(r,s,e),indices:()=>s}}};function Lk(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function Bk(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const Pk={kernelName:hp,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Nb(n),b:()=>Nb(r)}}},Wk={kernelName:dp,gradFunc:e=>({x:()=>$b(e,"float32")})},Uk={kernelName:mp,gradFunc:e=>({x:()=>Nb(e)})},Vk={kernelName:gp,gradFunc:e=>({x:()=>Nb(e)})},Gk={kernelName:bp,gradFunc:e=>({x:()=>Nb(e)})},Hk={kernelName:yp,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=kx(r,0);return{x:()=>Tw(a,e,Cb(e,s))}}},jk={kernelName:kp,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_b(e,Ib(n,1))}}},qk={kernelName:$p,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_b(e,$b(n,"float32"))}}},Kk={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=bx(r);return Vb(e,Cb(Ex(e,s,!0),t))}}}},Xk=Ag({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,i=.5){const o={x:e,y:t,dy:n},u={depthRadius:r,bias:s,alpha:a,beta:i};return $g.runKernel(Tp,o,u)}}),Yk={kernelName:Cp,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>Xk(r,s,e,a,i,o,u)}}};function Zk(e,t,n,r){return t.rank<n.rank&&(t=Hy(t,Ox(t.shape,r))),e.rank<n.rank&&(e=Hy(e,Ox(e.shape,r))),{x:()=>Cb(e,$b(mx(n,t),e.dtype))}}const Jk={kernelName:Ep,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],i=Zk(e,t[1],a,kh(s,a.shape));return{x:()=>i.x()}}},Qk={kernelName:Np,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Cb(e,$b(Ix(n,r),"float32")),b:()=>Cb(e,$b(wv(n,r),"float32"))}}},eI=Ag({maxPool3dGrad_:function(e,t,n,r,s,a,i){const o=Ng(e,"dy","maxPool3dGrad"),u=Ng(t,"input","maxPool3dGrad"),l=Ng(n,"output","maxPool3dGrad");let c=o,h=u,d=l,p=!1;4===u.rank&&(p=!0,c=Hy(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=Hy(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=Hy(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),ph(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),ph(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),ph(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),Gy("maxPool3dGrad",a,i);const f={dy:c,input:h,output:d},m={filterSize:r,strides:s,pad:a,dimRoundingMode:i},g=$g.runKernel(Op,f,m);return p?Hy(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),tI={kernelName:Dp,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=n;return{x:()=>eI(e,r,s,a,i,o,u)}}},nI=Ag({maxPoolGrad_:function(e,t,n,r,s,a,i){const o=Ng(e,"dy","maxPoolGrad"),u=Ng(t,"input","maxPoolGrad"),l=Ng(n,"output","maxPoolGrad");ph(u.rank===o.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${o.rank})`)),ph(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),ph(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),Gy("maxPoolGrad",a,i);const c={dy:o,input:u,output:l},h={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return $g.runKernel(Ap,c,h)}}),rI={kernelName:Rp,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>nI(e,r,s,a,i,o)}}},sI={kernelName:zp,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=kh(s,r.shape),i=gh(Dx(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach((e=>{t[e]=1}));const n=Hy(e,t);return _b(Cb(n,Jx(r.shape,"float32")),i)}}}},aI={kernelName:Mp,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,i]=t,o=Zk(e,i,a,kh(s,a.shape));return{x:()=>o.x()}}},iI={kernelName:Lp,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Cb(e,$b(gv(n,r),"float32")),b:()=>Cb(e,$b(kx(n,r),"float32"))}}},oI={kernelName:Bp,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>pw(e,a,r.shape)}}},uI={kernelName:Pp,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Kb(n.shape,r.shape);return{a:()=>{const t=qb(n.shape,s);return t.length>0?Hy(Ex(e,t),n.shape):e},b:()=>{const t=Cb(e,Kx(vx(_b(n,r)))),a=qb(r.shape,s);return a.length>0?Hy(Ex(t,a),r.shape):t}}}},lI={kernelName:Up,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Kb(n.shape,r.shape);return{a:()=>{const t=Cb(e,$b(r,"float32")),a=qb(n.shape,s);return a.length>0?Hy(Ex(t,a),n.shape):t},b:()=>{const t=Cb(e,$b(n,"float32")),a=qb(r.shape,s);return a.length>0?Hy(Ex(t,a),r.shape):t}}}},cI={kernelName:Vp,gradFunc:e=>({x:()=>Kx(e)})},hI={kernelName:Xp,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Zx(n.shape,"float32")}}},dI={kernelName:Kp,gradFunc:e=>({x:()=>Nb(e)})},pI={kernelName:Yp,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return Cw(e,r).map((e=>()=>e))}},fI={kernelName:Zp,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>pw(e,a,r.shape)}}},mI={kernelName:Jp,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,i=r,o=Kb(a.shape,i.shape);return{a:()=>{const t=$b(i,"float32");let n=Cb(e,Cb(t,Ub(a,Vb(t,Ab(1)))));const r=qb(a.shape,o);return r.length>0&&(n=Ex(n,r)),Hy(n,a.shape)},b:()=>{const t=kx(a,0),n=Tw(t,_x(a),Nb(a));let r=Cb(e,Cb(s,n));const u=qb(i.shape,o);return u.length>0&&(r=Ex(r,u)),Hy(r,i.shape)}}}},gI={kernelName:Qp,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=kx(n,0);return{x:()=>Tw(s,e,Cb(e,r)),alpha:()=>{let t=Tw(s,Nb(e),Cb(e,n));const a=qb(r.shape,e.shape);return a.length>0&&(t=Ex(t,a)),Hy(t,r.shape)}}}},bI=Ag({cumprod_:function(e,t=0,n=!1,r=!1){const s={x:Ng(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return $g.runKernel(Fd,s,a)}});const yI={kernelName:ef,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;let a=[];return a=null==s?r.shape.map(((e,t)=>t)):"number"==typeof s?[s]:s,{x:()=>function(e,t,n){const r=e.shape.length,s=r-n.length,a=zx(n,r);let i=e;null!=a&&(i=Rw(e,a));const o=i.shape.slice(),u=o.splice(r-n.length,n.length).reduce(((e,t)=>e*t),1);o.push(u);let l=function(e,t,n){const r=e.shape.slice();r[n]=1;const s=Hy(t,r),a=bI(e,n,!0,!1),i=bI(e,n,!0,!0),o=Cb(a,i);return Cb(s,o)}(i.reshape(o),t,s);if(l=l.reshape(i.shape),null!=a){const e=Mx(a);l=Rw(l,e)}return l}(r,e,a)}}},xI={kernelName:qd,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Kb(n.shape,r.shape);return{a:()=>{const t=_b(e,$b(r,"float32")),a=qb(n.shape,s);return a.length>0?Hy(Ex(t,a),n.shape):t},b:()=>{let t=Cb(e,$b(n,"float32"));const a=qb(r.shape,s);a.length>0&&(t=Hy(Ex(t,a),r.shape));const i=Eb(r);return Kx(_b(t,$b(i,"float32")))}}}},wI={kernelName:of,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_b(e,Kx(Eb(n)))}}},vI={kernelName:ff,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Cb(gv(n,6),Bw(n));return{x:()=>Cb(e,$b(r,"float32"))}}},$I={kernelName:uf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cb(e,$b(Bw(n),"float32"))}}},kI={kernelName:lf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Hy(e,n.shape)}}},II={kernelName:df,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>$g.runKernel(pf,s,n)}}},SI={kernelName:cf,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>$g.runKernel(hf,s,n)}}},_I={kernelName:mf,gradFunc:(e,t,n)=>{const{dims:r}=n,s=kh(r,e.shape);return{x:()=>lw(e,s)}}},CI={kernelName:gf,gradFunc:e=>({x:()=>Nb(e)})},TI={kernelName:bf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Kx(_b(e,Cb(Ub(n,1.5),2)))}}},EI=Ag({logicalNot_:function(e){const t={x:Ng(e,"x","logicalNot","bool")};return $g.runKernel(Sp,t)}}),NI={kernelName:vf,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>$b(Nb(n),"float32"),t:()=>Cb(e,$b(n,e.dtype)),e:()=>Cb(e,$b(EI(n),e.dtype))}}},RI={kernelName:$f,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=kx(n,Ab(0)),r=Ab(Qv),s=Ab(e$),a=Cb(e,s),i=Cb(Cb(e,r),bx($b(n,"float32")));return Tw(t,a,i)}}}},AI={kernelName:Cf,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cb(e,Cb(n,Vb(Ab(1),n)))}}},DI={kernelName:_f,gradFunc:e=>({x:()=>Nb(e)})},OI=Ag({cos_:function(e){const t={x:Ng(e,"x","cos","float32")};return $g.runKernel(Dd,t)}}),FI={kernelName:If,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cb(OI($b(n,"float32")),e)}}},zI=Ag({cosh_:function(e){const t={x:Ng(e,"x","cosh","float32")};return $g.runKernel(Od,t)}}),MI={kernelName:Sf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cb(zI($b(n,"float32")),e)}}},LI={kernelName:kf,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,i=r.shape,[o,u]=Iy(r,s,a),l=[];for(let t=0;t<e.rank;t++)l.push([o[t],i[t]-o[t]-u[t]]);return{x:()=>ew(e,l)}}},BI={kernelName:Df,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=Cb(e,r);return{logits:()=>Vb(a,Cb(Ex(a,[s],!0),r))}}},PI={kernelName:Tf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cb(e,dw(n))}}},WI=Ag({batchToSpaceND_:function(e,t,n){const r=Ng(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));ph(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),ph(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),ph(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},i={blockShape:t,crops:n};return $g.runKernel(bd,a,i)}}),UI={kernelName:Rf,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>WI(e,r,s)}}},VI={kernelName:Af,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>ex(e,r)}}},GI={kernelName:Xf,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=Nb(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=Ib(t,pw(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=Ib(t,pw(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)t=Ib(t,pw(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)t=Ib(t,pw(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},HI=[G$,H$,j$,q$,K$,X$,Y$,Z$,J$,Q$,ek,tk,rk,ak,ik,uk,lk,ck,hk,dk,pk,fk,gk,mk,yk,wk,$k,Ik,Sk,_k,xI,Ck,Tk,Ek,Nk,Rk,Dk,Ak,Fk,Mk,Pk,Wk,Uk,Vk,Gk,Hk,jk,qk,Kk,Yk,Jk,Jk,Qk,tI,rI,sI,aI,iI,oI,uI,lI,cI,hI,dI,pI,fI,fI,mI,gI,yI,wI,vI,$I,kI,II,SI,_I,CI,TI,NI,RI,AI,DI,FI,MI,LI,BI,PI,UI,UI,VI,VI,{kernelName:Ef,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_b(e,Cb(Tb($b(n,"float32")),2))}}},{kernelName:Bf,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Ab(2);return{a:()=>Cb(e,Cb(s,Vb(n,r))),b:()=>Cb(e,Cb(s,Vb(r,n)))}}},{kernelName:Pf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cb(e,Cb($b(n,"float32"),2))}}},{kernelName:rm,gradFunc:e=>({x:()=>Nb(e)})},{kernelName:jf,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Kb(n.shape,r.shape);return{a:()=>{let t=e;const r=qb(n.shape,s);return r.length>0&&(t=Ex(t,r)),Hy(t,n.shape)},b:()=>{let t=e;const n=qb(r.shape,s);return n.length>0&&(t=Ex(t,n)),Hy(Kx(t),r.shape)}}}},{kernelName:Nf,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;kh(a,r.shape).forEach((e=>{s[e]=1}));const i=Hy(e,s),o=Cb(i,Jx(r.shape,"float32"));return{x:()=>o}}},{kernelName:qf,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_b(e,Eb(OI(n)))}}},{kernelName:Kf,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cb(Vb(Ab(1),Eb(n)),e)}}},GI,{kernelName:Jf,gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=Mx(s);return{x:()=>Rw(e,a)}}},{kernelName:em,gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>$w(e,s)}}},{kernelName:tm,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Xb(t,Nb(t)),r=$x(e,n);let s=Ix(t,Ab(0,"int32"));const a=r.rank-s.rank;for(let e=0;e<a;++e)s=yx(s,e+1);s=Px(s,Jx(r.shape,"bool"));const i=Nb(r);return Tw(s,r,i)}(e,n)}}},{kernelName:nm,gradFunc:e=>({x:()=>Nb(e)})}];for(const e of HI)gm(e);ng().prototype.abs=function(){return this.throwIfDisposed(),Hb(this)};const jI=Ag({acos_:function(e){const t={x:Ng(e,"x","acos")};return $g.runKernel(Qh,t)}});ng().prototype.acos=function(){return this.throwIfDisposed(),jI(this)};const qI=Ag({acosh_:function(e){const t={x:Ng(e,"x","acosh")};return $g.runKernel(ed,t)}});ng().prototype.acosh=function(){return this.throwIfDisposed(),qI(this)},ng().prototype.add=function(e){return this.throwIfDisposed(),Ib(this,e)},ng().prototype.all=function(e,t){return this.throwIfDisposed(),Cy(this,e,t)},ng().prototype.any=function(e,t){return this.throwIfDisposed(),Ty(this,e,t)},ng().prototype.argMax=function(e){return this.throwIfDisposed(),Ey(this,e)};const KI=Ag({argMin_:function(e,t=0){const n={x:Ng(e,"x","argMin")},r={axis:t};return $g.runKernel(id,n,r)}});ng().prototype.argMin=function(e){return this.throwIfDisposed(),KI(this,e)},ng().prototype.asScalar=function(){return this.throwIfDisposed(),ph(1===this.size,(()=>"The array must have only 1 element.")),Hy(this,[])},ng().prototype.asType=function(e){return this.throwIfDisposed(),$b(this,e)},ng().prototype.as1D=function(){return this.throwIfDisposed(),Hy(this,[this.size])},ng().prototype.as2D=function(e,t){return this.throwIfDisposed(),Hy(this,[e,t])},ng().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Hy(this,[e,t,n])},ng().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),Hy(this,[e,t,n,r])},ng().prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),Hy(this,[e,t,n,r,s])};const XI=Ag({asin_:function(e){const t={x:Ng(e,"x","asin")};return $g.runKernel(od,t)}});ng().prototype.asin=function(){return this.throwIfDisposed(),XI(this)};const YI=Ag({asinh_:function(e){const t={x:Ng(e,"x","asinh")};return $g.runKernel(ud,t)}});ng().prototype.asinh=function(){return this.throwIfDisposed(),YI(this)};const ZI=Ag({atan_:function(e){const t={x:Ng(e,"x","atan")};return $g.runKernel(ld,t)}});ng().prototype.atan=function(){return this.throwIfDisposed(),ZI(this)};const JI=Ag({atan2_:function(e,t){let n=Ng(e,"a","atan2"),r=Ng(t,"b","atan2");[n,r]=fg(n,r);const s={a:n,b:r};return $g.runKernel(hd,s)}});ng().prototype.atan2=function(e){return this.throwIfDisposed(),JI(this,e)};const QI=Ag({atanh_:function(e){const t={x:Ng(e,"x","atanh")};return $g.runKernel(cd,t)}});ng().prototype.atanh=function(){return this.throwIfDisposed(),QI(this)},ng().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),jy(this,e,t,n,r)},ng().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),WI(this,e,t)},ng().prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),Ky(this,e,t,n,r,s)},ng().prototype.broadcastTo=function(e){return this.throwIfDisposed(),Jy(this,e)},ng().prototype.cast=function(e){return this.throwIfDisposed(),$b(this,e)};const eS=Ag({ceil_:function(e){const t={x:Ng(e,"x","ceil","float32")};return $g.runKernel($d,t)}});ng().prototype.ceil=function(){return this.throwIfDisposed(),eS(this)},ng().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Qy(this,e,t)},ng().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof tg&&(e=[e]),ex([this,...e],t)},ng().prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),ix(this,e,t,n,r,s,a)},ng().prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),ux(this,e,t,n,r,s)},ng().prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),ax(this,e,t,n,r,s,a)},ng().prototype.cos=function(){return this.throwIfDisposed(),OI(this)},ng().prototype.cosh=function(){return this.throwIfDisposed(),zI(this)},ng().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),bI(this,e,t,n)},ng().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),kk(this,e,t,n)};const tS=Ag({depthToSpace_:function(e,t,n="NHWC"){const r=Ng(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];ph(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),ph(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),ph(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),ph(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${r.shape}`));const o={x:r},u={blockSize:t,dataFormat:n};return $g.runKernel(Bd,o,u)}});ng().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),tS(this,e,t)},ng().prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),px(this,e,t,n,r,s,a)};const nS=Ag({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const i=Ng(e,"x","dilation2d"),o=Ng(t,"filter","dilation2d");ph(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),ph(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),ph("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=i,l=!1;3===i.rank&&(u=Hy(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=!0),ph(u.shape[3]===o.shape[2],(()=>`Error in dilation2d:  input and filter must have the same depth: ${u.shape[3]} vs ${o.shape[2]}`));const c={x:u,filter:o},h={strides:n,pad:r,dilations:s},d=$g.runKernel(Gd,c,h);return l?Hy(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});ng().prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),nS(this,e,t,n,r,s)};const rS=Ag({divNoNan_:function(e,t){let n=Ng(e,"a","div"),r=Ng(t,"b","div");[n,r]=fg(n,r);const s=_b(n,r),a=Nb(s),i=mx(r,a);return Tw(i,a,s)}});ng().prototype.divNoNan=function(e){return this.throwIfDisposed(),rS(this,e)},ng().prototype.div=function(e){return this.throwIfDisposed(),_b(this,e)};const sS=Ag({dot_:function(e,t){const n=Ng(e,"t1","dot"),r=Ng(t,"t2","dot");ph(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(ph(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=Hy(n,[1,-1]),t=Hy(r,[-1,1]),s=Wx(e,t);return Hy(s,[])}if(1===n.rank&&2===r.rank){const e=Hy(n,[1,-1]),t=Hy(r,[r.shape[0],r.shape[1]]),s=Wx(e,t);return Hy(s,[s.size])}if(2===n.rank&&1===r.rank){const e=Hy(r,[-1,1]),t=Wx(n,e);return Hy(t,[t.size])}{const e=Hy(r,[r.shape[0],r.shape[1]]);return Wx(n,e)}}});ng().prototype.dot=function(e){return this.throwIfDisposed(),sS(this,e)},ng().prototype.elu=function(){return this.throwIfDisposed(),fx(this)},ng().prototype.equal=function(e){return this.throwIfDisposed(),mx(this,e)},ng().prototype.erf=function(){return this.throwIfDisposed(),gx(this)};const aS=Ag({euclideanNorm_:function(e,t=null,n=!1){return kv(e,"euclidean",t,n)}});ng().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),aS(this,e,t)},ng().prototype.exp=function(){return this.throwIfDisposed(),bx(this)},ng().prototype.expandDims=function(e){return this.throwIfDisposed(),yx(this,e)};const iS=Ag({expm1_:function(e){const t={x:Ng(e,"x","expm1")};return $g.runKernel(tp,t)}});ng().prototype.expm1=function(){return this.throwIfDisposed(),iS(this)},ng().prototype.fft=function(){return this.throwIfDisposed(),Dw(this)},ng().prototype.flatten=function(){return this.throwIfDisposed(),Hy(this,[this.size])},ng().prototype.floor=function(){return this.throwIfDisposed(),vx(this)},ng().prototype.floorDiv=function(e){return this.throwIfDisposed(),Sb(this,e)},ng().prototype.gather=function(e,t,n){return this.throwIfDisposed(),$x(this,e,t,n)},ng().prototype.greaterEqual=function(e){return this.throwIfDisposed(),Ix(this,e)},ng().prototype.greater=function(e){return this.throwIfDisposed(),kx(this,e)},ng().prototype.ifft=function(){return this.throwIfDisposed(),Fw(this)},ng().prototype.irfft=function(){return this.throwIfDisposed(),zw(this)};const oS=Ag({isFinite_:function(e){const t={x:Ng(e,"x","isFinite")};return $g.runKernel(mp,t)}});ng().prototype.isFinite=function(){return this.throwIfDisposed(),oS(this)};const uS=Ag({isInf_:function(e){const t={x:Ng(e,"x","isInf")};return $g.runKernel(gp,t)}});ng().prototype.isInf=function(){return this.throwIfDisposed(),uS(this)};const lS=Ag({isNaN_:function(e){const t={x:Ng(e,"x","isNaN")};return $g.runKernel(bp,t)}});ng().prototype.isNaN=function(){return this.throwIfDisposed(),lS(this)},ng().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Sx(this,e)},ng().prototype.lessEqual=function(e){return this.throwIfDisposed(),gv(this,e)},ng().prototype.less=function(e){return this.throwIfDisposed(),wv(this,e)};const cS=Ag({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=Ng(e,"x","localResponseNormalization");ph(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),ph(yh(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=Hy(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:i},l={depthRadius:t,bias:n,alpha:r,beta:s},c=$g.runKernel(Cp,u,l);return o?Hy(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});ng().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),cS(this,e,t,n,r)};const hS=Ag({logSigmoid_:function(e){const t=Ng(e,"x","logSigmoid");return Rb((e=>({value:Kx(xw(Kx(e))),gradFunc:t=>Cb(t,dw(Kx(e)))})))(t)}});ng().prototype.logSigmoid=function(){return this.throwIfDisposed(),hS(this)},ng().prototype.logSoftmax=function(e){return this.throwIfDisposed(),Nx(this,e)},ng().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Bx(this,e,t)},ng().prototype.log=function(){return this.throwIfDisposed(),_x(this)},ng().prototype.log1p=function(){return this.throwIfDisposed(),Cx(this)},ng().prototype.logicalAnd=function(e){return this.throwIfDisposed(),Px(this,e)},ng().prototype.logicalNot=function(){return this.throwIfDisposed(),EI(this)};const dS=Ag({logicalOr_:function(e,t){const n=Ng(e,"a","logicalOr","bool"),r=Ng(t,"b","logicalOr","bool");Kb(n.shape,r.shape);const s={a:n,b:r};return $g.runKernel(_p,s)}});ng().prototype.logicalOr=function(e){return this.throwIfDisposed(),dS(this,e)};const pS=Ag({logicalXor_:function(e,t){const n=Ng(e,"a","logicalXor","bool"),r=Ng(t,"b","logicalXor","bool");return Kb(n.shape,r.shape),Px(dS(e,t),EI(Px(e,t)))}});ng().prototype.logicalXor=function(e){return this.throwIfDisposed(),pS(this,e)},ng().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),Wx(this,e,t,n)},ng().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),Ux(this,e,t,n,r)},ng().prototype.max=function(e,t){return this.throwIfDisposed(),Tx(this,e,t)},ng().prototype.maximum=function(e){return this.throwIfDisposed(),Xb(this,e)},ng().prototype.mean=function(e,t){return this.throwIfDisposed(),Gx(this,e,t)},ng().prototype.min=function(e,t){return this.throwIfDisposed(),Hx(this,e,t)},ng().prototype.minimum=function(e){return this.throwIfDisposed(),jx(this,e)};const fS=Ag({mirrorPad_:function(e,t,n){ph("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=Ng(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");ph(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)ph(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ph(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},i={x:r};return $g.runKernel(Bp,i,a)}});ng().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),fS(this,e,t)};const mS=Ag({mod_:function(e,t){let n=Ng(e,"a","mod"),r=Ng(t,"b","mod");[n,r]=fg(n,r);const s={a:n,b:r};return $g.runKernel(Pp,s)}});ng().prototype.mod=function(e){return this.throwIfDisposed(),mS(this,e)},ng().prototype.mul=function(e){return this.throwIfDisposed(),Cb(this,e)},ng().prototype.neg=function(){return this.throwIfDisposed(),Kx(this)},ng().prototype.norm=function(e,t,n){return this.throwIfDisposed(),kv(this,e,t,n)},ng().prototype.notEqual=function(e){return this.throwIfDisposed(),Xx(this,e)},ng().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),Yx(this,e,t,n)},ng().prototype.onesLike=function(){return this.throwIfDisposed(),Qx(this)},ng().prototype.pad=function(e,t){return this.throwIfDisposed(),ew(this,e,t)};const gS=Ag({pool_:function(e,t,n,r,s,a,i){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const o=Ng(e,"x","maxPool");let u=o,l=!1;3===o.rank&&(l=!0,u=Hy(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ph(Wy(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=Ry(u.shape,t,a,s,r),h=[c.dilationHeight,c.dilationWidth];let d;d="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=s.map(((e,t)=>e+i[t]));return[t.map(((e,t)=>[r[t],o[t]])),t.map(((e,t)=>[0,i[t]]))]}([c.inHeight,c.inWidth],h,d),g=p?r:"valid",b=p?u:ok(u,h,f),y=("avg"===n?()=>jy(b,t,a,g,i):()=>Ux(b,t,a,g,i))(),x=p?y:WI(y,h,m);return l?Hy(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});ng().prototype.pool=function(e,t,n,r,s,a){return this.throwIfDisposed(),gS(this,e,t,n,r,s,a)},ng().prototype.pow=function(e){return this.throwIfDisposed(),Ub(this,e)},ng().prototype.prelu=function(e){return this.throwIfDisposed(),tw(this,e)};const bS=Ag({prod_:function(e,t=null,n=!1){let r=Ng(e,"x","prod");"bool"===r.dtype&&(r=$b(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return $g.runKernel(ef,s,a)}});ng().prototype.prod=function(e,t){return this.throwIfDisposed(),bS(this,e,t)};const yS=Ag({reciprocal_:function(e){const t={x:Ng(e,"x","reciprocal")};return $g.runKernel(of,t)}});ng().prototype.reciprocal=function(){return this.throwIfDisposed(),yS(this)},ng().prototype.relu=function(){return this.throwIfDisposed(),uw(this)},ng().prototype.relu6=function(){return this.throwIfDisposed(),Lw(this)},ng().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Hy(this,e.shape)},ng().prototype.reshape=function(e){return this.throwIfDisposed(),Hy(this,e)},ng().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),pv(this,e,t,n)},ng().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),fv(this,e,t,n)},ng().prototype.reverse=function(e){return this.throwIfDisposed(),lw(this,e)},ng().prototype.rfft=function(){return this.throwIfDisposed(),Ow(this)},ng().prototype.round=function(){return this.throwIfDisposed(),bv(this)},ng().prototype.rsqrt=function(){return this.throwIfDisposed(),Ok(this)},ng().prototype.selu=function(){return this.throwIfDisposed(),cw(this)},ng().prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),hw(this,e,t,n,r,s,a)},ng().prototype.sigmoid=function(){return this.throwIfDisposed(),dw(this)};const xS=Ag({sign_:function(e){const t={x:Ng(e,"x","sign")};return $g.runKernel(_f,t)}});ng().prototype.sign=function(){return this.throwIfDisposed(),xS(this)},ng().prototype.sin=function(){return this.throwIfDisposed(),xk(this)},ng().prototype.sinh=function(){return this.throwIfDisposed(),vk(this)},ng().prototype.slice=function(e,t){return this.throwIfDisposed(),pw(this,e,t)},ng().prototype.softmax=function(e){return this.throwIfDisposed(),yw(this,e)},ng().prototype.softplus=function(){return this.throwIfDisposed(),xw(this)},ng().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),ok(this,e,t)},ng().prototype.split=function(e,t){return this.throwIfDisposed(),ww(this,e,t)},ng().prototype.sqrt=function(){return this.throwIfDisposed(),Tb(this)},ng().prototype.square=function(){return this.throwIfDisposed(),Eb(this)},ng().prototype.squaredDifference=function(e){return this.throwIfDisposed(),Tv(this,e)},ng().prototype.squeeze=function(e){return this.throwIfDisposed(),vw(this,e)},ng().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof tg?[this,e]:[this,...e];return $w(n,t)},ng().prototype.step=function(e){return this.throwIfDisposed(),Bw(this,e)};const wS=Ag({stridedSlice_:function(e,t,n,r,s=0,a=0,i=0,o=0,u=0){const l={x:Ng(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};return $g.runKernel(Uf,l,c)}});ng().prototype.stridedSlice=function(e,t,n,r,s,a,i,o){return this.throwIfDisposed(),wS(this,e,t,n,r,s,a,i,o)},ng().prototype.sub=function(e){return this.throwIfDisposed(),Vb(this,e)},ng().prototype.sum=function(e,t){return this.throwIfDisposed(),Ex(this,e,t)};const vS=Ag({tan_:function(e){const t={x:Ng(e,"x","tan","float32")};return $g.runKernel(qf,t)}});ng().prototype.tan=function(){return this.throwIfDisposed(),vS(this)},ng().prototype.tanh=function(){return this.throwIfDisposed(),kw(this)},ng().prototype.tile=function(e){return this.throwIfDisposed(),xx(this,e)},ng().prototype.toBool=function(){return this.throwIfDisposed(),$b(this,"bool")},ng().prototype.toFloat=function(){return this.throwIfDisposed(),$b(this,"float32")},ng().prototype.toInt=function(){return this.throwIfDisposed(),$b(this,"int32")};const $S=Ag({topk_:function(e,t=1,n=!0){const r=Ng(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},i={k:t,sorted:n},[o,u]=$g.runKernel(Yf,a,i);return{values:o,indices:u}}});ng().prototype.topk=function(e,t){return this.throwIfDisposed(),$S(this,e,t)},ng().prototype.transpose=function(e){return this.throwIfDisposed(),Rw(this,e)};const kS=Ag({unique_:function(e,t=0){const n=Ng(e,"x","unique","string_or_numeric");ph(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,i]=$g.runKernel(Qf,r,s);return{values:a,indices:i}}});ng().prototype.unique=function(e){return this.throwIfDisposed(),kS(this,e)},ng().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),zk(this,e,t)},ng().prototype.unstack=function(e){return this.throwIfDisposed(),Cw(this,e)},ng().prototype.where=function(e,t){return this.throwIfDisposed(),Tw(e,this,t)},ng().prototype.zerosLike=function(){return this.throwIfDisposed(),Nb(this)};class IS extends Error{constructor(e){super(e),Object.setPrototypeOf(this,IS.prototype)}}class SS extends Error{constructor(e){super(e),Object.setPrototypeOf(this,SS.prototype)}}class _S extends Error{constructor(e){super(e),Object.setPrototypeOf(this,_S.prototype)}}class CS extends Error{constructor(e){super(e),Object.setPrototypeOf(this,CS.prototype)}}class TS extends Error{constructor(e){super(e),Object.setPrototypeOf(this,TS.prototype)}}Error;class ES{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function NS(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function RS(e,t){if(!e)throw new TS(t)}function AS(e,t){let n=0;for(const r of e)r===t&&n++;return n}function DS(e){return 1===e.length?e[0]:e}function OS(e){return Array.isArray(e)?e:[e]}function FS(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function zS(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let MS={};function LS(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function BS(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>BS(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?BS(t):e[n]=t.value)}}}function PS(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in MS)a=MS[s];else if(a=t[s],null==a)throw new _S(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new _S(`${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,u;if(i in n?[o,u]=n[i]:i in MS?[o,u]=MS.className:i in t&&([o,u]=t[i]),null==o)throw new _S(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const e={};for(const t of Object.keys(MS))e[t]=MS[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},MS);for(const e of Object.keys(n))MS[e]=n[e];BS(a.config);const r=u(o,a.config,n,s);return MS=Object.assign({},t),r}{const e=Object.assign({},MS);for(const e of Object.keys(n))MS[e]=n[e];const t=new o(a.config);return MS=Object.assign({},e),t}}}function WS(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function US(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function VS(e){if(null==e)throw new _S(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function GS(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new _S(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function HS(e,t,n=0,r=1/0){return RS(n>=0),RS(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function jS(e,t){Array.isArray(e)?(ph(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>jS(e,`element ${n+1} of ${t}`)))):ph(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${qS(e)}.`))}function qS(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>qS(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function KS(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let XS=0;function YS(){return XS++}const ZS={};function JS(e=""){return e in ZS||(ZS[e]=0),ZS[e]+=1,e+ZS[e].toString()}const QS=["channelsFirst","channelsLast"],e_=["nearest","bilinear"],t_=["valid","same","causal"],n_=["max","avg"],r_=["sum","mul","concat","ave"],s_=new Map;function a_(e){GS(QS,"DataFormat",e)}function i_(e){GS(t_,"PaddingMode",e)}function o_(e){GS(n_,"PoolMode",e)}const u_=[];function l_(e,t){u_.push(e);try{const e=t();return u_.pop(),e}catch(e){throw u_.pop(),e}}function c_(e){if(!p_(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===u_.length?"":u_.join("/")+"/")+e}function h_(e){if(!p_(e))throw new Error("Not a valid tensor name: '"+e+"'");s_.has(e)||s_.set(e,0);const t=s_.get(e);if(s_.set(e,s_.get(e)+1),t>0){const n=`${e}_${t}`;return s_.set(n,1),n}return e}const d_=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function p_(e){return!!e.match(d_)}function f_(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function m_(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r<t&&(t=r)}return t}function g_(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r>t&&(t=r)}return t}function b_(e,t){if(t<e)throw new _S(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}let y_;function x_(){return null==y_&&(y_=$g.backend.epsilon()),y_}function w_(e,t){return $b(e,t)}function v_(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),Hy(e,n)}function $_(e,t,n){return Bg((()=>{switch(e.rank){case 1:return fw(e,t,n);case 2:return mw(e,[t,0],[n,e.shape[1]]);case 3:return gw(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return bw(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return pw(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return pw(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new _S(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function k_(e,t,n){return Bg((()=>{switch(e.rank){case 1:return fw(e,t,n);case 2:return mw(e,[0,t],[e.shape[0],n]);case 3:return gw(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return bw(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new _S(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function I_(e,t,n,r){return Bg((()=>{switch(e.rank){case 1:return fw(e,t,n);case 2:switch(r){case 1:return $_(e,t,n);case 2:return k_(e,t,n);default:throw new _S(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return $_(e,t,n);case 2:return gw(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return k_(e,t,n);default:throw new _S(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return $_(e,t,n);case 2:return bw(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return bw(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return k_(e,t,n);default:throw new _S(`The axis is not within the rank of the tensor ${r}`)}default:throw new _S(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function S_(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),ex(e,t)}function __(e,t){switch(e.rank){case 1:return tx([e,t]);case 2:return nx([e,t],0);case 3:return rx([e,t],0);case 4:return sx([e,t],0);default:throw new _S(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function C_(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new _S(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return xx(e,t)}function T_(e,t=0,n=1,r,s){return aw(e,t,n,r,s)}function E_(e,t,n,r){if(e.rank<2||t.rank<2)throw new CS(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new CS(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return qw({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?A_(e.rank,r,"channelsLast"):null,activation:n});{const s=e.shape.slice(),a=s.pop();e=Hy(e,[-1,a]);const i=t.shape.slice(),o=i.pop(),u=i.pop(),l=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=Hy(Rw(t,c),[u,-1]);const h=[...s,...l];return Hy(qw({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?A_(e.rank,r,"channelsLast"):null,activation:n}),h)}}function N_(e,t,n){return Bg((()=>(t=Array.isArray(t)?Iw(t,"int32"):$b(t,"int32"),$x(e,t,n))))}function R_(e){return Cb(e,e)}function A_(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new _S(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?Hy(t,[1,r[0],1,1,1]):Hy(t,[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?Hy(t,[1,1,1,1,r[0]]):Hy(t,[1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?Hy(t,[1,r[0],1,1]):Hy(t,[1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?Hy(t,[1,1,1,r[0]]):Hy(t,[1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?Hy(t,[1,r[0],1]):Hy(t,[1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?Hy(t,[1,1,r[0]]):Hy(t,[1].concat(r))}else if(e<3)return t;throw new _S(`Unsupported input rank by biasAdd: ${t.rank}`)}function D_(e,t,n){return Bg((()=>(null==n&&(n="channelsLast"),a_(n),Ib(e,A_(e.rank,t,n)))))}function O_(e,t,n,r){return Bg((()=>Aw(e,t,n,r)))}function F_(e,t,n=!1){return n?e():t()}const z_=["fanIn","fanOut","fanAvg"],M_=["normal","uniform","truncatedNormal"];class L_ extends Fb{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class B_ extends L_{apply(e,t){return Zx(e,t)}}B_.className="Zeros",Mb(B_);class P_ extends L_{apply(e,t){return Jx(e,t)}}P_.className="Ones",Mb(P_);class W_ extends L_{constructor(e){if(super(),"object"!=typeof e)throw new _S(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new _S(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return Bg((()=>Cb(Ab(this.value),Jx(e,t))))}getConfig(){return{value:this.value}}}W_.className="Constant",Mb(W_);class U_ extends L_{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return iw(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}U_.className="RandomUniform",Mb(U_);class V_ extends L_{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new CS(`randomNormal does not support dType ${t}.`);return T_(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}V_.className="RandomNormal",Mb(V_);class G_ extends L_{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new CS(`truncatedNormal does not support dType ${t}.`);return _w(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}G_.className="TruncatedNormal",Mb(G_);class H_ extends L_{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Bg((()=>{if(2!==e.length||e[0]!==e[1])throw new _S("Identity matrix initializer can only be used for 2D square matrices.");return Cb(this.gain,wx(e[0]))}))}getConfig(){return{gain:this.gain}}}H_.className="Identity",Mb(H_);class j_ extends L_{constructor(e){if(super(),e.scale<0)throw new _S(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,GS(z_,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){GS(M_,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(a_(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=f_(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=f_(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=f_(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new CS(`${this.getClassName()} does not support dType ${t}.`);return _w(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return iw(e,-n,n,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}j_.className="VarianceScaling",Mb(j_);class q_ extends j_{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return j_.className}}q_.className="GlorotUniform",Mb(q_);class K_ extends j_{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return j_.className}}K_.className="GlorotNormal",Mb(K_);class X_ extends j_{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return j_.className}}X_.className="HeNormal",Mb(X_);class Y_ extends j_{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return j_.className}}Y_.className="HeUniform",Mb(Y_);class Z_ extends j_{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return j_.className}}Z_.className="LeCunNormal",Mb(Z_);class J_ extends j_{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return j_.className}}J_.className="LeCunUniform",Mb(J_);class Q_ extends L_{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,t){return Bg((()=>{if(e.length<2)throw new CS("Shape must be at least 2D.");if("int32"!==t&&"float32"!==t&&void 0!==t)throw new TypeError(`Unsupported data type ${t}.`);const n=gh(e.slice(0,-1)),r=e[e.length-1],s=n*r;s>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${s}) elements: Slowness may result.`);const a=T_([Math.max(r,n),Math.min(r,n)],0,1,t,this.seed),i=Nv.qr(a,!1);let o=i[0];const u=i[1].flatten().stridedSlice([0],[Math.min(r,n)*Math.min(r,n)],[Math.min(r,n)+1]);return o=Cb(o,u.sign()),n<r&&(o=o.transpose()),Cb(Ab(this.gain),o.reshape(e))}))}getConfig(){return{gain:this.gain,seed:this.seed}}}Q_.className="Orthogonal",Mb(Q_);const eC={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function tC(e,t={}){return PS(e,zb.getMap().classNameMap,t,"initializer")}function nC(e){return LS(e)}function rC(e){if("string"==typeof e){const t=e in eC?eC[e]:e;if("GlorotNormal"===t)return new K_;if("GlorotUniform"===t)return new q_;if("HeNormal"===t)return new X_;if("HeUniform"===t)return new Y_;if("LeCunNormal"===t)return new Z_;if("LeCunUniform"===t)return new J_;{const e={};return e.className=t,e.config={},tC(e)}}return e instanceof L_?e:tC(e)}function sC(e){return Array.isArray(e)&&Array.isArray(e[0])}function aC(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function iC(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new _S(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function oC(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new _S(`Expected exactly 1 Shape; got ${e.length}`)}return e}function uC(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const lC="Variable";class cC{constructor(e,t="float32",n=lC,r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=YS(),n=null==n?lC:n,this.originalName=c_(n),this.name=h_(this.originalName),this.trainable_=r,this.constraint=s,this.val=function(e,t=!0,n,r){return $g.makeVariable(e,t,n,r)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function hC(e){return e.map((e=>e.read()))}function dC(e){e.forEach((e=>{e[0].write(e[1])}))}class pC{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class fC{constructor(e,t,n,r,s,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=YS(),null!=a&&(this.originalName=c_(a),this.name=h_(this.originalName)),this.rank=t.length}}let mC=0;class gC{constructor(e,t){this.callArgs=t,this.id=mC++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let bC=0;class yC extends Fb{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=bC++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=FS(e)+"_"+JS(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new SS(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new _S(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return DS(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return DS(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new IS(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new IS(`Layer ${this.name} is not connected, no input to return.`);return DS(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new IS(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new IS(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return DS(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){const t=OS(e);if(null==this.inputSpec||0===this.inputSpec.length)return;const n=OS(this.inputSpec);if(t.length!==n.length)throw new _S(`Layer ${this.name} expects ${n.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`);for(let e=0;e<t.length;e++){const r=t[e],s=n[e];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new _S(`Input ${e} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new _S(`Input ${e} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new _S(`Input ${e} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new _S(`Input ${e} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const n in s.axes){const r=Number(n),a=s.axes[n],i=r>=0?t[r]:t[t.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new _S(`Input ${e} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const n=s.shape[t],a=r.shape[t];if(null!=n&&null!=a&&n!==a)throw new _S(`Input ${e} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=OS(e),r=function(e){let t=!0;for(const n of OS(e))if(!(n instanceof fC)){t=!1;break}return t}(e),s=function(e){let t=!0;for(const n of OS(e))if(n instanceof fC){t=!1;break}return t}(e);if(r===s)throw new _S("Arguments to apply() must be all SymbolicTensors or all Tensors");return l_(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of OS(e))t.push(n.shape);this.build(DS(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);this.supportsMasking&&this.setMaskMetadata(e,r);const s=OS(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=DS(a),null!=this.activityRegularizer)throw new CS("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=OS(e);const t=[];for(const n of e)t.push(n.shape);return DS(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new fC(a,n,this,OS(e),t,this.name,r))):new fC(a,r,this,OS(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new CS("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new IS(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new IS(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new SS(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return uC(this.weights)}build(e){this.built=!0}getWeights(e=!1){return hC(e?this.trainableWeights:this.weights)}setWeights(e){Bg((()=>{const t=this.weights;if(t.length!==e.length)throw new _S(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=hC(t);for(let s=0;s<r.length;++s){const a=r[s],i=t[s],o=e[s];if(!bh(a.shape,o.shape))throw new _S(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}dC(n)}))}addWeight(e,t,n,r,s,a,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new _S(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=o?o():rC("zeros"));const u=r.apply(t,n),l=new cC(u,n,e,a,i);return u.dispose(),null!=s&&this.addLoss((()=>s.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=OS(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}setMaskMetadata(e,t,n){if(!this.supportsMasking)return;const r=this.computeMask(e,n),s=OS(t),a=OS(r);if(s.length!==a.length)throw new Error(`${this.name} outputs ${s.length} tensors but ${s.length} masks for those tensors`);for(let e=0;e<s.length;e++)s[e].kerasMask=a[e]}addInboundNode(e,t,n,r,s,a,i=null){const o=OS(e);t=OS(t),n=OS(n),r=OS(r),s=aC(s),a=aC(a);const u=[],l=[],c=[];for(const e of o)u.push(e.sourceLayer),l.push(e.nodeIndex),c.push(e.tensorIndex);new gC({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function xC(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=xC(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}class wC extends yC{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:JS("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new _S("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new _S("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new _S("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new fC(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new gC({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new _S(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}wC.className="InputLayer",Mb(wC);class vC{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof vC)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new _S(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return $b(t,e.dtype)}catch(n){throw new _S(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof fC){if(null==this.id2Value[e.id])throw new _S(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new _S(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof fC){if(null==this.id2Value[e.id])throw new _S(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new _S(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Pg(this.id2Mask)}}const $C=new ES,kC=new ES;function IC(e,t,n,r){const s=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),u=[],l=t.names();for(const e of o)-1!==l.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().sort().join(",");let h,d=$C.get(c);if(null==d){const e=function(e,t){ph(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===e.length){const s=_C(e[0],t);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of e){const{sorted:e,recipientMap:i}=_C(a,t);for(const t of e)s.has(t.name)||(n.push(t),s.add(t.name));for(const e in i)null==r[e]&&(r[e]=new Set),i[e].forEach((t=>r[e].add(t)))}}return{sorted:n,recipientCounts:SC(r)}}(i,t);d=e.sorted,h=e.recipientCounts,$C.put(c,d),kC.put(c,h)}h={},s||Object.assign(h,kC.get(c));const p=new vC(t);for(let e=0;e<d.length;++e){if(null!=r){const e=Lg().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const a=d[e],i=a.sourceLayer;if(i instanceof wC)continue;const l=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=p.getValue(e),r=p.getMask(e);l.push(n),c.push(r),null!=r&&(m=!0),s||(h[e.name]--,0!==h[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=OS(i.apply(l,n));let b=null;i.supportsMasking&&(b=i.computeMask(l,c));const y=CC(a),x=Array.isArray(y)?y:[y];for(let e=0;e<x.length;++e){p.hasKey(x[e])||p.add(x[e],g[e],Array.isArray(b)?b[0]:b);const t=o.indexOf(x[e].name);-1!==t&&(u[t]=g[e])}s||Pg(f)}return p.disposeMasks(),a?u:u[0]}function SC(e){const t={};for(const n in e)t[n]=e[n].size;return t}function _C(e,t){const n=new Set,r=[],s={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function CC(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function TC(e,t){return Bg((()=>Tb(Ex(Cb(e,e),t,!0))))}qh().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=$C&&$C.setMaxEntries(e),null!=kC&&kC.setMaxEntries(e)}));class EC extends Fb{getConfig(){return{}}}class NC extends EC{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Bg((()=>{const t=TC(e,this.axis),n=Qy(t,0,this.maxValue);return Cb(e,_b(n,Ib(x_(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}NC.className="MaxNorm",Mb(NC);class RC extends EC{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Bg((()=>_b(e,Ib(x_(),TC(e,this.axis)))))}getConfig(){return{axis:this.axis}}}RC.className="UnitNorm",Mb(RC);class AC extends EC{apply(e){return uw(e)}}AC.className="NonNeg",Mb(AC);class DC extends EC{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Bg((()=>{const t=TC(e,this.axis),n=Ib(Cb(this.rate,Qy(t,this.minValue,this.maxValue)),Cb(1-this.rate,t));return Cb(e,_b(n,Ib(x_(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}DC.className="MinMaxNorm",Mb(DC);const OC={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function FC(e){return LS(e)}function zC(e,t={}){return PS(e,zb.getMap().classNameMap,t,"constraint")}function MC(e){return null==e?null:"string"==typeof e?zC({className:e in OC?OC[e]:e,config:{}}):e instanceof EC?e:zC(e)}async function LC(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];Pg(r)}}function BC(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var PC;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(PC||(PC={}));class WC{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class UC{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class VC extends WC{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const s=Bg((()=>Ib(this.totals[e],Cb(r,n))));this.totals[e]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:Bg((()=>{const n=Cb(_b(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),Wg(t[e])})))}}class GC extends WC{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];e.push(i.data()),t.push(r),n.push(a)}}const r=await Promise.all(e);for(let e=0;e<r.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}class HC extends WC{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||Dv,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Nh(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let r,s=null!=n?n():Fm();return(...a)=>{const i=null!=n?n():Fm();return i-s<t||(s=i,r=e(...a)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await LC(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await LC(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await LC(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await LC(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await LC(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Nh(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await LC(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await LC(e),await this.trainEnd(e))}}function jC(e,t){return null==e&&(e={}),e instanceof WC?[e]:Array.isArray(e)&&e[0]instanceof WC?e:OS(e).map((e=>new HC(e,t)))}class qC{constructor(){}static registerCallbackConstructor(e,t){ph(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),qC.checkForDuplicate(t),null==qC.constructors[e]&&(qC.constructors[e]=[]),qC.constructors[e].push(t)}static checkForDuplicate(e){for(const t in qC.constructors)qC.constructors[+t].forEach((t=>{if(t===e)throw new _S("Duplicate callback constructor.")}))}static clear(){qC.constructors={}}static createCallbacks(e){const t=[];for(const n in qC.constructors){const r=+n;e>=r&&t.push(...qC.constructors[r])}return t.map((e=>new e))}}function KC(e,t,n,r,s,a,i,o,u){const l=new GC,c=[new VC,...qC.createCallbacks(t)];null!=e&&c.push(...e),c.push(l);const h=new UC(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:u}),{callbackList:h,history:l}}function XC(e,t={},n=!1){return PS(e,zb.getMap().classNameMap,t,"layer",n)}function YC(e,t){return Bg((()=>{"float32"!==e.dtype&&(e=$b(e,"float32"));const n=Ex(R_(e),t,!0),r=Pb(n.shape,x_()),s=Tb(Xb(n,r));return _b(e,s)}))}function ZC(e,t){return Bg((()=>Gx(R_(Vb(t,e)),-1)))}function JC(e,t){return Bg((()=>Gx(Hb(Vb(t,e)),-1)))}function QC(e,t){return Bg((()=>{const n=Vb(e,t),r=Qy(Hb(e),x_(),Number.MAX_VALUE),s=Hb(_b(n,r));return Cb(100,Gx(s,-1))}))}function eT(e,t,n=!1){return Bg((()=>{if(n)t=yw(t);else{const e=Ex(t,t.shape.length-1,!0);t=_b(t,e)}return t=Qy(t,x_(),1-x_()),Kx(Ex(Cb($b(e,"float32"),_x(t)),t.shape.length-1))}))}function tT(e,t,n=!1){return Bg((()=>{const r=$b(vx(function(e){const t=[f_(e.shape)];return Hy(e,t)}(e)),"int32"),s=(t=Qy(t,x_(),1-x_())).shape;return eT(Hy(Yx(r,s[s.length-1]),s),t,n)}))}function nT(e,t){return Bg((()=>{let n;return n=Qy(t,x_(),1-x_()),n=_x(_b(n,Vb(1,n))),Gx(function(e,t){if(!bh(e.shape,t.shape))throw new _S(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Bg((()=>{const n=uw(t),r=Kx(Hb(t));return Ib(Vb(n,Cb(t,e)),Cx(bx(r)))}))}(e,n),-1)}))}function rT(e,t){return Bg((()=>{const n=YC(e,-1),r=YC(t,-1),s=Cb(n,r);return Kx(Ex(s,-1))}))}qC.constructors={};const sT={meanSquaredError:ZC,meanAbsoluteError:JC,meanAbsolutePercentageError:QC,meanSquaredLogarithmicError:function(e,t){return Bg((()=>{const n=Qy(t,x_(),Number.MAX_VALUE),r=_x(Ib(1,n)),s=Qy(e,x_(),Number.MAX_VALUE),a=_x(Ib(1,s));return Gx(R_(Vb(r,a)),-1)}))},squaredHinge:function(e,t){return Bg((()=>{const n=Xb(0,Vb(1,Cb(e,t)));return Gx(R_(n),-1)}))},hinge:function(e,t){return Bg((()=>{const n=Xb(0,Vb(1,Cb(e,t)));return Gx(n,-1)}))},categoricalHinge:function(e,t){return Bg((()=>{const n=Ex(Cb(e,t),-1),r=Tx(Cb(Vb(1,e),t),-1);return Xb(0,Ib(1,Vb(r,n)))}))},logcosh:function(e,t){return Bg((()=>{const n=Math.log(2),r=Vb(t,e),s=Vb(Ib(r,xw(Cb(-2,r))),n);return Gx(s,-1)}))},categoricalCrossentropy:eT,sparseCategoricalCrossentropy:tT,binaryCrossentropy:nT,kullbackLeiblerDivergence:function(e,t){return Bg((()=>{const n=Qy(e,x_(),1),r=Qy(t,x_(),1);return Ex(Cb(e,_x(_b(n,r))),-1)}))},poisson:function(e,t){return Bg((()=>{const n=_x(Ib(x_(),t));return Gx(Vb(t,Cb(e,n)),-1)}))},cosineProximity:rT};function aT(e){if("string"==typeof e){if(e in sT)return sT[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new _S(t)}return e}function iT(e,t){return Bg((()=>{const n=Cb(.5,Qx(t)),r=w_(kx(t,n),e.dtype);return Gx(mx(e,r),-1)}))}function oT(e,t){return Bg((()=>w_(mx(Ey(e,-1),Ey(t,-1)),"float32")))}function uT(e,t){return nT(e,t)}function lT(e,t){return e.rank===t.rank&&(e=vw(e,[e.rank-1])),(t=Ey(t,-1)).dtype!==e.dtype&&(t=$b(t,e.dtype)),$b(mx(e,t),"float32")}const cT=eT,hT=tT,dT={binaryAccuracy:iT,categoricalAccuracy:oT,precision:function(e,t){return Bg((()=>{const n=function(e,t){return Bg((()=>$b(Ex(Px(mx(e,1),mx(t,1))),"float32")))}(e,t),r=function(e,t){return Bg((()=>$b(Ex(Px(mx(e,0),mx(t,1))),"float32")))}(e,t),s=Ib(n,r);return $b(Tw(kx(s,0),_b(n,s),0),"float32")}))},categoricalCrossentropy:cT,sparseCategoricalCrossentropy:hT,mse:ZC,MSE:ZC,mae:JC,MAE:JC,mape:QC,MAPE:QC,cosine:rT};function pT(e){if("string"==typeof e&&e in dT)return dT[e];if("string"!=typeof e&&null!=e)return e;throw new _S(`Unknown metric ${e}`)}function fT(e){if(RS(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(sT))if(sT[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(dT))if(dT[n]===e){t=n;break}return void 0!==t?t:e.name}}function mT(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!gT(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function gT(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!gT(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!gT(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function bT(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function yT(e,t,n){let r,s;try{s=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){s="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}bT([`${e.name} (${e.getClassName()})`,s,r,e.countParams().toString()],t,n)}function xT(e,t,n,r){let s,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}const i=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,r=t.nodeIndices[e],s=t.tensorIndices[e];i.push(`${n}[${r}][${s}]`)}const o=e.name,u=e.getClassName(),l=0===i.length?"":i[0];bT([`${o} (${u})`,a,s,e.countParams().toString(),l],t,r);for(let e=1;e<i.length;++e)bT(["","","","",i[e]],t,r)}function wT(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function vT(e,t){if(null===e)return null;if("string"==typeof e)return zS(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];wT(t,s,r)?n.push(r):n.push(vT(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=zS(n);t[e]=vT(r,e)}}return t}}function $T(e,t){if(null==e)return null;if("string"==typeof e)return FS(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];wT(t,s,r)?n.push(r):n.push($T(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];t[FS(n)]="name"!==n&&"className"!==n||"string"!=typeof r?$T(r,n):r}return t}}const kT="4.20.0";class IT extends yC{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=JS(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],US(this.inputs).length!==this.inputs.length)throw new _S(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);US(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;RS(0===n,"input layer has >1 nodes"),RS(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof wC))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},r={},s={},a={},i=[],o=(e,t,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=e.sourceLayer,s=e.nodeIndex,u=e.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new SS(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(l))return;this.containerNodes.add(IT.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let e=0;e<c;e++){const r=l.inputTensors[e],s=l.inboundLayers[e],a=l.nodeIndices[e],i=l.tensorIndices[e];o(r,t,n,s,a,i)}for(t.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);i.push(l)},u=[],l=[];for(const e of this.outputs)o(e,u,l);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];a=Math.max(a,i),r[e.outboundLayer.id]=a,s[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],i=e.nodeIndices[r],o=s.inboundNodes[i],u=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,u),n[o.id]=o}}const h={};for(const e in t){const r=t[e];r in h||(h[r]=[]),h[r].push(n[e])}const d={};for(const e in r){const t=r[e];t in d||(d[t]=[]),d[t].push(s[e])}let p=Object.keys(d).map((e=>parseInt(e,10))).sort(WS);this.layers=[];for(const e of p){const t=d[e];t.sort(((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0}));for(const e of t)e instanceof IT&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=d,p=Object.keys(h).map((e=>parseInt(e,10))).sort(WS);const f=this.inputs.slice(),m=[];for(const e of p)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new SS(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new SS(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new gC({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new _S("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;const s=(e=>{const t=Object.keys(e);if(0===t.length)return!1;const n=t[0].split("/");return!isNaN(parseInt(n[n.length-1],10))})(e);s&&this.parseWeights(e);for(const e of this.layers)for(const[t,a]of e.weights.entries()){const e=s?`${a.name.split("/").slice(0,-1).join("/")+"/"}${t}`:a.originalName;if(null!=n[e])throw new _S(`Duplicate weight name: ${e}`);n[e]=a,r++}const a=[];for(const r in e){let s=r;if(null==n[r]){const e=r.split("/");s=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[s])a.push([n[s],e[r]]);else if(t)throw new _S(`Provided weight data has no target variable: ${r}`);delete n[s]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new _S(`${e.length} of ${r} weights are not set: ${e}`)}dC(a)}parseWeights(e){for(const t in Object.keys(e)){const n=t.split("/"),r=["vars","layer_checkpoint_dependencies"],s=n.map((e=>e.startsWith("_")?e.slice(1):e)).filter((e=>!r.includes(e))).join("/");s!==t&&(e[s]=e[t],delete e[t])}}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${kT}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=$T(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Bg((()=>{e=OS(e);const n=new vC;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return IC(this.outputs,n,t)}))}computeMask(e,t){return Bg((()=>{let n;return e=OS(e),n=null==t?NS(null,e.length):OS(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=aC(e);if(t.length!==this.inputLayers.length)throw new _S(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const r=this.inputLayers[e],s=t[e];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(WS);if(r.length>1)for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const r=[];for(let t=0;t<e.inboundLayers.length;t++){const s=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=aC(t.computeOutputShape(DS(r))),a=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++)n[`${t.name}_${a}_${e}`]=s[e]}}const s=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],s=`${t.name}_${n}_${r}`;a.push(s)}for(let e=0;e<a.length;e++){const t=a[e];RS(t in n),s.push(n[t])}return DS(s)}runInternalGraph(e,t){null==t&&(t=NS(null,e.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=e[r],i=t[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(WS);for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,s=e.outputTensors,a=new Array;for(const e of r)e.id in n&&a.push(n[e.id]);if(a.length===r.length){let r,i,o,u,l={};if(null!=e.callArgs&&(l=e.callArgs),1===a.length){const[e,n]=a[0];null==l.mask&&(l.mask=n),o=OS(t.call(e,l)),u=OS(t.computeMask(e,n)),r=[e],i=[n]}else r=a.map((e=>e[0])),i=a.map((e=>e[1])),null==l.mask&&(l.mask=i),o=OS(t.call(r,l)),u=OS(t.computeMask(r,i));if(t.activityRegularizer)throw new CS("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e){const t=s[e],r=o[e],a=u[e];n[t.id]=[r,a]}}}}const s=[],a=[],i=[];for(const e of this.outputs){RS(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,r]=n[e.id];i.push(t.shape),s.push(t),a.push(r)}return[s,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof IT?1:0;for(let r=0;r<e.inboundNodes.length;r++){const s=IT.nodeKey(e,r);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t)return this.findLayer(t);if(null==e)throw new _S("Provide either a layer name or layer index");if("number"==typeof e)return this.findLayer(e);for(const t of this.layers)if(t.name===e)return t;throw new _S(`No such layer: ${e}`)}findLayer(e){if(this.layers.length<=e)throw new _S(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}calculateLosses(){return Bg((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=IT.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const r=e.getClassName(),s=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const r=e.inboundNodes[n],s=IT.nodeKey(e,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(r.inboundLayers.length>0){const e=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let u=t[IT.nodeKey(s,a)];null==u&&(u=0),e.push([s.name,u,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}e.layers=n;const r=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],s=this.inputLayersNodeIndices[e],a=IT.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];r.push([n.name,i,o])}e.inputLayers=r;const s=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],a=IT.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];s.push([n.name,i,o])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let r;for(const a of t){const o=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(e,t);const c=s[o];if(c.inboundNodes.length<=u)return void i(e,t);const h=c.inboundNodes[u];n.push(h.outputTensors[l])}n.length>0&&e.apply(DS(n),r)}function u(e){const n=e.name,a=XC(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new _S(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const l=t.name,c=t.layers;for(const e of c)u(e);for(;!VS(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],d=[],p=t.inputLayers;for(const e of p){const t=e[0],n=e[1],r=e[2];RS(t in s);const a=s[t].inboundNodes[n].outputTensors;h.push(a[r])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],r=e[2];RS(t in s);const a=s[t].inboundNodes[n].outputTensors;d.push(a[r])}return new e({inputs:h,outputs:d,name:l})}get stateful(){if(this._stateful)throw new _S("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Bg((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function ST(e,t){return function(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function _T(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Bg((()=>{if(1===e.shape.length)return kb(e);if(2===e.shape.length){if(e.shape[1]>1)return Ey(e,1);if(1===e.shape[1])return Hy(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await t.data());Pg(t);const s=[];return r.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);s.push(n[e])})),Iw(s,"float32")}return null}function CT(e,t){return Cb(e,t)}function TT(e,t){let n,r;const s=t;n=s.xs,r=s.ys,ph(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=ET("input",e.inputNames,n),i=ET("output",e.outputNames,r),o=a[0].shape[0];ph(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),ph(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)ph(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)ph(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function ET(e,t,n){if(n instanceof tg)return[n];if(Array.isArray(n))return ph(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const s of t){if(null==n[s])throw new _S(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}function NT(e){return"function"==typeof e.iterator}function RT(e){ph(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function AT(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>$_(e,t,n-t))):$_(e,t,n-t)}function DT(e,t){return Bg((()=>null==e?null:Array.isArray(e)?e.map((e=>DT(e,t))):N_(e,"int32"===t.dtype?t:$b(t,"int32"))))}function OT(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}function FT(e){const t=[];e instanceof tg&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(v_(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function zT(e,t){if(null==e)return;const n=[];if(t instanceof tg)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const r=t[e];n.push(r.id)}const r=[];if(e instanceof tg)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const s=e[t];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function MT(e){return Array.isArray(e)}function LT(e){return!function(e){return e instanceof tg}(e)&&!MT(e)}function BT(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(MT(e)&&e.length>0)t=!0;else if(LT(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new _S(`Error when checking model ${s} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(LT(e)){a=[];for(const n of t){if(null==e[n])throw new _S(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(MT(e)){if(e.length!==t.length)throw new _S(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new _S(`The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=FT(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new _S(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!r)continue;const a=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&a!==o)throw new _S(`${s} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${s} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return a}function PT(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new _S(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new _S(`The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new _S(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[e][a];if(null!=u&&u!==o)throw new _S(`Error when checking ${s}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class WT extends IT{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new _S("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(s?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!s){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}r("_".repeat(t)),bT(a,n,r),r("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)s?yT(o[e],n,r):xT(o[e],n,i,r),r((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const u=function(e){let t;return t=null!=e.collectedTrainableWeights?uC(e.collectedTrainableWeights):uC(e.trainableWeights),t}(e),l=uC(e.nonTrainableWeights);r(`Total params: ${u+l}`),r(`Trainable params: ${u}`),r(`Non-trainable params: ${l}`),r("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Rv.adagrad(.01),Adadelta:()=>Rv.adadelta(1,.95,x_()),Adam:()=>Rv.adam(.001,.9,.999,x_()),Adamax:()=>Rv.adamax(.002,.9,.999,x_(),0),RMSProp:()=>Rv.rmsprop(.001,.9,0,x_()),SGD:()=>Rv.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new _S(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Lb))throw new _S("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new _S(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>aT(e)))}else{const n=aT(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new _S(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(aT(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],l_("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};l_("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,r,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===nT?-1!==["accuracy","acc"].indexOf(i)?r=iT:-1!==["crossentropy","ce"].indexOf(i)&&(r=uT):this.lossFunctions[e]===tT?-1!==["accuracy","acc"].indexOf(i)?r=lT:-1!==["crossentropy","ce"].indexOf(i)&&(r=hT):-1!==["accuracy","acc"].indexOf(i)?r=oT:-1!==["crossentropy","ce"].indexOf(i)&&(r=cT),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const e=pT(i);a=e,n=""+fT(i)}let t;l_(n,(()=>{t=a})),s(e,n,t)}})(r[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;RT(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const e=s[0].concat(s[1]);this.makeTestFunction();const t=this.testFunction;return DS(this.testLoop(t,e,r,n.verbose,n.steps))}finally{zT(s[0],e),zT(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const r=null!=(n=n||{}).batches,s=e.testFunction;let a=[];if(n.verbose>0)throw new CS("Verbose mode is not implemented yet.");ph(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,u=0;for(;!r||u<n.batches;){const t=await i.next();if(a=Bg((()=>{if(t.value){const{xs:n,ys:r}=TT(e,t.value),i=n.concat(r),l=Bg((()=>s(i)));if(Pg(i),0===u)for(let e=0;e<l.length;++e)a.push(Ab(0));const c=i[0].shape[0];for(let e=0;e<l.length;++e){const t=l[e],n=a[e];a[e]=Bg((()=>Ib(a[e],Cb(c,t)))),u>0&&Pg(n)}Pg(l),o+=c,++u}return a})),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=_b(a[e],o),Pg(t)}return DS(a)}(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new _S(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new _S(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new _S("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=n?t:[t],s=this.retrieveSymbolicTensors(r),a=new vC;if(e instanceof tg&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new _S(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new _S(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=IC(s,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=NS(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((e=>e.name));for(let r=0;r<e.length;++r){const i=a.indexOf(e[r]);if(-1!==i&&(t[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,r)=>{null==t&&n.push(e[r])})),new _S(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return Bg((()=>{const r=this.checkNumSamples(e);if(n)throw new CS("Verbose predictLoop() is not implemented yet.");const s=OT(r,t),a=this.outputs.map((e=>[]));for(let t=0;t<s.length;++t)Bg((()=>{const n=s[t][0],r=s[t][1],a=AT(e,n,r),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new vC(i);return IC(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)));return DS(a.map((e=>ex(e,0))))}))}predict(e,t={}){const n=FT(e);PT(n,this.inputNames,this.feedInputShapes,!1);try{const e=null==t.batchSize?32:t.batchSize;return RT(e),this.predictLoop(n,e)}finally{zT(n,e)}}predictOnBatch(e){PT(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new SS("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===tT?s.push(t.slice(0,t.length-1).concat([1])):s.push(t)}if(function(e,t){const n=US(e.map((e=>e.shape[0])));n.sort();const r=US(t.map((e=>e.shape[0])));if(r.sort(),n.length>1)throw new _S(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new _S(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(n.length>0&&r.length>0&&!bh(n,r))throw new _S(`Input Tensors should have the same number of samples as target Tensors. Found ${n[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=BT(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=BT(t,this.feedOutputNames,s,!1,"target")),function(e,t,n){const r=[ZC,nT,eT];for(let s=0;s<e.length;++s){const a=e[s],i=t[s],o=n[s];if(null!=i){if(i===eT&&1===a.shape[a.shape.length-1])throw new _S(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new _S(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new _S(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const e=ST(r,this.outputNames);u=[];for(let t=0;t<e.length;++t)u.push(await _T(o[t],null,e[t]))}return[i,o,u]}testLoop(e,t,n,r=0,s){return Bg((()=>{const a=this.checkNumSamples(t,n,s,"steps"),i=[];if(r>0)throw new CS("Verbose mode is not implemented yet.");if(null!=s)throw new CS("steps mode in testLoop() is not implemented yet");{const r=OT(a,n),s=Iw(b_(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],u=$_(s,a,o-a),l=DT(t,u),c=e(l);if(0===n)for(let e=0;e<c.length;++e)i.push(Ab(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=Ib(i[e],Cb(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=_b(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;AS(e,r)>1&&(s+=`_${AS(e.slice(0,n),r)}`),t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new vC(e),o=IC(this.outputs,i,{training:!0});let u;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(r[e],o[e]);null!=s[e]&&(n=CT(n,s[e]));const a=Gx(n);t.push(a),u=0===e?n:Ib(u,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],s=this.metricsTensors[e][1];n=Gx(t(r[s],o[s]))}Wg(n),a.push(n)}return u=Gx(u),this.calculateLosses().forEach((e=>{u=Ib(u,e)})),u}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>Bg((()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const i=new vC(a),o=IC(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const r=this.lossFunctions[e],a=Gx(r(s[e],o[e]));n=0===e?a:Ib(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],r=this.metricsTensors[e][1],a=Gx(n(s[r],o[r]));t.push(a)}return t}))}async fit(e,t,n={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,s,a,i,o,u,l,c,h;this.isTraining=!0;try{const d=null==n.batchSize?32:n.batchSize;RT(d);const p=!1,f=await this.standardizeUserData(e,t,n.sampleWeight,n.classWeight,p,d);r=f[0],s=f[1],h=f[2];let m,g=!1;if(null!=n.validationData&&n.validationData.length>0){if(g=!0,2!==n.validationData.length)throw 3===n.validationData.length?new CS("validationData including sample weights is not supported yet."):new _S(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`);o=n.validationData[0],u=n.validationData[1];const e=!0,t=await this.standardizeUserData(o,u,null,null,e,d);l=t[0],c=t[1],m=l.concat(c)}else if(null!=n.validationSplit&&n.validationSplit>0&&n.validationSplit<1){g=!0;const e=Math.floor(r[0].shape[0]*(1-n.validationSplit)),t=r[0].shape[0];l=AT(r,e,t),a=r,r=AT(r,0,e),c=AT(s,e,t),i=s,s=AT(s,0,e),m=l.concat(c)}else null!=n.validationSteps&&(g=!0);const b=r.concat(s).concat(h);this.checkTrainableWeightsConsistency();const y=this.makeTrainFunction(),x=this.getDedupedMetricsNames();let w,v;g?(this.makeTestFunction(),w=this.testFunction,v=x.slice().concat(x.map((e=>"val_"+e)))):(w=null,m=[],v=x.slice());const $=jC(n.callbacks,n.yieldEvery);return await this.fitLoop(y,b,x,d,n.epochs,n.verbose,$,w,m,n.shuffle,v,n.initialEpoch,null,null)}finally{this.isTraining=!1,zT(r,e),zT(s,t),zT(a,e),zT(i,t),zT(l,o),zT(c,u),null!=h&&Pg(h)}}async fitLoop(e,t,n,r,s,a,i,o,u,l,c,h,d,p){null==r&&(r=32),null==s&&(s=1),null==l&&(l=!0),null==h&&(h=0);let f=!1;if(null!=o&&null!=u&&(f=!0),null!=p&&(f=!0,null==d))throw new _S("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const m=this.checkNumSamples(t,r,d,"steps_per_epoch");let g;null!=m&&(g=b_(0,m)),null==a&&(a=1);const{callbackList:b,history:y}=KC(i,a,s,h,m,d,r,f,c);b.setModel(this),this.history=y,await b.onTrainBegin(),this.stopTraining_=!1;for(let a=h;a<s;++a){await b.onEpochBegin(a);const s={};if(null!=d)throw new CS("stepsPerEpoch mode is not implemented yet.");{if("batch"===l)throw new CS("batch shuffling is not implemneted yet");l&&lh(g);const a=Iw(g),i=OT(m,r);for(let l=0;l<i.length;++l){const c={};if(await b.onBatchBegin(l,c),Bg((()=>{const h=i[l][0],d=i[l][1],p=$_(a,h,d-h);c.batch=l,c.size=d-h;const m=DT(t,p),g=e(m);for(let e=0;e<n.length;++e){const t=n[e],r=g[e];c[t]=r,Wg(r)}if(l===i.length-1&&f){const e=this.testLoop(o,u,r);for(let t=0;t<n.length;++t){const r=n[t],a=e[t];Wg(a),s["val_"+r]=a}}})),await b.onBatchEnd(l,c),BC(c),this.stopTraining_)break}a.dispose()}if(await b.onEpochEnd(a,s),this.stopTraining_)break}return await b.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,t){return async function(e,t,n){const r=null!=n.batchesPerEpoch;if(ph(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),ph(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),ph(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),ph(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),ph(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(NT(n.validationData))ph(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new CS("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let l;l=s?u.slice().concat(u.map((e=>"val_"+e))):u.slice();const c=jC(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:d,history:p}=KC(c,h,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,s,l);d.setModel(e),e.history=p,await d.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const l={};await d.onEpochBegin(f);let c=0,h=0;for(r||(m=await t.iterator());!r||c<n.batchesPerEpoch;){const t=await m.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=TT(e,t.value),a={};a.batch=h,a.size=r[0].shape[0],await d.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=ST(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await _T(s[e],null,t[e]))}const l=r.concat(s).concat(i),p=o(l);Pg(l);for(let e=0;e<u.length;++e){const t=u[e],n=p[e];a[t]=n,Wg(n)}await d.onBatchEnd(h,a),BC(a),h++,c++}if(r?c>=n.batchesPerEpoch:t.done){if(s){let t;t=NT(n.validationData)?OS(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):OS(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)l[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(f,l),f++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return Pg(a),zT(n[0],e),zT(n[1],t),DS(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let e=0;e<r.length;++e)n&&!r[e].trainable||t.push({name:r[e].originalName,tensor:s[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Lg().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Lg().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=FS(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>FS(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=FS(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[FS(fT(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>FS(fT(e))));{const e={};for(const t in this.metrics)e[t]=FS(fT(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=XC(vT(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=zS(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>zS(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=zS(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map((e=>zS(e)));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=zS(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=(n=e,Yg.getSaveHandlers(n));if(0===t.length)throw new _S(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new _S(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}var n;if(null==e.save)throw new _S("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const r=await Vg(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${kT}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:n}=await Vg(await this.optimizer.getWeights(),e);r.specs.push(...n),r.data=(a=[r.data,t],zg.join(a))}var a;if(null!=this.userDefinedMetadata){const e=!0;mT(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=r.data,s.weightSpecs=r.specs,e.save(s)}setUserDefinedMetadata(e){mT(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}WT.className="Model",Mb(WT);class UT extends WT{}UT.className="Functional",Mb(UT);class VT extends WT{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:JS("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new _S(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof VT||e instanceof WT;let n;if(t){if(n=e,1!==n.outputs.length)throw new _S("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new _S("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new _S("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new _S("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new wC({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new _S(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new _S("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=xC(this.outputs[0])}this.inboundNodes=[],new gC({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:NS(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(oC(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new WT({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new SS("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new SS("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new SS("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new SS("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let s,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new _S("Legacy serialization format not supported yet.");s=t}else ph(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof VT))throw new CS(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of s){const t=XC(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new _S("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new _S("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}VT.className="Sequential",Mb(VT);class GT extends Fb{getConfig(){return{}}}class HT extends GT{apply(e,t=1){return function(e,t=1){if(1!==t)throw new CS(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return fx(e)}(e,t)}}HT.className="elu",Mb(HT);class jT extends GT{apply(e){return cw(e)}}jT.className="selu",Mb(jT);class qT extends GT{apply(e){return uw(e)}}qT.className="relu",Mb(qT);class KT extends GT{apply(e){return Bg((()=>jx(6,uw(e))))}}KT.className="relu6",Mb(KT);class XT extends GT{apply(e){return e}}XT.className="linear",Mb(XT);class YT extends GT{apply(e){return dw(e)}}YT.className="sigmoid",Mb(YT);class ZT extends GT{apply(e){return function(e){return Bg((()=>{const t=Ib(.5,Cb(.2,e));return Qy(t,0,1)}))}(e)}}ZT.className="hardSigmoid",Mb(ZT);class JT extends GT{apply(e){return xw(e)}}JT.className="softplus",Mb(JT);class QT extends GT{apply(e){return function(e){return Bg((()=>_b(e,Ib(Hb(e),1))))}(e)}}QT.className="softsign",Mb(QT);class eE extends GT{apply(e){return kw(e)}}eE.className="tanh",Mb(eE);class tE extends GT{apply(e,t=-1){return yw(e,t)}}tE.className="softmax",Mb(tE);class nE extends GT{apply(e,t=-1){return Nx(e,t)}}nE.className="logSoftmax",Mb(nE);class rE extends GT{apply(e){return Bg((()=>Bg((()=>{const t=Math.sqrt(2),n=Cb(.5,Ib(1,gx(_b(e,t))));return Cb(e,n)}))))}}rE.className="gelu",Mb(rE);class sE extends GT{apply(e){return Bg((()=>Cb(.5,Cb(e,Ib(1,kw(Cb(Tb(_b(2,Math.PI)),Ib(e,Cb(.044715,Ub(e,3))))))))))}}sE.className="gelu_new",Mb(sE);class aE extends GT{apply(e){return Bg((()=>Cb(e,kw(xw(e)))))}}aE.className="mish",Mb(aE);class iE extends GT{apply(e,t=1){return Bg((()=>Cb(dw(Cb(e,t)),e)))}}function oE(e){return e.getClassName()}function uE(e,t={}){return PS(e,zb.getMap().classNameMap,t,"activation")}function lE(e){if(null==e){return uE({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},uE(t)}return e instanceof GT?e:uE(e)}iE.className="swish",Mb(iE);class cE extends Fb{}class hE extends cE{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Bg((()=>{let t=Zx([1]);return this.hasL1&&(t=Ib(t,Ex(Cb(this.l1,Hb(e))))),this.hasL2&&(t=Ib(t,Ex(Cb(this.l2,R_(e))))),Hy(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}hE.className="L1L2",Mb(hE);const dE={l1l2:"L1L2"};function pE(e){return LS(e)}function fE(e,t={}){return PS(e,zb.getMap().classNameMap,t,"regularizer")}function mE(e){return null==e?null:"string"==typeof e?fE({className:e in dE?dE[e]:e,config:{}}):e instanceof cE?e:fE(e)}class gE extends yC{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=iC(e);let n=uw(e);return null!=this.maxValue&&(n=Qy(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}gE.className="ReLU",Mb(gE);class bE extends yC{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=iC(e);return Sx(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}bE.className="LeakyReLU",Mb(bE);class yE extends yC{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=rC(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=mE(e.alphaRegularizer),this.alphaConstraint=MC(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new _S(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=oC(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new pC({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=iC(e),tw(e,this.alpha.read())}getConfig(){const e={alphaInitializer:nC(this.alphaInitializer),alphaRegularizer:pE(this.alphaRegularizer),alphaConstraint:FC(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}yE.className="PReLU",Mb(yE);class xE extends yC{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new CS(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=iC(e);return fx(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}xE.className="ELU",Mb(xE);class wE extends yC{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=iC(e);return Cb(n,$b(kx(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}wE.className="ThresholdedReLU",Mb(wE);class vE extends yC{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new tE).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){return Bg((()=>{let n=iC(e);const r=t.mask;if(null!=r){const e=Cb(Vb(Jx(n.shape),$b(r,n.dtype)),Ab(-1e9));n=Ib(n,e)}return this.axis instanceof Array?this.axis.length>1?bx(Vb(n,Bx(n,this.axis,!0))):this.softmax(n,this.axis[0]):this.softmax(n,this.axis)}))}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function $E(e,t,n){if("number"==typeof e)return NS(e,t);if(e.length!==t)throw new _S(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new _S(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var r}function kE(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function IE(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+g_([n-t,0]);else{if("same"!==r)throw new _S(`Unsupport padding mode: ${r}.`);e*=t}return e}function SE(e,t){return Bg((()=>(a_(t),"channelsFirst"===t?Rw(e,[0,2,3,1]):e)))}function _E(e,t){return Bg((()=>(a_(t),"channelsFirst"===t?Rw(e,[0,2,3,4,1]):e)))}function CE(e,t,n,r=[1,1],s="valid",a,i,o=null){return Bg((()=>{if(null==a&&(a="channelsLast"),a_(a),3!==e.rank&&4!==e.rank)throw new _S(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new _S(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let u=SE(e,a);if("causal"===s)throw new CS("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=Gw({x:u,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(u=Rw(u,[0,3,1,2])),u}))}vE.className="Softmax",Mb(vE);class TE extends yC{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",TE.verifyArgs(t),this.rank=e,jS(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new CS(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=$E(t.kernelSize,e,"kernelSize"),this.strides=$E(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,i_(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,a_(this.dataFormat),this.activation=lE(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=rC(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=MC(t.biasConstraint),this.biasRegularizer=mE(t.biasRegularizer),this.activityRegularizer=mE(t.activityRegularizer),this.dilationRate=$E(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new _S(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new _S(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new _S(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(RS("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!HS(e.kernelSize,"number",1,3))throw new _S(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:oE(this.activation),useBias:this.useBias,biasInitializer:nC(this.biasInitializer),biasRegularizer:pE(this.biasRegularizer),activityRegularizer:pE(this.activityRegularizer),biasConstraint:FC(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class EE extends TE{constructor(e,t){super(e,t),this.kernel=null,EE.verifyArgs(t),this.filters=t.filters,jS(this.filters,"filters"),this.kernelInitializer=rC(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=MC(t.kernelConstraint),this.kernelRegularizer=mE(t.kernelRegularizer)}build(e){e=oC(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new _S(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Bg((()=>{let t;e=iC(e);const n=null==this.bias?null:this.bias.read(),r=KS(this.activation.getClassName());if(null!=r&&2===this.rank)t=CE(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=function(e,t,n,r=1,s="valid",a,i=1){return Bg((()=>{if(null==a&&(a="channelsLast"),a_(a),3!==e.shape.length)throw new _S(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new _S(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new _S(`The bias for a conv1dWithBias operation should be 1, but is ${n.shape.length} instead`);if("channelsFirst"===a&&(e=Rw(e,[0,2,1])),"causal"===s)throw new CS("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=ix(e,t,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=D_(o,n)),o}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=CE(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new CS("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,r=[1,1,1],s="valid",a,i){return Bg((()=>{if(null==a&&(a="channelsLast"),a_(a),4!==e.rank&&5!==e.rank)throw new _S(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new _S(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=_E(e,a);if("causal"===s)throw new CS("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=lx(o,t,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=D_(o,n)),"channelsFirst"===a&&(o=Rw(o,[0,4,1,2,3])),o}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=oC(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const r=kE(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:nC(this.kernelInitializer),kernelRegularizer:pE(this.kernelRegularizer),kernelConstraint:FC(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new _S(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class NE extends EE{constructor(e){super(2,e),NE.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!HS(e.kernelSize,"number",1,2))throw new _S(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}NE.className="Conv2D",Mb(NE);class RE extends EE{constructor(e){super(3,e),RE.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new _S(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}RE.className="Conv3D",Mb(RE);class AE extends NE{constructor(e){if(super(e),this.inputSpec=[new pC({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new _S(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=oC(e)).length)throw new _S("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new _S("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new pC({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Bg((()=>{let t=iC(e);if(4!==t.shape.length)throw new _S(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],u=this.kernelSize[0],l=this.kernelSize[1],c=this.strides[0],h=this.strides[1],d=[r,IE(i,c,u,this.padding),IE(o,h,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Rw(t,[0,2,3,1]));let p=ux(t,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(p=Rw(p,[0,3,1,2])),null!=this.bias&&(p=D_(p,this.bias.read(),this.dataFormat)),null!=this.activation&&(p=this.activation.apply(p)),p}))}computeOutputShape(e){const t=(e=oC(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return t[n]=this.filters,t[r]=IE(t[r],o,a,this.padding),t[s]=IE(t[s],u,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}AE.className="Conv2DTranspose",Mb(AE);class DE extends RE{constructor(e){if(super(e),this.inputSpec=[new pC({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new _S(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=oC(e)).length)throw new _S("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new _S("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new pC({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return Bg((()=>{let t=iC(e);if(5!==t.shape.length)throw new _S(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a,i;"channelsFirst"===this.dataFormat?(i=2,s=3,a=4):(i=1,s=2,a=3);const o=n[i],u=n[s],l=n[a],c=this.kernelSize[0],h=this.kernelSize[1],d=this.kernelSize[2],p=this.strides[0],f=this.strides[1],m=this.strides[2],g=[r,IE(o,p,c,this.padding),IE(u,f,h,this.padding),IE(l,m,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Rw(t,[0,2,3,4,1]));let b=hx(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(b=Rw(b,[0,4,1,2,3])),null!==this.bias&&(b=D_(b,this.bias.read(),this.dataFormat)),null!==this.activation&&(b=this.activation.apply(b)),b}))}computeOutputShape(e){const t=(e=oC(e)).slice();let n,r,s,a;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3,a=4):(n=4,r=1,s=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],u=this.kernelSize[2],l=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[r]=IE(t[r],l,i,this.padding),t[s]=IE(t[s],c,o,this.padding),t[a]=IE(t[a],h,u,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}DE.className="Conv3DTranspose",Mb(DE);class OE extends EE{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new _S("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new _S("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new _S(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=rC(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=mE(t.depthwiseRegularizer),this.depthwiseConstraint=MC(t.depthwiseConstraint),this.pointwiseInitializer=rC(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=mE(t.pointwiseRegularizer),this.pointwiseConstraint=MC(t.pointwiseConstraint)}build(e){if((e=oC(e)).length<this.rank+2)throw new _S(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new _S(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let e=0;e<this.rank;++e)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new pC({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Bg((()=>{let t;if(e=iC(e),1===this.rank)throw new CS("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Rw(e,[0,2,3,1])),t=hw(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=D_(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Rw(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=nC(this.depthwiseInitializer),e.pointwiseInitializer=nC(this.pointwiseInitializer),e.depthwiseRegularizer=pE(this.depthwiseRegularizer),e.pointwiseRegularizer=pE(this.pointwiseRegularizer),e.depthwiseConstraint=FC(this.depthwiseConstraint),e.pointwiseConstraint=FC(this.pointwiseConstraint),e}}OE.className="SeparableConv";class FE extends OE{constructor(e){super(2,e)}}FE.className="SeparableConv2D",Mb(FE);class zE extends EE{constructor(e){super(1,e),zE.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!HS(e.kernelSize,"number",1,1))throw new _S(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}zE.className="Conv1D",Mb(zE);class ME extends yC{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Bg((()=>{if(e=iC(e),"channelsLast"===this.dataFormat){const t=I_(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return I_(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=I_(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return I_(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}ME.className="Cropping2D",Mb(ME);class LE extends yC{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,a_(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,GS(e_,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return Bg((()=>{let t=iC(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Rw(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?Ev.resizeNearestNeighbor(t,[e,r]):Ev.resizeBilinear(t,[e,r]);return Rw(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?Ev.resizeNearestNeighbor(t,[e,r]):Ev.resizeBilinear(t,[e,r])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}LE.className="UpSampling2D",Mb(LE);class BE extends TE{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=rC(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=MC(e.depthwiseConstraint),this.depthwiseRegularizer=mE(e.depthwiseRegularizer)}build(e){if((e=oC(e)).length<4)throw new _S(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new _S(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Bg((()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return Bg((()=>{null==s&&(s="channelsLast"),a_(s);let i=SE(e,s);if(4!==e.rank)throw new _S(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new _S(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=px(i,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=Rw(i,[0,3,1,2])),i}))}(e=iC(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=D_(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=oC(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=kE(t,this.kernelSize[0],this.padding,this.strides[0]),a=kE(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,s,a]:[e[0],s,a,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=nC(this.depthwiseInitializer),e.depthwiseRegularizer=pE(this.depthwiseRegularizer),e.depthwiseConstraint=FC(this.depthwiseRegularizer),e}}function PE(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new _S("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function WE(e,t,n,r=!1,s,a,i=!1,o=!1){return Bg((()=>{const u=t.shape.length;if(u<3)throw new _S(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(b_(2,u));if(t=Rw(t,l),null!=a)throw new CS("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=$b($b(s,"bool"),"float32")).rank===u-1&&(s=yx(s,-1)),s=Rw(s,l)),r&&(t=lw(t,0),null!=s&&(s=lw(s,0)));const c=[];let h,d=n;const p=t.shape[0],f=Cw(t);let m,g;null!=s&&(m=Cw(s));for(let t=0;t<p;++t){const n=f[t],r=Bg((()=>e(n,d)));if(null==s)h=r[0],d=r[1];else{const e=Bg((()=>{const e=m[t],n=Vb(Qx(e),e);return{output:Ib(Cb(r[0],e),Cb(d[0],n)),newStates:d.map(((t,s)=>Ib(Cb(r[1][s],e),Cb(t,n))))}}));h=e.output,d=e.newStates}o&&c.push(h)}return o&&(g=$w(c,1)),[h,g,d]}))}BE.className="DepthwiseConv2D",Mb(BE);class UE extends yC{constructor(e){let t;if(super(e),null==e.cell)throw new _S("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new YE({cells:e.cell}):e.cell,null==t.stateSize)throw new _S("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new pC({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?b_(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){sC(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return Bg((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new CS("Constants support is not implemented in RNN yet.");sC(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new pC({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!bh(this.stateSpec.map((e=>e.shape[e.shape.length-1])),s))throw new _S(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((e=>new pC({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){Bg((()=>{if(!this.stateful)throw new IS("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new _S("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Zx([n,e]))):this.states_=[Zx([n,this.cell.stateSize])];else if(null==e)Pg(this.states_),null!=this.keptStates&&(Pg(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Zx([n,e]))):this.states_[0]=Zx([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new _S(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):Pg(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,s];if(!bh(r.shape,a))throw new _S(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map((e=>Wg(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=PE(e,n,r,this.numConstants);e=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new pC({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length),a[0]instanceof fC){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return Bg((()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=iC(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new _S(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=WE(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=o[0],l=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?l:u;return this.returnState?[h].concat(c):h}))}getInitialState(e){return Bg((()=>{let t=Zx(e.shape);return t=Ex(t,[1,2]),t=v_(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?C_(t,[1,e]):t)):this.cell.stateSize>1?[C_(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===UE.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const r=XC(t.cell,n);return new e(Object.assign(t,{cell:r}))}}UE.className="RNN",Mb(UE);class VE extends yC{}class GE extends VE{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,jS(this.units,"units"),this.activation=lE(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=rC(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=rC(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=rC(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=mE(e.kernelRegularizer),this.recurrentRegularizer=mE(e.recurrentRegularizer),this.biasRegularizer=mE(e.biasRegularizer),this.kernelConstraint=MC(e.kernelConstraint),this.recurrentConstraint=MC(e.recurrentConstraint),this.biasConstraint=MC(e.biasConstraint),this.dropout=m_([1,g_([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=m_([1,g_([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=oC(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Bg((()=>{if(2!==e.length)throw new _S(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ZE({ones:()=>Qx(e),rate:this.dropout,training:r,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ZE({ones:()=>Qx(n),rate:this.recurrentDropout,training:r,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=E_(null!=a?Cb(e,a):e,this.kernel.read()),null!=this.bias&&(s=D_(s,this.bias.read())),null!=i&&(n=Cb(n,i));let o=Ib(s,E_(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:oE(this.activation),useBias:this.useBias,kernelInitializer:nC(this.kernelInitializer),recurrentInitializer:nC(this.recurrentInitializer),biasInitializer:nC(this.biasInitializer),kernelRegularizer:pE(this.kernelRegularizer),recurrentRegularizer:pE(this.recurrentRegularizer),biasRegularizer:pE(this.biasRegularizer),activityRegularizer:pE(this.activityRegularizer),kernelConstraint:FC(this.kernelConstraint),recurrentConstraint:FC(this.recurrentConstraint),biasConstraint:FC(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}GE.className="SimpleRNNCell",Mb(GE);class HE extends UE{constructor(e){e.cell=new GE(e),super(e)}call(e,t){return Bg((()=>{null!=this.cell.dropoutMask&&(Pg(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Pg(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return new e(t)}}HE.className="SimpleRNN",Mb(HE);class jE extends VE{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new _S("GRUCell does not support reset_after parameter set to true.");this.units=e.units,jS(this.units,"units"),this.activation=lE(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=lE(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=rC(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=rC(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=rC(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=mE(e.kernelRegularizer),this.recurrentRegularizer=mE(e.recurrentRegularizer),this.biasRegularizer=mE(e.biasRegularizer),this.kernelConstraint=MC(e.kernelConstraint),this.recurrentConstraint=MC(e.recurrentConstraint),this.biasConstraint=MC(e.biasConstraint),this.dropout=m_([1,g_([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=m_([1,g_([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=oC(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Bg((()=>{if(2!==e.length)throw new _S(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ZE({ones:()=>Qx(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ZE({ones:()=>Qx(r),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,u;0<this.dropout&&this.dropout<1&&(e=Cb(e,s[0]));let l=E_(e,this.kernel.read());this.useBias&&(l=D_(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Cb(r,a[0]));const c=this.recurrentKernel.read(),[h,d]=ww(c,[2*this.units,this.units],c.rank-1),p=E_(r,h),[f,m,g]=ww(l,3,l.rank-1),[b,y]=ww(p,2,p.rank-1);i=this.recurrentActivation.apply(Ib(f,b)),o=this.recurrentActivation.apply(Ib(m,y));const x=E_(Cb(o,r),d);u=this.activation.apply(Ib(g,x));const w=Ib(Cb(i,r),Cb(Ib(1,Kx(i)),u));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:oE(this.activation),recurrentActivation:oE(this.recurrentActivation),useBias:this.useBias,kernelInitializer:nC(this.kernelInitializer),recurrentInitializer:nC(this.recurrentInitializer),biasInitializer:nC(this.biasInitializer),kernelRegularizer:pE(this.kernelRegularizer),recurrentRegularizer:pE(this.recurrentRegularizer),biasRegularizer:pE(this.biasRegularizer),activityRegularizer:pE(this.activityRegularizer),kernelConstraint:FC(this.kernelConstraint),recurrentConstraint:FC(this.recurrentConstraint),biasConstraint:FC(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}jE.className="GRUCell",Mb(jE);class qE extends UE{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new jE(e),super(e)}call(e,t){return Bg((()=>{null!=this.cell.dropoutMask&&(Pg(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Pg(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}qE.className="GRU",Mb(qE);class KE extends VE{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,jS(this.units,"units"),this.activation=lE(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=lE(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=rC(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=rC(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=rC(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=mE(e.kernelRegularizer),this.recurrentRegularizer=mE(e.recurrentRegularizer),this.biasRegularizer=mE(e.biasRegularizer),this.kernelConstraint=MC(e.kernelConstraint),this.recurrentConstraint=MC(e.recurrentConstraint),this.biasConstraint=MC(e.biasConstraint),this.dropout=m_([1,g_([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=m_([1,g_([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=oC(e))[e.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;r=new((t=class extends L_{apply(t,r){const s=e.apply([n]),a=(new P_).apply([n]),i=e.apply([2*n]);return __(__(s,a),i)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Bg((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new _S(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ZE({ones:()=>Qx(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ZE({ones:()=>Qx(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,u,l,c;0<this.dropout&&this.dropout<1&&(e=Cb(e,a[0]));let h=E_(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Cb(r,i[0])),h=Ib(h,E_(r,this.recurrentKernel.read())),this.useBias&&(h=D_(h,this.bias.read()));const[d,p,f,m]=ww(h,4,h.rank-1);o=this.recurrentActivation.apply(d),u=this.recurrentActivation.apply(p),l=Ib(Cb(u,s),Cb(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Cb(c,this.activation.apply(l));return[g,g,l]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:oE(this.activation),recurrentActivation:oE(this.recurrentActivation),useBias:this.useBias,kernelInitializer:nC(this.kernelInitializer),recurrentInitializer:nC(this.recurrentInitializer),biasInitializer:nC(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:pE(this.kernelRegularizer),recurrentRegularizer:pE(this.recurrentRegularizer),biasRegularizer:pE(this.biasRegularizer),activityRegularizer:pE(this.activityRegularizer),kernelConstraint:FC(this.kernelConstraint),recurrentConstraint:FC(this.recurrentConstraint),biasConstraint:FC(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}KE.className="LSTMCell",Mb(KE);class XE extends UE{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new KE(e),super(e)}call(e,t){return Bg((()=>{null!=this.cell.dropoutMask&&(Pg(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Pg(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}XE.className="LSTM",Mb(XE);class YE extends VE{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Bg((()=>{let n=e.slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;sC(e)&&(e=e[0]),this.cells.forEach(((n,r)=>{l_(`RNNCell_${r}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const r=[];for(const e of t.cells)r.push(XC(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return hC(e)}setWeights(e){const t=[];for(const n of this.cells){const r=n.weights.length,s=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],s[e]])}dC(t)}}function ZE(e){const{ones:t,rate:n,training:r=!1,count:s=1,dropoutFunc:a}=e,i=()=>null!=a?a(t(),n):O_(t(),n),o=()=>F_(i,t,r);return!s||s<=1?Wg(o().clone()):Array(s).fill(void 0).map(o).map((e=>Wg(e.clone())))}YE.className="StackedRNNCells",Mb(YE);class JE extends UE{constructor(e){if(e.unroll)throw new CS("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new CS("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new pC({ndim:5})]}call(e,t){return Bg((()=>{if(null!=this.cell.dropoutMask&&(Pg(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Pg(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new _S("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Bg((()=>{const{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),s=Zx([r[0],...r.slice(2)]);return Array.isArray(t)?Array(t.length).fill(s):[s]}))}resetStates(e,t=!1){Bg((()=>{if(!this.stateful)throw new IS("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new _S("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Zx(s))):this.states_=[Zx(s)];else if(null==e)Pg(this.states_),null!=this.keptStates&&(Pg(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Zx(s))):this.states_[0]=Zx(s);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new _S(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):Pg(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=s;if(!bh(n.shape,r))throw new _S(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>Wg(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,u=e[o?3:2],l=e[o?4:3],c=kE(u,r[0],s,a[0],i[0]),h=kE(l,r[1],s,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}JE.className="ConvRNN2D";class QE extends KE{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:i}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,jS(this.filters,"filters"),this.kernelSize=$E(n,2,"kernelSize"),this.kernelSize.forEach((e=>jS(e,"kernelSize"))),this.strides=$E(r||1,2,"strides"),this.strides.forEach((e=>jS(e,"strides"))),this.padding=s||"valid",i_(this.padding),this.dataFormat=a||"channelsLast",a_(this.dataFormat),this.dilationRate=$E(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>jS(e,"dilationRate")))}build(e){var t;e=oC(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new _S(`The channel dimension of the input should be defined. Found ${e[n]}`);const r=e[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends L_{apply(e,t){return S_([n.apply([r]),Jx([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Bg((()=>{if(3!==e.length)throw new _S(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ZE({ones:()=>Qx(r),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?Cb(t[n],e):e;let u=o(r,i,0),l=o(r,i,1),c=o(r,i,2),h=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ZE({ones:()=>Qx(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const d=this.recurrentDropoutMask;let p=o(s,d,0),f=o(s,d,1),m=o(s,d,2),g=o(s,d,3);const[b,y,x,w]=ww(this.kernel.read(),4,3),[v,$,k,I]=this.useBias?ww(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,b,v,this.padding),l=this.inputConv(l,y,$,this.padding),c=this.inputConv(c,x,k,this.padding),h=this.inputConv(h,w,I,this.padding);const[S,_,C,T]=ww(this.recurrentKernel.read(),4,3);p=this.recurrentConv(p,S),f=this.recurrentConv(f,_),m=this.recurrentConv(m,C),g=this.recurrentConv(g,T);const E=this.recurrentActivation.apply(Ib(u,p)),N=this.recurrentActivation.apply(Ib(l,f)),R=Ib(Cb(N,a),Cb(E,this.activation.apply(Ib(c,m)))),A=Cb(this.recurrentActivation.apply(Ib(h,g)),this.activation.apply(R));return[A,A,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n}(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),r)}inputConv(e,t,n,r){const s=ax(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?D_(s,n,this.dataFormat):s}recurrentConv(e,t){return ax(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}QE.className="ConvLSTM2DCell",Mb(QE);class eN extends JE{constructor(e){const t=new QE(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}eN.className="ConvLSTM2D",Mb(eN);class tN extends yC{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return Bg((()=>{this.invokeCallHook(e,t);const n=iC(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return F_((()=>O_(n,this.rate,r,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}tN.className="Dropout",Mb(tN);class nN extends tN{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}nN.className="SpatialDropout1D",Mb(nN);class rN extends yC{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,jS(this.units,"units"),this.activation=lE(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=rC(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=rC(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=MC(e.kernelConstraint),this.biasConstraint=MC(e.biasConstraint),this.kernelRegularizer=mE(e.kernelRegularizer),this.biasRegularizer=mE(e.biasRegularizer),this.activityRegularizer=mE(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=oC(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=oC(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Bg((()=>{this.invokeCallHook(e,t);const n=iC(e),r=KS(this.activation.getClassName());let s;return null!=r?s=E_(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=E_(n,this.kernel.read()),null!=this.bias&&(s=D_(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const e={units:this.units,activation:oE(this.activation),useBias:this.useBias,kernelInitializer:nC(this.kernelInitializer),biasInitializer:nC(this.biasInitializer),kernelRegularizer:pE(this.kernelRegularizer),biasRegularizer:pE(this.biasRegularizer),activityRegularizer:pE(this.activityRegularizer),kernelConstraint:FC(this.kernelConstraint),biasConstraint:FC(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}rN.className="Dense",Mb(rN);class sN extends yC{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=oC(e);for(const t of e.slice(1))if(null==t)throw new _S(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],f_(e,1)]}call(e,t){return Bg((()=>{this.invokeCallHook(e,t);let n=iC(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=Rw(n,e)}return function(e){if(e.rank<=1)throw new _S(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],f_(e.shape,1)];return Hy(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}sN.className="Flatten",Mb(sN);class aN extends yC{constructor(e){super(e),this.supportsMasking=!0,this.activation=lE(e.activation)}call(e,t){return Bg((()=>{this.invokeCallHook(e,t);const n=iC(e);return this.activation.apply(n)}))}getConfig(){const e={activation:oE(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}aN.className="Activation",Mb(aN);class iN extends yC{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Bg((()=>{return e=iC(e),t=e,n=this.n,Bg((()=>{if(2!==t.shape.length)throw new _S(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return C_(v_(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}iN.className="RepeatVector",Mb(iN);class oN extends yC{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let e=0;e<r.length;++e){const t=r[e];if(this.isUnknown(t)){if(null!==a)throw new _S("Can only specifiy one unknown dimension.");a=e}else s*=t}const i=f_(e);if(null!==a){if(0===s||i%s!=0)throw new _S(n);r[a]=i/s}else if(i!==s)throw new _S(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Bg((()=>{this.invokeCallHook(e,t);const n=iC(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return Hy(n,s)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}oN.className="Reshape",Mb(oN);class uN extends yC{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=b_(1,e.dims.length+1);if(!bh(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new pC({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=oC(e)).slice();return this.dims.forEach(((n,r)=>{t[r+1]=e[n]})),t}call(e,t){return Rw(iC(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}uN.className="Permute",Mb(uN);class lN extends yC{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=iC(e);return Ty(Xx(n,this.maskValue),-1)}call(e,t){return Bg((()=>{this.invokeCallHook(e,t);const n=iC(e),r=Ty(Xx(n,this.maskValue),-1,!0);return Cb(n,$b(r,n.dtype))}))}}lN.className="Masking",Mb(lN);class cN extends yC{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(OS(e.inputLength))}this.inputDim=e.inputDim,jS(this.inputDim,"inputDim"),this.outputDim=e.outputDim,jS(this.outputDim,"outputDim"),this.embeddingsInitializer=rC(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=mE(e.embeddingsRegularizer),this.activityRegularizer=mE(e.activityRegularizer),this.embeddingsConstraint=MC(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Bg((()=>this.maskZero?(e=iC(e),Xx(e,Nb(e))):null))}computeOutputShape(e){if(e=oC(e),null==this.inputLength)return[...e,this.outputDim];const t=OS(this.inputLength);if(t.length!==e.length-1)throw new _S(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new _S(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Bg((()=>{this.invokeCallHook(e,t);let n=iC(e);"int32"!==n.dtype&&(n=w_(n,"int32"));const r=N_(this.embeddings.read(),Hy(n,[n.size]));return Hy(r,oC(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:nC(this.embeddingsInitializer),embeddingsRegularizer:pE(this.embeddingsRegularizer),activityRegularizer:pE(this.activityRegularizer),embeddingsConstraint:FC(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}cN.className="Embedding",Mb(cN);class hN extends yC{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new CS}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new _S("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[oC(e)]),e.length<2)throw new _S(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=US(t),t.length>1)throw new _S(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===US(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return Bg((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const r=g_(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=v_(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,s=e[0],a=e.slice(1).concat([s]);let i=Hy(r,[s].concat(f_(e.slice(1))));i=Rw(i,[1,0]),i=Hy(i,a),t.push(i),n=!0}else if(e>1){const s=b_(1,e).concat([0]);t.push(Rw(r,s)),n=!0}else t.push(r)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=Hy(Rw(Hy(r,[-1,t]),[1,0]),n)}else if(s>1){const e=[s-1].concat(b_(0,s-1));r=Rw(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=US(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Bg((()=>{if(null==t)return null;if(!Array.isArray(t))throw new _S("`mask` should be an Array");if(!Array.isArray(e))throw new _S("`inputs` should be an Array");if(t.length!==e.length)throw new _S(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:yx(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Px(n,t[e]);return n}))}}class dN extends hN{constructor(e){super(e)}mergeFunction(e){return Bg((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Ib(t,e[n]);return t}))}}dN.className="Add",Mb(dN);class pN extends hN{constructor(e){super(e)}mergeFunction(e){return Bg((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Cb(t,e[n]);return t}))}}pN.className="Multiply",Mb(pN);class fN extends hN{constructor(e){super(e)}mergeFunction(e){return Bg((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Ib(t,e[n]);return Cb(1/e.length,t)}))}}fN.className="Average",Mb(fN);class mN extends hN{constructor(e){super(e)}mergeFunction(e){return Bg((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Xb(t,e[n]);return t}))}}mN.className="Maximum",Mb(mN);class gN extends hN{constructor(e){super(e)}mergeFunction(e){return Bg((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=jx(t,e[n]);return t}))}}gN.className="Minimum",Mb(gN);class bN extends hN{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new _S("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const r=e[t].slice();r.splice(this.axis,1);let s=!1;for(const e of n)if(bh(e,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new _S("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Bg((()=>S_(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new _S("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[r]||null==e[r]){n[r]=null;break}n[r]+=e[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new _S("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new _S("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new _S(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Bg((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push($b(Qx(e[n]),"bool")):t[n].rank<e[n].rank?r.push(yx(t[n],-1)):r.push(t[n]);const s=ex(r,this.axis);return Cy(s,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function yN(e,t){for(;e<0;)e+=t;return e}bN.className="Concatenate",Mb(bN);class xN extends hN{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){ph(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new CS("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new _S(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new _S(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>yN(t,e[n].shape.length))):[yN(this.axes,n.shape.length),yN(this.axes,r.shape.length)],this.normalize&&(n=YC(n,t[0]),r=YC(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new CS("batchDot is not implemented for tensors of 4D or higher rank yet");if(ph(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),ph(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new CS("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,s=t.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return Bg((()=>{let n,i;if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=Hy(t,t.shape.concat(e))}else if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=Hy(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?Ex(Cb(e,t),a[0]):Ex(Cb(Rw(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,r=a[1]===t.shape.length-1;i=Wx(e,t,n,r)}if(n>0){let e;e=r>s?r+s-3:r-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);i=vw(i,t)}return 1===i.shape.length&&(i=yx(i,1)),i}))}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[yN(this.axes,e.length),yN(this.axes,t.length)],n}computeOutputShape(e){ph(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new CS("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=t.concat(n);return 1===s.length&&s.push(1),s}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}xN.className="Dot",Mb(xN);class wN extends yC{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Bg((()=>{this.invokeCallHook(e,t);const n=iC(e);return F_((()=>Ib(T_(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}wN.className="GaussianNoise",Mb(wN);class vN extends yC{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Bg((()=>{this.invokeCallHook(e,t);const n=iC(e);return this.rate>0&&this.rate<1?F_((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return Cb(n,T_(n.shape,1,e))}),(()=>n),t.training||!1):n}))}}vN.className="GaussianDropout",Mb(vN);class $N extends yC{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||iC(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Bg((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return F_((()=>{const t=iC(e),r=-1.7580993408473766;let s=Ix(iw(n),this.rate);s=w_(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate,o=Ib(Cb(t,s),Cb(Ib(s,-1),r));return Ib(Cb(o,a),i)}),(()=>iC(e)),t.training||!1)}return e}))}}function kN(e,t,n,r,s,a=.001){let i;if(2===e.rank)i=Xy(e,t,n,r,s,a);else if(3===e.rank)i=Yy(e,t,n,r,s,a);else{if(4!==e.rank)throw new CS(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=Zy(e,t,n,r,s,a)}return i}$N.className="AlphaDropout",Mb($N);class IN extends yC{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=rC(e.betaInitializer||"zeros"),this.gammaInitializer=rC(e.gammaInitializer||"ones"),this.movingMeanInitializer=rC(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=rC(e.movingVarianceInitializer||"ones"),this.betaConstraint=MC(e.betaConstraint),this.gammaConstraint=MC(e.gammaConstraint),this.betaRegularizer=mE(e.betaRegularizer),this.gammaRegularizer=mE(e.gammaRegularizer)}build(e){e=oC(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new _S(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new pC({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Bg((()=>{const n=null!=t.training&&t.training,r=iC(e),s=r.shape,a=s.length,i=b_(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const u=NS(1,a);u[o]=s[o];const l=i.slice();l.sort();const c=!bh(l,b_(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=Hy(this.movingMean.read(),u),t=Hy(this.movingVariance.read(),u),n=this.center?Hy(this.beta.read(),u):null,s=this.scale?Hy(this.gamma.read(),u):null;return kN(r,e,t,n,s,this.epsilon)}return kN(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,p]=function(e,t,n,r,s=.001){return bh(r.slice().sort(),b_(0,e.rank-1))?function(e,t,n,r,s=.001){return Bg((()=>{const a=qx(e,r),i=a.mean,o=a.variance;return[kN(e,i,o,n,t,s),i,o]}))}(e,t,n,r,s):function(e,t,n,r,s=.001){return Bg((()=>{const a=qx(e,r),i=a.mean,o=a.variance,u=[];for(const t of b_(0,e.rank))-1!==r.indexOf(t)?u.push(1):u.push(e.shape[t]);const l=Hy(i,u),c=Hy(o,u),h=null==t?null:Hy(t,u),d=null==n?null:Hy(n,u);return[kN(e,l,c,d,h,s),i,o]}))}(e,t,n,r,s)}(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{Bg((()=>{const r=1-n,s=e.read(),a=Cb(Vb(s,t),r);e.write(Vb(s,a))}))};return(()=>{f(this.movingMean,d,this.momentum),f(this.movingVariance,p,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:nC(this.betaInitializer),gammaInitializer:nC(this.gammaInitializer),movingMeanInitializer:nC(this.movingMeanInitializer),movingVarianceInitializer:nC(this.movingVarianceInitializer),betaRegularizer:pE(this.betaRegularizer),gammaRegularizer:pE(this.gammaRegularizer),betaConstraint:FC(this.betaConstraint),gammaConstraint:FC(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}IN.className="BatchNormalization",Mb(IN);class SN extends yC{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=rC(e.betaInitializer||"zeros"),this.gammaInitializer=rC(e.gammaInitializer||"ones"),this.betaRegularizer=mE(e.betaRegularizer),this.gammaRegularizer=mE(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=oC(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==US(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t])),r=!0;this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,r):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,r):this.beta=null,this.built=!0}call(e,t){const n=iC(e),r=n.shape,s=r.length;return Bg((()=>{let{mean:e,variance:t}=qx(n,this.axis,!0);const a=NS(1,s);for(const e of this.axis)a[e]=r[e];const i=e=>null!=e&&e.shape.length!==s?Hy(e,a):e;let o=this.scale?i(this.gamma.read()):null,u=this.center?i(this.beta.read()):null;const l=[],c=[];for(let e=0;e<s;++e)-1!==this.axis.indexOf(e)?(l.push(r[e]),c.push(1)):(l.push(1),c.push(r[e]));return e=xx(e,l),t=xx(t,l),null!=o&&(o=xx(o,c)),null!=u&&(u=xx(u,c)),kN(n,e,t,u,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:nC(this.betaInitializer),gammaInitializer:nC(this.gammaInitializer),betaRegularizer:pE(this.betaRegularizer),gammaRegularizer:pE(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}SN.className="LayerNormalization",Mb(SN);class _N extends yC{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new _S(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new _S(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new _S(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new pC({ndim:4})]}computeOutputShape(e){let t,n;return e=oC(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Bg((()=>{return t=iC(e),n=this.padding,r=this.dataFormat,Bg((()=>{if(4!==t.rank)throw new _S(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new _S("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new _S(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],ew(t,e)}));var t,n,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function CN(e,t,n,r,s,a){return Bg((()=>{let i;a_(s),o_(a),i_(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=SE(e,s);const o="same"===r?"same":"valid";return i="max"===a?Ux(e,t,n,o):jy(e,t,n,o),"channelsFirst"===s&&(i=Rw(i,[0,3,1,2])),i}))}function TN(e,t,n,r,s,a){return Bg((()=>{let i;a_(s),o_(a),i_(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=_E(e,s);const o="same"===r?"same":"valid";return i="max"===a?Vx(e,t,n,o):qy(e,t,n,o),"channelsFirst"===s&&(i=Rw(i,[0,4,1,2,3])),i}))}_N.className="ZeroPadding2D",Mb(_N);class EN extends yC{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new _S(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(jS(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new _S(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}jS(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,i_(this.padding),this.inputSpec=[new pC({ndim:3})]}computeOutputShape(e){const t=kE((e=oC(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Bg((()=>{this.invokeCallHook(e,t),e=v_(iC(e),2);const n=this.poolingFunction(iC(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return vw(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class NN extends EN{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return a_(s),i_(r),CN(e,t,n,r,s,"max")}}NN.className="MaxPooling1D",Mb(NN);class RN extends EN{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return a_(s),i_(r),CN(e,t,n,r,s,"avg")}}RN.className="AveragePooling1D",Mb(RN);class AN extends yC{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new _S(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];jS(this.poolSize,"poolSize"),jS(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,a_(this.dataFormat),i_(this.padding),this.inputSpec=[new pC({ndim:4})]}computeOutputShape(e){e=oC(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=kE(t,this.poolSize[0],this.padding,this.strides[0]),n=kE(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Bg((()=>(this.invokeCallHook(e,t),this.poolingFunction(iC(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class DN extends AN{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return a_(s),i_(r),CN(e,t,n,r,s,"max")}}DN.className="MaxPooling2D",Mb(DN);class ON extends AN{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return a_(s),i_(r),CN(e,t,n,r,s,"avg")}}ON.className="AveragePooling2D",Mb(ON);class FN extends yC{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new _S(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];jS(this.poolSize,"poolSize"),jS(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,a_(this.dataFormat),i_(this.padding),this.inputSpec=[new pC({ndim:5})]}computeOutputShape(e){e=oC(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=kE(t,this.poolSize[0],this.padding,this.strides[0]),n=kE(n,this.poolSize[1],this.padding,this.strides[1]),r=kE(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return Bg((()=>(this.invokeCallHook(e,t),this.poolingFunction(iC(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class zN extends FN{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return a_(s),i_(r),TN(e,t,n,r,s,"max")}}zN.className="MaxPooling3D",Mb(zN);class MN extends FN{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return a_(s),i_(r),TN(e,t,n,r,s,"avg")}}MN.className="AveragePooling3D",Mb(MN);class LN extends yC{constructor(e){super(e),this.inputSpec=[new pC({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new CS}}class BN extends LN{constructor(e){super(e||{})}call(e,t){return Bg((()=>{const t=iC(e);return Gx(t,1)}))}}BN.className="GlobalAveragePooling1D",Mb(BN);class PN extends LN{constructor(e){super(e||{})}call(e,t){return Bg((()=>{const t=iC(e);return Tx(t,1)}))}}PN.className="GlobalMaxPooling1D",Mb(PN);class WN extends yC{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,a_(this.dataFormat),this.inputSpec=[new pC({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new CS}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class UN extends WN{call(e,t){return Bg((()=>{const t=iC(e);return"channelsLast"===this.dataFormat?Gx(t,[1,2]):Gx(t,[2,3])}))}}UN.className="GlobalAveragePooling2D",Mb(UN);class VN extends WN{call(e,t){return Bg((()=>{const t=iC(e);return"channelsLast"===this.dataFormat?Tx(t,[1,2]):Tx(t,[2,3])}))}}VN.className="GlobalMaxPooling2D",Mb(VN);class GN extends yC{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=XC(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class HN extends GN{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=oC(e)).length<3)throw new _S(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=oC(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return Bg((()=>WE(((e,n)=>[iC(this.layer.call(e,t)),[]]),e=iC(e),[],!1,null,null,!1,!0)[1]))}}HN.className="TimeDistributed",Mb(HN);class jN extends GN{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=XC(n),t.goBackwards=!0!==t.goBackwards;const r={};var s;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=XC(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,s=this.mergeMode,GS(r_,"BidirectionalMergeMode",s),e.weights)throw new CS("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState?(r=s.slice(1),t=s[0]):t=s[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):DS(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=PE(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new _S("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map((e=>new pC({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),i.push(...r)}if(null!=r)throw new CS("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof fC;for(const e of a)if(e instanceof fC!==o)throw new _S("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return Bg((()=>{const n=t.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=lw(s,1)),"concat"===this.mergeMode?i=S_([r,s]):"sum"===this.mergeMode?i=Ib(r,s):"ave"===this.mergeMode?i=Cb(.5,Ib(r,s)):"mul"===this.mergeMode?i=Cb(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){l_(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),l_(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=XC(t.layer);if(delete t.layer,null!=t.numConstants)throw new CS("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}jN.className="Bidirectional",Mb(jN);class qN extends yC{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return Bg((()=>("float32"!==(e=iC(e)).dtype&&(e=w_(e,"float32")),Ib(Cb(e,this.scale),this.offset))))}}qN.className="Rescaling",Mb(qN);const{resizeBilinear:KN,cropAndResize:XN}=Ev;class YN extends yC{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,n,r,s,a,i,o){return Bg((()=>{let u,l=!1;const c=[t/a,n/i,(r+t)/a,(s+n)/i],h=[];3===e.rank?(l=!0,u=$w([e])):u=e;for(let e=0;e<u.shape[0];e++)h.push(c);const d=Fg(h,[h.length,4]),p=ow(0,h.length,1,"int32"),f=XN(u,d,p,[r,s],"nearest");return w_(l?iC(Cw(f)):f,o)}))}upsize(e,t,n,r){return Bg((()=>w_(KN(e,[t,n]),r)))}call(e,t){return Bg((()=>{const t=iC(e),n=t.dtype,r=t.shape,s=r[r.length-3],a=r[r.length-2];let i=0;s!==this.height&&(i=Math.floor((s-this.height)/2));let o=0;return a!==this.width&&(o=Math.floor((a-this.width)/2),0===o&&(o=1)),i>=0&&o>=0?this.centerCrop(t,i,o,this.height,this.width,s,a,n):this.upsize(e,this.height,this.width,n)}))}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=oC(e)).length-3,n=e.length-2;return e[t]=this.height,e[n]=this.width,e}}YN.className="CenterCrop",Mb(YN);class ZN extends yC{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=oC(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return Bg((()=>{let n;if("int32"!==(e=iC(e)).dtype&&(e=w_(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new _S(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=iC(t.countWeights)}const r=Tx(e),s=Hx(e),a=kx(this.numTokens,r).bufferSync().get(0),i=Ix(s,0).bufferSync().get(0);if(!a||!i)throw new _S(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,r){let s=iC(e);if("int32"!==s.dtype&&(s=w_(s,"int32")),"int"===t)return s;const a=s.shape;if(0===s.rank&&(s=yx(s,-1)),"oneHot"===t&&1!==s.shape[s.shape.length-1]&&(s=yx(s,-1)),s.rank>2)throw new _S(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${s.rank}.`);const i=["multiHot","oneHot"].includes(t);let o;if(o=dx(s,void 0!==r&&"count"===t?r:[],n,i),"tfIdf"!==t)return o;if(r)return Cb(o,r);throw new _S("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)}))}}ZN.className="CategoryEncoding",Mb(ZN);const JN=new Set(["bilinear","nearest"]);class QN extends yC{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!JN.has(e.interpolation))throw new _S(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=oC(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return Bg((()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return Ev.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return Ev.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...JN]} are supported`)}))}}QN.className="Resizing",Mb(QN);class eR{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}eR.className="RandomSeed";class tR extends yC{constructor(e){super(e),this.randomGenerator=new eR(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},t=super.getConfig();return Object.assign(e,t),e}}tR.className="BaseRandomLayer";const nR=new Set(["bilinear","nearest"]);class rR extends tR{constructor(e){super(e);const{factor:t,interpolation:n="bilinear"}=e;if(this.factor=t,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new _S(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new _S(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new _S(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(n){if(!nR.has(n))throw new _S(`Invalid interpolation parameter: ${n} is not implemented`);this.interpolation=n}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=oC(e))[2];return[this.imgHeight,-1,t]}call(e,t){return Bg((()=>{const t=iC(e);this.imgHeight=t.shape[t.shape.length-3];const n=t.shape[t.shape.length-2];this.widthFactor=iw([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let r=this.widthFactor.dataSync()[0]*n;r=Math.round(r);const s=[this.imgHeight,r];switch(this.interpolation){case"bilinear":return Ev.resizeBilinear(e,s);case"nearest":return Ev.resizeNearestNeighbor(e,s);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...nR]} are supported`)}}))}}var sR,aR,iR,oR;function uR(e,t,n=new Map,r=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(dR(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const i=uR(e[a],t,n,r);s[a]=i}return r.delete(e),e.__proto__&&(s.__proto__=e.__proto__),s}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,s.value),s.value}function lR(e,t=hR){return cR(e,t)}function cR(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(dR(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=cR(e.map((e=>e[a])),t,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function hR(e){return null===e?null:dR(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function dR(e){let t=!1;if(qh().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:r}=n(551);t=e instanceof r}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof tg)&&!(e instanceof Promise)&&!t)}function pR(e){return uR(e,fR)}function fR(e){return e instanceof tg?{value:e.clone(),recurse:!1}:dR(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}rR.className="RandomWidth",Mb(rR),qh().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(sR||(sR={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(aR||(aR={})),Error,new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);class mR{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class gR extends mR{constructor(){super(gR.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}gR.INITIAL_CAPACITY=32;class bR{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new _R(this,e)}filter(e){return new IR(this,e)}map(e){return new SR(this,e)}mapAsync(e){return new CR(this,e)}serialMapAsync(e){return new CR(this,e).serial()}flatmap(e){return new ER(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new kR(this,e,t)}columnMajorBatch(e,t=!0,n=hR){return this.rowMajorBatch(e,t).map((e=>lR(e,n)))}concatenate(e,t){return new NR(new yR([this,e]),t)}take(e){return e<0||null==e?this:new $R(this,e)}skip(e){return e<0||null==e?this:new vR(this,e)}prefetch(e){return new RR(this,e)}shuffle(e,t){return new AR(this,e,t)}serial(){return new wR(this)}}class yR extends bR{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:pR(e),done:!1}}}class xR extends bR{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class wR extends bR{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class vR extends bR{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;Pg(e.value)}return this.upstream.next()}}class $R extends bR{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class kR extends bR{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class IR extends bR{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;Pg(e.value)}}}class SR extends bR{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=gg(e.value),n=this.transform(e.value),r=gg(n);for(const e of t)mg(e,r)||e.dispose();return{value:n,done:!1}}}class _R extends bR{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class CR extends bR{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=gg(e.value),n=await this.transform(e.value),r=gg(n);for(const e of t)mg(e,r)||e.dispose();return{value:n,done:!1}}}class TR extends bR{constructor(){super(),this.outputQueue=new gR,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class ER extends TR{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=gg(e.value),n=this.transform(e.value),r=gg(n);this.outputQueue.pushAll(n);for(const e of t)mg(e,r)||e.dispose();return!0}}class NR extends bR{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}(oR=iR||(iR={}))[oR.FAIL=0]="FAIL",oR[oR.SHORTEST=1]="SHORTEST",oR[oR.LONGEST=2]="LONGEST";class RR extends bR{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new mR(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class AR extends RR{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=nw.alea(n||Fm().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class DR{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return ph(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),OR((async()=>(await n.iterator()).columnMajorBatch(e,t,FR)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,OR((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,OR((async()=>(await t.iterator()).filter((t=>Bg((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return OR((async()=>(await t.iterator()).map((t=>Bg((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return OR((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return OR((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,OR((async()=>{return n=(s=async()=>({value:await t.iterator(),done:!1}),new xR(s)).take(e),new NR(n,r);var n,r,s}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,OR((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=nw.alea(t||Fm().toString());return OR((async()=>{let t=s.int32();return n&&(t+=s.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,OR((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function OR(e,t=null){return new class extends DR{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function FR(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof tg||Lm(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof tg?$w(e):Fg(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}function zR(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&ph("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}DR.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const MR=V$;class LR extends oh{nextDataId(){return LR.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new ih(this,Mg())}write(e,t,n){this.firstUse&&(this.firstUse=!1,qh().get("IS_NODE")&&um("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Eh(n[0])){const s=n.map((e=>zm(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,r,s){this.data.set(e,{values:t,dtype:r,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?o$(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):function(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error(`Unknown dtype ${t}`)}(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Mm(e)));return vb(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return vb(e.shape,e.dtype,t)}makeOutput(e,t,n){return Mg().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Fm();return e(),{kernelMs:Fm()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){zR([e],"where");const t=this.readSync(e.dataId);return MR(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function BR(e){return(t,n,r)=>{const s=_h(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],r);return s}}function PR(e,t,n){return WR(e,BR(t),n)}function WR(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;zR(i,e);const o=a,u=o.data.get(i.dataId).values;let l;if("string"===i.dtype){if(!Array.isArray(u))throw new Error("String tensor's value was not an instance of Array");l=W$(u)}else l=u;const c=n||i.dtype,h=t(l,c,s);return o.makeTensorInfo(i.shape,c,h)}}LR.nextDataId=0,Ug("cpu",(()=>new LR),1);const UR=PR(Xd,(e=>e>=0?e:Math.exp(e)-1)),VR={kernelName:Xd,backendName:"cpu",kernelFunc:UR};function GR(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const HR={kernelName:dp,backendName:"cpu",kernelFunc:GR};function jR(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r;zR([s],"leakyRelu");const i=gh(s.shape),o=n.data.get(s.dataId).values,u=Sh("float32",i);for(let e=0;e<o.length;e++)u[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(s.shape,"float32",u)}const qR={kernelName:yp,backendName:"cpu",kernelFunc:jR};function KR(e){return(t,n,r,s,a)=>{const i=Kb(t,n),o=i.length,u=Oh(i),l=Sh(a,gh(i)),c=t.length,h=n.length,d=Oh(t),p=Oh(n),f=jb(t,i),m=jb(n,i);if(f.length+m.length===0)for(let t=0;t<l.length;++t)l[t]=e(r[t%r.length],s[t%s.length]);else for(let t=0;t<l.length;++t){const n=Uh(t,o,u),a=n.slice(-c);f.forEach((e=>a[e]=0));const i=Wh(a,c,d),g=n.slice(-h);m.forEach((e=>g[e]=0));const b=Wh(g,h,p);l[t]=e(r[i],s[b])}return[l,i]}}const XR=KR(((e,t)=>e<0?t*e:e));function YR(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;zR([r,s],"prelu");const a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[o,u]=XR(r.shape,s.shape,a,i,"float32");return n.makeTensorInfo(u,"float32",o)}const ZR={kernelName:Qp,backendName:"cpu",kernelFunc:YR},JR=PR(uf,(e=>Math.max(0,e))),QR={kernelName:uf,backendName:"cpu",kernelFunc:JR},eA=PR(ff,(e=>Math.min(Math.max(0,e),6))),tA={kernelName:ff,backendName:"cpu",kernelFunc:eA},nA=BR((e=>1/(1+Math.exp(-e)))),rA=PR(Cf,(e=>1/(1+Math.exp(-e)))),sA={kernelName:Cf,backendName:"cpu",kernelFunc:rA};function aA(e,t,n,r,s){if("linear"===n)return GR({inputs:{x:t},backend:e});if("relu"===n)return JR({inputs:{x:t},backend:e});if("elu"===n)return UR({inputs:{x:t},backend:e});if("relu6"===n)return eA({inputs:{x:t},backend:e});if("prelu"===n)return YR({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return jR({inputs:{x:t},backend:e,attrs:{alpha:s}});if("sigmoid"===n)return rA({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function iA(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=n.makeTensorInfo(r.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",i)},o}const oA={kernelName:Id,backendName:"cpu",kernelFunc:iA};function uA(e,t,n="float32"){if("complex64"===n)return iA({inputs:{real:uA(e,t,"float32"),imag:uA(e,t,"float32")},backend:e});const r=Lh(gh(t),n);return e.makeTensorInfo(t,n,r)}function lA(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const cA={kernelName:af,backendName:"cpu",kernelFunc:lA};function hA(e,t,n,r){if("int32"===r)return[t,"int32",Int32Array.from(e)];if("bool"===r){const r=Om([0],n),[s,a]=KR(((e,t)=>e!==t?1:0))(t,[],e,r,"bool");return[a,"bool",s]}throw new Error(`Error in Cast: failed to cast ${n} to ${r}`)}function dA(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return GR({inputs:{x:s},backend:n});const e=uA(n,s.shape,s.dtype),t=dA({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=iA({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=lA({inputs:{input:s},backend:n}),t=dA({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!Ch(s.dtype,a)){const e=GR({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const i=n.data.get(s.dataId).values,[o,u,l]=hA(i,s.shape,s.dtype,a);return n.makeTensorInfo(o,u,l)}const pA={kernelName:vd,backendName:"cpu",kernelFunc:dA};function fA(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a:a,b:i}=n,o=s;zR([a,i],e);const u=o.data.get(a.dataId).values,l=o.data.get(i.dataId).values,c="string"===a.dtype?W$(u):u,h="string"===a.dtype?W$(l):l,d=r||a.dtype,[p,f]=t(a.shape,i.shape,c,h,d);return o.makeTensorInfo(f,d,p)}:({inputs:e,backend:s})=>{const{a:a,b:i}=e,o=s;if("complex64"===a.dtype||"complex64"===i.dtype){const e=dA({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),r=t.complexTensorInfos.real,s=t.complexTensorInfos.imag,u=o.data.get(r.dataId).values,l=o.data.get(s.dataId).values,c=dA({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),d=h.complexTensorInfos.real,p=h.complexTensorInfos.imag,f=o.data.get(d.dataId).values,m=o.data.get(p.dataId).values,[g,b,y]=n(a.shape,i.shape,u,l,f,m),x=o.makeTensorInfo(y,"float32",g),w=o.makeTensorInfo(y,"float32",b),v=iA({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),v}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,s=r||a.dtype,[u,l]=t(a.shape,i.shape,e,n,s);return o.makeTensorInfo(l,s,u)}}}function mA(e){return(t,n,r,s,a,i)=>{const o=Kb(t,n),u=gh(o),l=o.length,c=Oh(o),h=Sh("float32",u),d=Sh("float32",u),p=jb(t,o),f=jb(n,o),m=o$(r,s),g=o$(a,i),b=t.length,y=Oh(t),x=n.length,w=Oh(n);if(p.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,r=t%g.length,s=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);h[t]=s.real,d[t]=s.imag}else for(let t=0;t<h.length;t++){const n=Uh(t,l,c),r=n.slice(-b);p.forEach((e=>r[e]=0));const s=Wh(r,b,y),a=n.slice(-x);f.forEach((e=>a[e]=0));const i=Wh(a,x,w),o=e(m[2*s],m[2*s+1],g[2*i],g[2*i+1]);h[t]=o.real,d[t]=o.imag}return[h,d,o]}}const gA=KR(((e,t)=>e+t)),bA=mA(((e,t,n,r)=>({real:e+n,imag:t+r}))),yA=fA(td,gA,bA),xA={kernelName:td,backendName:"cpu",kernelFunc:yA};function wA(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,i=gh(s.shape),o=$h(a,i),u=gh(o);ph(i===u,(()=>`The new shape (${o}) has ${u} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const l=n.data.get(s.dataId);if(null!=l.complexTensorInfos){const e=l.complexTensorInfos.real,t=l.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:s.dataId,shape:o,dtype:s.dtype}}const vA={kernelName:lf,backendName:"cpu",kernelFunc:wA};function $A(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:i,transposeB:o}=r;zR([s,a],"matMul");const u=s.shape.length,l=a.shape.length,c=i?s.shape[u-2]:s.shape[u-1],h=o?a.shape[l-1]:a.shape[l-2],d=i?s.shape[u-1]:s.shape[u-2],p=o?a.shape[l-2]:a.shape[l-1],f=s.shape.slice(0,-2),m=a.shape.slice(0,-2),g=gh(f),b=gh(m),y=Kb(s.shape.slice(0,-2),a.shape.slice(0,-2)).concat([d,p]);ph(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[b,p,h]:[b,h,p],w=wA({inputs:{x:s},backend:n,attrs:{shape:i?[g,c,d]:[g,d,c]}}),v=wA({inputs:{x:a},backend:n,attrs:{shape:x}}),$=i?w.shape[1]:w.shape[2],k=i?w.shape[2]:w.shape[1],I=o?v.shape[1]:v.shape[2],S=Math.max(g,b),_=n.data.get(w.dataId).values,C=n.data.get(v.dataId).values,T=Oh(w.shape),E=Oh(v.shape),[N,R,A]=i?[T[0],1,T[1]]:[T[0],T[1],1],[D,O,F]=o?[1,E[1],E[0]]:[E[1],1,E[0]],z=k*I,M=vb([S,k,I],w.dtype),L=M.values,B=n.blockSize;for(let e=0;e<S;e++){const t=e%g,n=e%b;for(let r=0;r<k;r+=B){const s=Math.min(r+B,k);for(let a=0;a<I;a+=B){const i=Math.min(a+B,I);for(let o=0;o<$;o+=B){const u=Math.min(o+B,$);for(let l=r;l<s;l++)for(let r=a;r<i;r++){let s=0;for(let e=o;e<u;e++)s+=_[t*N+l*R+e*A]*C[e*D+r*O+n*F];L[e*z+(l*I+r)]+=s}}}}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(y,M.dtype,M.values)}const kA={kernelName:gd,backendName:"cpu",kernelFunc:$A},IA={kernelName:am,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=r;let d,p,f;const m=[];d=$A({inputs:{a:s,b:a},attrs:{transposeA:u,transposeB:l},backend:n}),i&&(p=yA({inputs:{a:d,b:i},backend:n}),m.push(d),d=p),c&&(f=aA(n,d,c,o,h),m.push(d),d=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return d}};function SA(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const _A={kernelName:Jh,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;zR(t,"abs");let r=new Float32Array(gh(t.shape));return r=SA(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,t.dtype)}},CA=PR(Qh,(e=>Math.acos(e))),TA={kernelName:Qh,backendName:"cpu",kernelFunc:CA},EA=PR(ed,(e=>Math.acosh(e))),NA={kernelName:ed,backendName:"cpu",kernelFunc:EA},RA={kernelName:nd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;zR(t,"addN");const s=r.map((e=>n.data.get(e.dataId).values)),a=vb(r[0].shape,r[0].dtype),i=a.values;for(let e=0;e<r.length;e++){const t=s[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function AA(e,t,n,r,s){const a=t.length,i=gh(t),o=Oh(t),u=Oh(s),l=Sh(n,gh(s));for(let t=0;t<i;++t){const n=Uh(t,a,o),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[r[e]];l[Wh(s,a,u)]=e[t]}return l}function DA(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;zR(s,"transpose");const i=s.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=s.shape[a[e]];const u=AA(r.data.get(s.dataId).values,s.shape,s.dtype,a,o);return{dataId:r.write(u,o,s.dtype),shape:o,dtype:s.dtype}}const OA={kernelName:Jf,backendName:"cpu",kernelFunc:DA},FA={kernelName:rd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;zR(s,"all");const o=kh(a,s.shape);let u=o;const l=zx(u,s.shape.length);let c=s;null!=l&&(c=DA({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Lx(u.length,s.shape.length)),Fx("all",u,c.shape.length);const[h,d]=Dx(c.shape,u),p=gh(d),f=Lh(gh(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*p;let n=m[t];for(let e=0;e<p;++e){const r=m[t+e];n=n&&r}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=wA({inputs:{x:g},backend:n,attrs:{shape:Ox(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},zA={kernelName:sd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;zR(s,"any");const o=kh(a,s.shape);let u=o;const l=zx(u,s.shape.length);let c=s;null!=l&&(c=DA({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Lx(u.length,s.shape.length)),Fx("any",u,c.shape.length);const[h,d]=Dx(c.shape,u),p=gh(d),f=Lh(gh(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*p;let n=m[t];for(let e=0;e<p;++e){const r=m[t+e];n=n||r}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=wA({inputs:{x:g},backend:n,attrs:{shape:Ox(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},MA={kernelName:ad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;zR(s,"argMax");let i=kh(a,s.shape);const o=zx(i,s.shape.length);let u=s;const l=[];null!=o&&(u=DA({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=Lx(i.length,u.shape.length)),i=[i[0]],Fx("argMax",i,u.shape.length);const[c,h]=Dx(u.shape,i),d=Lh(gh(c),"int32"),p=gh(h),f=n.data.get(u.dataId).values;for(let e=0;e<d.length;++e){const t=e*p;let n=f[t],r=0;for(let e=0;e<p;++e){const s=f[t+e];s>n&&(n=s,r=e)}d[e]=r}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},LA={kernelName:id,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;zR(s,"argMin");let i=kh(a,s.shape);const o=zx(i,s.shape.length);let u=s;const l=[];null!=o&&(u=DA({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=Lx(i.length,u.shape.length)),i=[i[0]],Fx("argMin",i,u.shape.length);const[c,h]=Dx(u.shape,i),d=Lh(gh(c),"int32"),p=gh(h),f=n.data.get(u.dataId).values;for(let e=0;e<d.length;++e){const t=e*p;let n=f[t],r=0;for(let e=0;e<p;++e){const s=f[t+e];s<n&&(n=s,r=e)}d[e]=r}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},BA=PR(od,(e=>Math.asin(e))),PA={kernelName:od,backendName:"cpu",kernelFunc:BA},WA=PR(ud,(e=>Math.asinh(e))),UA={kernelName:ud,backendName:"cpu",kernelFunc:WA},VA=PR(ld,(e=>Math.atan(e))),GA={kernelName:ld,backendName:"cpu",kernelFunc:VA},HA=KR(((e,t)=>Math.atan2(e,t))),jA=fA(hd,HA),qA={kernelName:hd,backendName:"cpu",kernelFunc:jA},KA=PR(cd,(e=>Math.atanh(e))),XA={kernelName:cd,backendName:"cpu",kernelFunc:KA};function YA(e,t,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,d=s.padInfo.top,p=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=vb(s.outShape,n),g=m.values,b=s.outShape[1]*s.outShape[2]*s.outShape[3],y=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*b,m=t*r[0];for(let t=0;t<s.inChannels;++t)for(let b=0;b<s.outHeight;++b){const w=b*i-d,v=Math.max(0,w),$=Math.min(s.inHeight,c+w),k=n+b*y;for(let n=0;n<s.outWidth;++n){const i=n*o-p,c=Math.max(0,i),d=Math.min(s.inWidth,h+i);let b=f,y=0,w=0;for(let n=v;n<$;n+=u){const s=m+n*r[1];for(let n=c;n<d;n+=l){const i=e[s+n*r[2]+t];"max"===a&&i>b?b=i:"avg"===a&&(y+=i,w++)}if(isNaN(b))break}g[k+n*x+t]="avg"===a?y/w:b}}}return m}function ZA(e,t,n,r,s=!1,a=!1){const i=vb(r.outShape,"int32"),o=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=r.padInfo.top,f=r.padInfo.left,m=vb(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const g=n*o-p;let b=g;for(;b<0;)b+=l;const y=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*u-f;let p=h;for(;p<0;)p+=c;const x=Math.min(r.inWidth,d+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=b;n<y;n+=l){const i=n-g;for(let o=p;o<x;o+=c){const u=o-h,l=m.get(e,n,o,t);l>w&&(w=l,v=s?a?((e*r.inHeight+n)*r.inWidth+o)*r.inChannels+t:(n*r.inWidth+o)*r.inChannels+t:i*d+u)}}i.set(v,e,n,o,t)}}return i}function JA(e,t,n,r,s,a){const i=s.strideDepth,o=s.strideHeight,u=s.strideWidth,l=s.dilationDepth,c=s.dilationHeight,h=s.dilationWidth,d=s.effectiveFilterDepth,p=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,b=s.padInfo.left,y="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=vb(s.outShape,n),w=x.values,v=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],$=s.outShape[2]*s.outShape[3]*s.outShape[4],k=s.outShape[3]*s.outShape[4],I=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*v,x=t*r[0];for(let t=0;t<s.inChannels;++t)for(let v=0;v<s.outDepth;++v){const S=v*i-m;let _=S;for(;_<0;)_+=l;const C=Math.min(s.inDepth,d+S),T=n+v*$;for(let n=0;n<s.outHeight;++n){const i=n*o-g;let d=i;for(;d<0;)d+=c;const m=Math.min(s.inHeight,p+i),v=T+n*k;for(let n=0;n<s.outWidth;++n){const i=n*u-b;let o=i;for(;o<0;)o+=h;const p=Math.min(s.inWidth,f+i),g=v+n*I;let $=y,k=0,S=0;for(let n=_;n<C;n+=l){const s=x+n*r[1];for(let n=d;n<m;n+=c){const i=s+n*r[2];for(let n=o;n<p;n+=h){const s=e[i+n*r[3]+t];if("max"===a&&s>$?$=s:"avg"===a&&(k+=s,S++),isNaN($))break}if(isNaN($))break}if(isNaN($))break}w[g+t]="avg"===a?k/Math.max(S,1):$}}}}return x}const QA={kernelName:dd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;zR(s,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;ph(Wy(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=Ry(s.shape,a,i,1,o,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&bh(l.inShape,l.outShape))c=GR({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=Oh(s.shape),r=YA(e,s.shape,s.dtype,t,l,"avg");c=n.makeTensorInfo(l.outShape,s.dtype,r.values)}return c}},eD={kernelName:fd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u,dataFormat:l}=r;zR(s,"avgPool3d");const c=Ay(s.shape,a,i,1,o,u,l),h=JA(n.data.get(s.dataId).values,s.shape,s.dtype,Oh(s.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}},tD={kernelName:md,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=r;zR([s,a],"avgPool3DGrad");const c=Ay(a.shape,i,o,1,u,l),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,b=c.dilationDepth,y=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,v=c.effectiveFilterHeight,$=c.effectiveFilterWidth,k=w-1-c.padInfo.front,I=$-1-c.padInfo.left,S=v-1-c.padInfo.top,_=vb(a.shape,"float32"),C=1/(f*m*g),T=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-k,i=r-S,o=s-I;let u=0;for(let n=0;n<w;n+=b){const r=(a+n)/h;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let n=0;n<v;n+=y){const s=(i+n)/d;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<$;n+=x){const a=(o+n)/p;a<0||a>=c.outWidth||Math.floor(a)!==a||(u+=T.get(e,r,s,a,t))}}}_.set(u*C,e,n,r,s,t)}return n.makeTensorInfo(_.shape,_.dtype,_.values)}},nD={kernelName:pd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;zR([s,a],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=r,c=Ry(i.shape,o,u,1,l),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,b=c.effectiveFilterHeight,y=c.effectiveFilterWidth,x=y-1-c.padInfo.left,w=b-1-c.padInfo.top,v=vb(i.shape,"float32"),$=1/(p*f),k=n.data.get(s.dataId).values,I=vb(s.shape,"float32",k);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-w,a=r-x;let i=0;for(let n=0;n<b;n+=m){const r=(s+n)/h;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<y;n+=g){const s=(a+n)/d;s<0||s>=c.outWidth||Math.floor(s)!==s||(i+=I.get(e,r,s,t))}}v.set(i*$,e,n,r,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},rD={kernelName:op,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,scale:a,offset:i,mean:o,variance:u}=t;ph(o.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ph(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ph(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),zR([s,o,u,a,i],"batchNorm");let{varianceEpsilon:l}=r;null==l&&(l=.001);const c=n.data.get(s.dataId).values,h=n.data.get(o.dataId).values,d=n.data.get(u.dataId).values,p=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,b=p.length,y=d.length,x=h.length;let w=0,v=0,$=0,k=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[v++])*p[$++]/Math.sqrt(d[k++]+l),w>=g&&(w=0),v>=x&&(v=0),$>=b&&($=0),k>=y&&(k=0);return n.makeTensorInfo(s.shape,s.dtype,m)}};function sD(e,t,n,r,s){const a=$y(r,t,n),i=gh(n),o=Oh(r);if(a){const n=ky(t,o);return"string"===s?e.slice(n,n+i):e.subarray(n,n+i)}const u=vb(r,s,"string"===s?W$(e):e),l=vb(n,s);for(let e=0;e<l.size;++e){const n=l.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));l.set(u.get(...r),...n)}return"string"===s?U$(l.values):l.values}function aD(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:i}=r;zR(s,"slice");const[o,u]=Iy(s,a,i);cy(s,o,u);const l=sD(n.data.get(s.dataId).values,o,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,l)}const iD={kernelName:kf,backendName:"cpu",kernelFunc:aD},oD={kernelName:bd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:i}=r;zR([s],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),u=Gv(s.shape,a,o),l=Hv(u.length,a.length),c=jv(s.shape,a,o),h=qv(i,a.length),d=Kv(c,i,a.length),p=wA({inputs:{x:s},backend:n,attrs:{shape:u}}),f=DA({inputs:{x:p},backend:n,attrs:{perm:l}}),m=wA({inputs:{x:f},backend:n,attrs:{shape:c}}),g=aD({inputs:{x:m},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function uD(e,t,n,r,s){const a=gh(r),i=Lh(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(i[r]+=a>0?t[n]:1)}return i}function lD(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],i=vb([s,n],t.dtype);for(let o=0;o<s;o++)for(let s=0;s<a;s++){const a=e.get(o,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(r?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,s),o,a):i.set(i.get(o,a)+1,o,a))}return i}const cD={kernelName:yd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=uD(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}},hD=KR(((e,t)=>e&t)),dD={kernelName:xd,backendName:"cpu",kernelFunc:fA(xd,hD)},pD={kernelName:wd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=Kb(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},fD=BR((e=>Math.ceil(e))),mD=WR($d,fD),gD={kernelName:$d,backendName:"cpu",kernelFunc:mD},bD=PR(kd,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),yD={kernelName:kd,backendName:"cpu",kernelFunc:bD},xD={kernelName:Sd,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(gh(t.shape)),s=n.data.get(t.dataId),a=s.complexTensorInfos.real,i=s.complexTensorInfos.imag,o=n.data.get(a.dataId).values,u=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=u[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}};function wD(e,t,n,r){const s=_h(n,gh(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=gh(e.shape);s.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const a="string"===n?W$(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+r;for(let t=0;t<e.shape[1];++t)s[o+t]=a[i++]}r+=e.shape[1]}))}return s}function vD(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const $D={kernelName:fp,backendName:"cpu",kernelFunc:vD};function kD(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=kh(s,t[0].shape)[0];Ov(t.map((e=>e.shape)),a);let i=Fv(t.map((e=>e.shape)),a);if(0===gh(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>gh(e.shape)>0));if(1===o.length)return GR({inputs:{x:o[0]},backend:n});if("complex64"===o[0].dtype){const e=o.map((e=>lA({inputs:{input:e},backend:n}))),t=o.map((e=>vD({inputs:{input:e},backend:n}))),r=kD({inputs:e,backend:n,attrs:{axis:a}}),s=kD({inputs:t,backend:n,attrs:{axis:a}}),i=iA({inputs:{real:r,imag:s},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),i}const u=o.map((e=>{const t=gh(e.shape.slice(a));return wA({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),l=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=Fv(u.map((e=>e.shape)),1);const c=1===u[0].shape[0],h=wD(l,i,t[0].dtype,c),d=Fv(o.map((e=>e.shape)),a),p=n.makeTensorInfo(d,t[0].dtype,h);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}const ID={kernelName:_d,backendName:"cpu",kernelFunc:kD};function SD(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=r;zR([s,a],"conv2d");const h=Vy(u),d=Dy(s.shape,a.shape,i,l,o,c,!1,h),p=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,b=d.padInfo.left,y=d.padInfo.top,x="channelsLast"===d.dataFormat,w=new Zm(d.outShape,s.dtype),v=Oh(s.shape),$=Oh(a.shape),k=v[0],I=x?v[1]:v[2],S=x?v[2]:1,_=x?1:v[1],C=w.strides[0],T=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,N=x?1:w.strides[1],R=n.data.get(s.dataId).values,A=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<d.batchSize;++e){const t=e*k,n=e*C;for(let e=0;e<d.outHeight;++e){const r=n+e*T,s=e*d.strideHeight-y;for(let e=0;e<p;++e){const n=s+e*m;if(n<0||n>=d.inHeight)continue;const a=e*$[0],i=t+n*I;for(let e=0;e<d.outWidth;++e){const t=r+e*E,n=e*d.strideWidth-b;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=d.inWidth)continue;const s=i+r*S;let o=a+e*$[1];for(let e=0;e<d.inChannels;++e){const n=R[s+e*_];for(let e=0;e<d.outChannels;++e)D[t+e*N]+=n*A[o+e];o+=d.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const _D={kernelName:Cd,backendName:"cpu",kernelFunc:SD},CD={kernelName:Td,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r;zR([s,a],"conv2dBackpropFilter");const h=Vy(u),d=Dy(s.shape,c,i,1,o,l,!1,h),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=d,b="channelsLast"===d.dataFormat,y=new Zm(d.filterShape,"float32"),x=d.padInfo.left,w=d.padInfo.top,v=n.data.get(s.dataId).values,$=n.data.get(a.dataId).values,k=new Zm(s.shape,s.dtype,v),I=new Zm(a.shape,a.dtype,$);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/p)),n=Math.min(d.outHeight,(d.inHeight+w-e)/p);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((x-r)/f)),a=Math.min(d.outWidth,(d.inWidth+x-r)/f);for(let i=0;i<d.inChannels;++i)for(let o=0;o<d.outChannels;++o){let u=0;for(let l=0;l<d.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-w;for(let e=s;e<a;++e){const n=r+e*f-x;u+=b?k.get(l,t,n,i)*I.get(l,c,e,o):k.get(l,i,t,n)*I.get(l,o,c,e)}}y.set(u,e,r,i,o)}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},TD={kernelName:Ed,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=r;zR([s,a],"conv2dBackpropInput");const h=Oh(a.shape),d=Oh(s.shape);let p=Vy(l);const f=Dy(i,a.shape,o,1,u,c,!1,p),m=new Zm(f.inShape,"float32"),g=m.values,b=n.data.get(s.dataId).values,y=n.data.get(a.dataId).values,[x,w,v]=h,{batchSize:$,filterHeight:k,filterWidth:I,inChannels:S,inHeight:_,inWidth:C,outChannels:T,outHeight:E,outWidth:N,strideHeight:R,strideWidth:A}=f;p=f.dataFormat;const D=k-1-f.padInfo.top,O=I-1-f.padInfo.left,F="channelsLast"===p,z=m.strides[0],M=F?m.strides[1]:m.strides[2],L=F?m.strides[2]:1,B=F?1:m.strides[1],P=d[0],W=F?d[1]:d[2],U=F?d[2]:1,V=F?1:d[1];for(let e=0;e<$;++e)for(let t=0;t<S;++t)for(let n=0;n<_;++n){const r=n-D,s=Math.max(0,Math.ceil(r/R)),a=Math.min(E,(k+r)/R);for(let i=0;i<C;++i){const o=i-O,u=Math.max(0,Math.ceil(o/A)),l=Math.min(N,(I+o)/A);let c=0;for(let n=s;n<a;++n){const s=n*R-r;for(let r=u;r<l;++r){const a=P*e+W*n+U*r,i=x*(k-1-s)+w*(I-1-(r*A-o))+v*t;for(let e=0;e<T;++e)c+=b[a+V*e]*y[i+e]}}g[z*e+M*n+L*i+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},ED={kernelName:Nd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r;zR([s,a],"conv3d");const l=Oy(s.shape,a.shape,i,u,o),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:m,padInfo:g}=l,b=g.front,y=g.left,x=g.top,w=new Zm(l.outShape,s.dtype),v=n.data.get(s.dataId).values,$=n.data.get(a.dataId).values,k=w.values,I=Oh(s.shape),S=Oh(a.shape);for(let e=0;e<l.batchSize;++e){const t=e*I[0],n=e*w.strides[0];for(let e=0;e<l.outDepth;++e){const r=n+e*w.strides[1],s=e*l.strideDepth-b;for(let e=0;e<c;++e){const n=s+e*p;if(n<0||n>=l.inDepth)continue;const a=e*S[0],i=t+n*I[1];for(let e=0;e<l.outHeight;++e){const t=r+e*w.strides[2],n=e*l.strideHeight-x;for(let e=0;e<h;++e){const r=n+e*f;if(r<0||r>=l.inHeight)continue;const s=a+e*S[1],o=i+r*I[2];for(let e=0;e<l.outWidth;++e){const n=t+e*l.outChannels,r=e*l.strideWidth-y;for(let e=0;e<d;++e){const t=r+e*m;if(t<0||t>=l.inWidth)continue;const a=s+e*S[2],i=o+t*l.inChannels;let u=a;for(let e=0;e<l.inChannels;++e){const t=v[i+e];for(let e=0;e<l.outChannels;++e)k[n+e]+=t*$[u+e];u+=l.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},ND={kernelName:Rd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,filterShape:u}=r;zR([s,a],"conv3dBackpropFilterV2");const l=Oh(s.shape),c=Oh(a.shape),h=Oy(s.shape,u,i,1,o),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,b=h.filterWidth,y=new Zm(h.filterShape,"float32"),x=y.values,[w,v,$,k]=y.strides,I=n.data.get(a.dataId).values,[S,_,C,T]=c,E=n.data.get(s.dataId).values,[N,R,A,D]=l,O=h.padInfo.front,F=h.padInfo.left,z=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((O-e)/d)),n=Math.min(h.outDepth,(h.inDepth+O-e)/d),r=e*w;for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((z-s)/p)),i=Math.min(h.outHeight,(h.inHeight+z-s)/p),o=s*v+r;for(let r=0;r<b;++r){const u=Math.max(0,Math.ceil((F-r)/f)),l=Math.min(h.outWidth,(h.inWidth+F-r)/f),c=r*$+o;for(let o=0;o<h.inChannels;++o){const m=o*k+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*N,b=m*S;for(let m=t;m<n;++m){const t=(e+m*d-O)*R+h,n=m*_+b;for(let e=a;e<i;++e){const a=(s+e*p-z)*A+t,i=e*C+n;for(let e=u;e<l;++e){const t=e*T+i;g+=E[(r+e*f-F)*D+a+o]*I[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},RD={kernelName:Ad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:i,strides:o,inputShape:u}=r;zR([s],"conv3dBackpropInputV2");const l=Oh(s.shape),c=Oh(a.shape),h=Oy(u,a.shape,o,1,i),d=new Zm(h.inShape,"float32"),p=d.values,[f,m,g,b]=d.strides,y=n.data.get(s.dataId).values,[x,w,v,$]=l,k=n.data.get(a.dataId).values,[I,S,_,C]=c,{batchSize:T,filterDepth:E,filterHeight:N,filterWidth:R,inChannels:A,inDepth:D,inHeight:O,inWidth:F,outChannels:z,outDepth:M,outHeight:L,outWidth:B,strideDepth:P,strideHeight:W,strideWidth:U}=h,V=E-1-h.padInfo.front,G=N-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<A;++t)for(let n=0;n<D;++n){const r=n-V,s=Math.max(0,Math.ceil(r/P)),a=Math.min(M,(E+r)/P);for(let i=0;i<O;++i){const o=i-G,u=Math.max(0,Math.ceil(o/W)),l=Math.min(L,(N+o)/W);for(let c=0;c<F;++c){const h=c-H,d=Math.max(0,Math.ceil(h/U)),T=Math.min(B,(R+h)/U);let A=0;for(let n=s;n<a;++n){const s=n*P-r;for(let r=u;r<l;++r){const a=r*W-o;for(let i=d;i<T;++i){const o=x*e+w*n+v*r+$*i,u=I*(E-1-s)+S*(N-1-a)+_*(R-1-(i*U-h))+C*t;for(let e=0;e<z;++e)A+=y[o+e]*k[u+e]}}}p[f*e+m*n+g*i+b*c+t]=A}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},AD=PR(Dd,(e=>Math.cos(e))),DD={kernelName:Dd,backendName:"cpu",kernelFunc:AD},OD=PR(Od,(e=>Math.cosh(e))),FD={kernelName:Od,backendName:"cpu",kernelFunc:OD},zD={kernelName:Md,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:l}=r,[c,h,d,p]=s.shape,f=a.shape[0],[m,g]=o,b=vb([f,m,g,p],"float32"),y=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(s.dataId).values,v=Oh(s.shape),$=Oh(b.shape);for(let e=0;e<f;e++){const t=4*e,n=y[t],r=y[t+1],s=y[t+2],a=y[t+3],i=x[e];if(i>=c)continue;const o=m>1?(s-n)*(h-1)/(m-1):0,f=g>1?(a-r)*(d-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+s)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let r=0;r<p;r++){const s=r+n*$[2]+t*$[1]+e*$[0];b.values[s]=l}else if("bilinear"===u){const n=Math.floor(c),s=Math.ceil(c),o=c-n;for(let u=0;u<g;u++){const c=g>1?r*(d-1)+u*f:.5*(r+a)*(d-1);if(c<0||c>d-1){for(let n=0;n<p;n++){const r=n+u*$[2]+t*$[1]+e*$[0];b.values[r]=l}continue}const h=Math.floor(c),m=Math.ceil(c),y=c-h;for(let r=0;r<p;r++){let a=r+h*v[2]+n*v[1]+i*v[0];const l=w[a];a=r+m*v[2]+n*v[1]+i*v[0];const c=w[a];a=r+h*v[2]+s*v[1]+i*v[0];const d=w[a];a=r+m*v[2]+s*v[1]+i*v[0];const p=l+(c-l)*y,f=d+(w[a]-d)*y;a=r+u*$[2]+t*$[1]+e*$[0],b.values[a]=p+(f-p)*o}}}else for(let n=0;n<g;++n){const s=g>1?r*(d-1)+n*f:.5*(r+a)*(d-1);if(s<0||s>d-1){for(let r=0;r<p;r++){const s=r+n*$[2]+t*$[1]+e*$[0];b.values[s]=l}continue}const o=Math.round(s),u=Math.round(c);for(let r=0;r<p;r++){const s=r+o*v[2]+u*v[1]+i*v[0],a=r+n*$[2]+t*$[1]+e*$[0];b.values[a]=w[s]}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},MD={kernelName:Fd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r;zR(s,"cumprod");const u=zx([a],s.shape.length);let l=s;null!=u&&(l=DA({inputs:{x:s},backend:n,attrs:{perm:u}}));const c=Lx(1,s.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const h=cg(l.dtype,"int32"),d=Mh(gh(l.shape),h),p=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<p.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)d[n]=i?1:p[n];else{const r=m(e,t-1);d[n]=i?p[r]*d[r]:p[n]*d[r]}}const g=n.makeTensorInfo(l.shape,h,d);if(null!=u){const e=DA({inputs:{x:g},backend:n,attrs:{perm:Mx(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}},LD={kernelName:zd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r;zR(s,"cumsum");const u=zx([a],s.shape.length);let l=s;null!=u&&(l=DA({inputs:{x:s},backend:n,attrs:{perm:u}}));const c=Lx(1,s.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const h=cg(l.dtype,"int32"),d=Lh(gh(l.shape),h),p=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<p.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)d[n]=i?0:p[n];else{const r=m(e,t-1);d[n]=i?p[r]+d[r]:p[n]+d[r]}}const g=n.makeTensorInfo(l.shape,h,d);if(null!=u){const e=DA({inputs:{x:g},backend:n,attrs:{perm:Mx(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}},BD={kernelName:Ld,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=uD(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===s.shape.length){const e=lD(n.bufferSync(s),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}},PD={kernelName:Bd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:i}=r;ph("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`));const o=s.shape[0],u=s.shape[1],l=s.shape[2],c=s.shape[3],h=u*a,d=l*a,p=c/(a*a),f=n.data.get(s.dataId).values,m=new Float32Array(o*h*d*p);let g=0;for(let e=0;e<o;++e)for(let t=0;t<h;++t){const n=Math.floor(t/a),r=t%a;for(let t=0;t<d;++t){const s=Math.floor(t/a),i=(r*a+t%a)*p;for(let t=0;t<p;++t){const r=t+i+c*(s+l*(n+u*e));m[g++]=f[r]}}}return n.makeTensorInfo([o,h,d,p],s.dtype,m)}};function WD(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u,dimRoundingMode:l}=r;zR([s,a],"depthwiseConv2DNative");const c=Oh(s.shape),h=Oh(a.shape);let d=u;null==d&&(d=[1,1]),ph(Wy(i,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`));const p=Dy(s.shape,a.shape,i,d,o,l,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:b,padInfo:y}=p,x=y.left,w=y.top,v=p.outChannels/p.inChannels,$=new Zm(p.outShape,s.dtype),k=n.data.get(s.dataId).values,I=n.data.get(a.dataId).values,S=$.values;for(let e=0;e<p.batchSize;++e){const t=e*c[0],n=e*$.strides[0];for(let e=0;e<p.outHeight;++e){const r=n+e*$.strides[1],s=e*p.strideHeight-w;for(let e=0;e<f;++e){const n=s+e*g;if(n<0||n>=p.inHeight)continue;const a=e*h[0],i=t+n*c[1];for(let e=0;e<p.outWidth;++e){const t=r+e*$.strides[2],n=e*p.strideWidth-x;for(let e=0;e<m;++e){const r=n+e*b;if(r<0||r>=p.inWidth)continue;const s=a+e*h[1],o=i+r*p.inChannels;let u=t,l=s;for(let e=0;e<p.inChannels;++e){const t=k[o+e];for(let e=0;e<v;++e)S[u+e]+=t*I[l+e];u+=v,l+=v}}}}}}return n.makeTensorInfo($.shape,$.dtype,$.values)}const UD={kernelName:Pd,backendName:"cpu",kernelFunc:WD},VD={kernelName:Wd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r;zR([s,a],"depthwiseConv2dNativeBackpropFilter");const h=Dy(s.shape,c,i,o,u,l,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:m}=h,g=new Zm(h.filterShape,"float32"),b=h.padInfo.left,y=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(s.dataId).values,v=new Zm(s.shape,s.dtype,w),$=n.data.get(a.dataId).values,k=new Zm(a.shape,a.dtype,$);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((y-e)/d)),n=Math.min(h.outHeight,(h.inHeight+y-e)/d);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((b-r)/p)),a=Math.min(h.outWidth,(h.inWidth+b-r)/p);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),u=i%x;let l=0;for(let u=0;u<h.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-y;for(let e=s;e<a;++e){const n=r+e*p-b;l+=v.get(u,t,n,o)*k.get(u,c,e,i)}}g.set(l,e,r,o,u)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},GD={kernelName:Ud,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=r;zR([s,a],"depthwiseConv2DNativeBackpropInput");const h=Oh(s.shape),d=Oh(a.shape),p=Dy(c,a.shape,i,o,u,l,!0),f=new Zm(p.inShape,"float32"),m=f.values,[g,b,y]=f.strides,x=n.data.get(s.dataId).values,[w,v,$]=h,k=n.data.get(a.dataId).values,[I,S,_]=d,{batchSize:C,filterHeight:T,filterWidth:E,inChannels:N,inHeight:R,inWidth:A,outChannels:D,outHeight:O,outWidth:F,strideHeight:z,strideWidth:M}=p,L=T-1-p.padInfo.top,B=E-1-p.padInfo.left,P=D/N;for(let e=0;e<C;++e)for(let t=0;t<N;++t)for(let n=0;n<R;++n){const r=n-L,s=Math.max(0,Math.ceil(r/z)),a=Math.min(O,(T+r)/z);for(let i=0;i<A;++i){const o=i-B,u=Math.max(0,Math.ceil(o/M)),l=Math.min(F,(E+o)/M);let c=0;for(let n=s;n<a;++n){const s=n*z-r;for(let r=u;r<l;++r){const a=w*e+v*n+$*r,i=I*(T-1-s)+S*(E-1-(r*M-o))+_*t;for(let e=0;e<P;++e)c+=x[a+(t*P+e)]*k[i+e]}}m[g*e+b*n+y*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},HD={kernelName:Vd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=gh(r.shape),a=n.data.get(r.dataId).values,i=vb([s,s],r.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*s+e]=a[e];const u=[...r.shape,...r.shape];return n.makeTensorInfo(u,i.dtype,i.values)}},jD={kernelName:Gd,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s}=e,{strides:a,pad:i,dilations:o}=n,u=t,l=u.data.get(r.dataId).values,c=r.shape.length,h=u.data.get(s.dataId).values,d=s.shape.length,{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:b,outWidth:y,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:$,filterWidth:k,dilationHeight:I,dilationWidth:S,outShape:_}=Ny(r.shape,s.shape,a,i,"NHWC",o),C=gh(_),T=_.length,E=_h(r.dtype,C);for(let e=0;e<p;++e)for(let t=0;t<b;++t){const n=t*w-x.top;for(let a=0;a<y;++a){const i=a*v-x.left;for(let o=0;o<g;++o){let u=Number.MIN_SAFE_INTEGER;for(let t=0;t<$;++t){const a=n+t*I;if(a>=0&&a<f)for(let n=0;n<k;++n){const p=i+n*S;if(p>=0&&p<m){const i=Wh([e,a,p,o],c,Oh(r.shape)),f=Wh([t,n,o],d,Oh(s.shape)),m=l[i]+h[f];m>u&&(u=m)}}}E[Wh([e,t,a,o],T,Oh(_))]=u}}}return{dataId:u.write(Om(E,r.dtype),_,r.dtype),shape:_,dtype:r.dtype}}},qD={kernelName:jd,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:i,pad:o,dilations:u}=n,l=t,c=zh(r.shape,l.data.get(r.dataId).values),h=zh(s.shape,l.data.get(s.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:b,padInfo:y,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:$,dilationHeight:k,dilationWidth:I,outShape:S}=Ny(r.shape,s.shape,i,o,"NHWC",u);ph(a.rank===S.length,(()=>`Error in ${jd}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const _=zh(S,l.data.get(a.dataId).values),C=Bh(s.shape,s.dtype);for(let e=0;e<d;++e)for(let t=0;t<g;++t){const n=t*x-y.top;for(let r=0;r<b;++r){const s=r*w-y.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,u=0;for(let t=0;t<v;++t){const r=n+t*k;if(r>=0&&r<p)for(let n=0;n<$;++n){const l=s+n*I;if(l>=0&&l<f){const s=c[e][r][l][a]+h[t][n][a];s>i&&(i=s,o=t,u=n)}}}C[o][u][a]+=_[e][t][r][a]}}}return{dataId:l.write(Om(C,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},KD={kernelName:Hd,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:i,pad:o,dilations:u}=n,l=t,c=zh(r.shape,l.data.get(r.dataId).values),h=zh(s.shape,l.data.get(s.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:b,padInfo:y,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:$,dilationHeight:k,dilationWidth:I,outShape:S}=Ny(r.shape,s.shape,i,o,"NHWC",u);ph(a.rank===S.length,(()=>`Error in ${Hd}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const _=zh(S,l.data.get(a.dataId).values),C=Bh(r.shape,r.dtype);for(let e=0;e<d;++e)for(let t=0;t<g;++t){const n=t*x-y.top;for(let r=0;r<b;++r){const s=r*w-y.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,u=s<0?0:s;for(let t=0;t<v;++t){const r=n+t*k;if(r>=0&&r<p)for(let n=0;n<$;++n){const l=s+n*I;if(l>=0&&l<f){const s=c[e][r][l][a]+h[t][n][a];s>i&&(i=s,o=r,u=l)}}}C[e][o][u][a]+=_[e][t][r][a]}}}return{dataId:l.write(Om(C,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},XD={kernelName:"Draw",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s}=t,{canvas:a,options:i}=r,{contextOptions:o,imageOptions:u}=i||{},l=(null==u?void 0:u.alpha)||1,c=(null==o?void 0:o.contextType)||"2d";if("2d"!==c)throw new Error(`Context type ${o.contextType} is not supported by the CPU backend.`);const h=a.getContext(c,(null==o?void 0:o.contextAttributes)||{});if(null==h)throw new Error(`Could not get the context with ${c} type.`);const[d,p]=s.shape.slice(0,2),f=2===s.shape.length?1:s.shape[2],m=n.data.get(s.dataId).values,g="float32"===s.dtype?255:1,b=new Uint8ClampedArray(p*d*4);for(let e=0;e<d*p;++e){const t=[0,0,0,255*l];for(let n=0;n<f;n++){const r=m[e*f+n];if("float32"===s.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===s.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===f?(t[0]=r*g,t[1]=r*g,t[2]=r*g):t[n]=r*g}const n=4*e;b[n+0]=Math.round(t[0]),b[n+1]=Math.round(t[1]),b[n+2]=Math.round(t[2]),b[n+3]=Math.round(t[3])}a.width=p,a.height=d;const y=new ImageData(b,p,d);return h.putImageData(y,0,0),s}},YD=KR(((e,t)=>e*t)),ZD=mA(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),JD=fA(Up,YD,ZD),QD={kernelName:Up,backendName:"cpu",kernelFunc:JD};function eO(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;let o;zR(s,"sum"),o="bool"===s.dtype?dA({inputs:{x:s},backend:n,attrs:{dtype:"int32"}}):GR({inputs:{x:s},backend:n});const u=o.shape.length,l=kh(a,o.shape),c=zx(l,u);let h=l,d=o;null!=c&&(d=DA({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Lx(h.length,u)),Fx("sum",h,d.shape.length);const[p,f]=Dx(d.shape,h);let m=uA(n,p,cg(d.dtype,"int32"));const g=gh(f),b=n.data.get(m.dataId).values,y=n.data.get(d.dataId).values;for(let e=0;e<b.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=y[t+e];b[e]=n}if(i){const e=m;m=wA({inputs:{x:m},backend:n,attrs:{shape:Ox(m.shape,l)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(d),m}const tO={kernelName:Nf,backendName:"cpu",kernelFunc:eO},nO={kernelName:Kd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:i,summedDims:o,idDims:u}=x$(s,a.length);v$(i.length,u,a);const{path:l,steps:c}=$$(o,u),h=c.length;let d=null,p=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=w$(p,u[t]);let s;k$(e)?s=a[t]:(s=DA({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const i=s.shape.slice();for(let e=0;e<r.length;++e)i.splice(r[e],0,1);bh(s.shape,i)||(s=wA({inputs:{x:s},backend:n,attrs:{shape:i}}),f.push(s)),null===d?d=s:(d=JD({inputs:{a:s,b:d},backend:n}),f.push(d))}e<h-1&&(l[e]>=0&&(d=eO({inputs:{x:d},backend:n,attrs:{axis:l[e]-(i.length-p),keepDims:!1}}),f.push(d)),p--)}for(const e of f)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},rO={kernelName:Yd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:s}=t;zR([r,s],"eluGrad");const a=new Float32Array(gh(s.shape)),i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=0?o[e]:o[e]*(t+1)}return n.makeTensorInfo(s.shape,"float32",a)}},sO=KR(((e,t)=>e===t?1:0)),aO=fA(Jd,sO,null,"bool"),iO={kernelName:Jd,backendName:"cpu",kernelFunc:aO},oO=t$,uO=n$,lO=r$,cO=s$,hO=a$,dO=i$,pO=PR(Zd,(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+oO*n);return t*(1-((((dO*r+hO)*r+cO)*r+lO)*r+uO)*r*Math.exp(-n*n))})),fO={kernelName:Zd,backendName:"cpu",kernelFunc:pO},mO=BR((e=>Math.exp(e))),gO=WR(Qd,mO,"float32"),bO={kernelName:Qd,backendName:"cpu",kernelFunc:gO};function yO(e){const{inputs:t,backend:n,attrs:r}=e,{input:s}=t,{dim:a}=r,i=s.shape.length,o=s.shape.slice();let u=a;return a<0&&(ph(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),u=i+a+1),o.splice(u,0,1),wA({inputs:{x:s},backend:n,attrs:{shape:o}})}const xO={kernelName:ep,backendName:"cpu",kernelFunc:yO},wO=BR((e=>Math.expm1(e))),vO=WR(tp,wO),$O={kernelName:tp,backendName:"cpu",kernelFunc:vO},kO=KR(((e,t)=>e/t)),IO=fA(qd,kO),SO={kernelName:qd,backendName:"cpu",kernelFunc:IO},_O=KR(((e,t)=>e-t)),CO=mA(((e,t,n,r)=>({real:e-n,imag:t-r}))),TO=fA(jf,_O,CO),EO={kernelName:jf,backendName:"cpu",kernelFunc:TO};function NO(e,t,n){const r=e.shape,s=r[0],a=r[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,u=i.complexTensorInfos.imag,l=[s,a],c=gh(l),h=Sh("float32",c),d=Sh("float32",c);for(let e=0;e<s;e++){const r=aD({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),s=aD({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=iA({inputs:{real:r,imag:s},backend:n}),{real:l,imag:c}=RO(i,t,n),p=o$(l,c);for(let t=0;t<a;t++){const n=h$(p,t);h[e*a+t]=n.real,d[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i)}const p=n.makeTensorInfo(l,"float32",h),f=n.makeTensorInfo(l,"float32",d),m=iA({inputs:{real:p,imag:f},backend:n});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}function RO(e,t,n){const r=gh(e.shape),s=n.data.get(e.dataId),a=n.data.get(s.complexTensorInfos.real.dataId).values,i=n.data.get(s.complexTensorInfos.imag.dataId).values;if((o=r)&o-1){const e=function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,i=0;for(let r=0;r<t;r++){const o=f$(s*r,t,n),u=h$(e,r);a+=u.real*o.real-u.imag*o.imag,i+=u.real*o.imag+u.imag*o.real}n&&(a/=t,i/=t),d$(r,a,i,s)}return r}(o$(a,i),r,t);return u$(e)}{const s=AO(a,i,r,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",s.real),t=n.makeTensorInfo(o,"float32",s.imag),a=n.makeTensorInfo([],"float32",Dm(r,"float32")),i=GR({inputs:{x:a},backend:n}),u=SO.kernelFunc({inputs:{a:e,b:a},backend:n}),l=SO.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(u.dataId).values,h=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),{real:c,imag:h}}return s}var o}function AO(e,t,n,r,s){if(1===n)return{real:e,imag:t};const a=o$(e,t),i=n/2,o=l$(a),u=o.real,l=o.imag,c=[u.length],h=s.makeTensorInfo(c,"float32",u),d=s.makeTensorInfo(c,"float32",l),p=iA({inputs:{real:h,imag:d},backend:s}),f=c$(a),m=f.real,g=f.imag,b=[m.length],y=s.makeTensorInfo(b,"float32",m),x=s.makeTensorInfo(b,"float32",g),w=iA({inputs:{real:y,imag:x},backend:s}),v=AO(u,l,i,r,s),$=v.real,k=v.imag,I=[$.length],S=s.makeTensorInfo(I,"float32",$),_=s.makeTensorInfo(I,"float32",k),C=iA({inputs:{real:S,imag:_},backend:s}),T=AO(m,g,i,r,s),E=T.real,N=T.imag,R=[E.length],A=s.makeTensorInfo(R,"float32",E),D=s.makeTensorInfo(R,"float32",N),O=iA({inputs:{real:A,imag:D},backend:s}),F=p$(n,r),z=[F.real.length],M=s.makeTensorInfo(z,"float32",F.real),L=s.makeTensorInfo(z,"float32",F.imag),B=iA({inputs:{real:M,imag:L},backend:s}),P=JD({inputs:{a:B,b:O},backend:s}),W=yA({inputs:{a:C,b:P},backend:s}),U=TO({inputs:{a:C,b:P},backend:s}),V=lA({inputs:{input:W},backend:s}),G=lA({inputs:{input:U},backend:s}),H=vD({inputs:{input:W},backend:s}),j=vD({inputs:{input:U},backend:s}),q=kD({inputs:[V,G],backend:s,attrs:{axis:0}}),K=kD({inputs:[H,j],backend:s,attrs:{axis:0}}),X=s.data.get(q.dataId).values,Y=s.data.get(K.dataId).values;return s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(y),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(S),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(C),s.disposeIntermediateTensorInfo(A),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(O),s.disposeIntermediateTensorInfo(M),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const DO={kernelName:np,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=gh(r.shape),a=r.shape[r.shape.length-1],i=wA({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),o=NO(i,!1,n),u=wA({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),u}};function OO(e){const{backend:t,attrs:n}=e,{shape:r,value:s,dtype:a}=n,i=a||Rh(s),o=_h(i,gh(r));return function(e,t){e.fill(t)}(o,s),t.makeTensorInfo(r,i,o)}const FO={kernelName:rp,backendName:"cpu",kernelFunc:OO},zO={kernelName:sp,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,s=n,a=Sh(r.dtype,gh(r.shape)),[i,o,u,l]=r.shape,c=s.data.get(r.dataId).values;for(let e=0;e<i;e++){const t=e*u*o*l;for(let e=0;e<o;e++){const n=e*(u*l);for(let e=0;e<u;e++){const r=e*l;for(let s=0;s<l;s++){const i=Math.round(u-e-1),o=t+n+r+s;let h=c[o];i>=0&&i<u&&(h=c[t+n+i*l+s]),a[o]=h}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},MO=BR((e=>Math.floor(e))),LO=WR(ap,MO),BO={kernelName:ap,backendName:"cpu",kernelFunc:LO},PO=KR(((e,t)=>Math.floor(e/t))),WO=fA(ip,PO,null,"int32"),UO={kernelName:ip,backendName:"cpu",kernelFunc:WO},VO={kernelName:im,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=r;let m=SD({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const e=m;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const e=wA({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=yA({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=yA({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(p){const e=m;if("NCHW"===c&&"prelu"===p&&1===o.shape.length&&1!==o.shape[0]){const e=wA({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=aA(n,m,p,e,f),n.disposeIntermediateTensorInfo(e)}else m=aA(n,m,p,o,f);n.disposeIntermediateTensorInfo(e)}return m}},GO={kernelName:om,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=r;let m=WD({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const e=m;m=yA({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=m;m=aA(n,m,p,o,f),n.disposeIntermediateTensorInfo(e)}return m}};function HO(e,t,n,r,s,a,i,o,u){const l=vb([r,a],n);for(let n=0;n<r;n++){const r=[];let c=0;for(let t=0;t<s;t++){const a=e[n*s+t];c+=a*i[t],r.push(a)}if(c<0||c>=u/a)throw new Error(`Invalid indices: ${r} does not index into ${o}`);for(let e=0;e<a;e++)l.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return l}const jO={kernelName:lp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=gh(r.shape),i=s.shape,o=i[i.length-1],[u,l,c,h]=Xv(r,s);if(0===l)return n.makeTensorInfo(u,r.dtype,[]);const d=HO(n.data.get(s.dataId).values,n.bufferSync(r),r.dtype,l,o,c,h,r.shape,a);return n.makeTensorInfo(u,r.dtype,d.values)}};function qO(e,t,n){const r=vb(n,e.dtype);for(let n=0;n<r.size;++n){const s=r.indexToLoc(n).slice(),a=s[0],i=s[2],o=t.locToIndex([a,i]);s[2]=t.values[o];const u=e.locToIndex(s);0<=u&&u<e.values.length&&(r.values[n]=e.values[u])}return r}const KO={kernelName:up,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:i,batchDims:o}=r;zR([s,a],"gatherV2");const u=kh(i,s.shape)[0],l=n.data.get(a.dataId).values,c=s.shape[u];for(let e=0;e<l.length;++e){const t=l[e];ph(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let h=o;null==o&&(h=0);const d=gh(a.shape),p=P$(s,a,u,h),f=wA({inputs:{x:s},backend:n,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),m=wA({inputs:{x:a},backend:n,attrs:{shape:[p.batchSize,d/p.batchSize]}}),g=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],b=n.bufferSync(m),y=qO(n.bufferSync(f),b,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(p.outputShape,y.dtype,y.values)}},XO=KR(((e,t)=>e>t?1:0)),YO=fA(cp,XO,null,"bool"),ZO={kernelName:cp,backendName:"cpu",kernelFunc:YO},JO=KR(((e,t)=>e>=t?1:0)),QO=fA(hp,JO,null,"bool"),eF={kernelName:hp,backendName:"cpu",kernelFunc:QO},tF={kernelName:pp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=gh(r.shape),a=r.shape[r.shape.length-1],i=wA({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),o=NO(i,!0,n),u=wA({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),u}},nF=PR(mp,(e=>Number.isFinite(e)?1:0),"bool"),rF={kernelName:mp,backendName:"cpu",kernelFunc:nF},sF=PR(gp,(e=>Math.abs(e)===1/0?1:0),"bool"),aF={kernelName:gp,backendName:"cpu",kernelFunc:sF},iF=PR(bp,(e=>Number.isNaN(e)?1:0),"bool"),oF={kernelName:bp,backendName:"cpu",kernelFunc:iF},uF=KR(((e,t)=>e<t?1:0)),lF=fA(xp,uF,null,"bool"),cF={kernelName:xp,backendName:"cpu",kernelFunc:lF},hF=KR(((e,t)=>e<=t?1:0)),dF=fA(wp,hF,null,"bool"),pF={kernelName:wp,backendName:"cpu",kernelFunc:dF};function fF(e,t,n){const r=(t-e)/(n-1),s=Lh(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return s}const mF={kernelName:vp,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=fF(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},gF=BR((e=>Math.log(e))),bF=WR($p,gF),yF={kernelName:$p,backendName:"cpu",kernelFunc:bF},xF=PR(kp,(e=>Math.log1p(e))),wF={kernelName:kp,backendName:"cpu",kernelFunc:xF},vF=KR(((e,t)=>e&&t)),$F=fA(Ip,vF,null,"bool"),kF={kernelName:Ip,backendName:"cpu",kernelFunc:$F},IF=PR(Sp,(e=>e?0:1),"bool"),SF={kernelName:Sp,backendName:"cpu",kernelFunc:IF},_F=KR(((e,t)=>e||t)),CF=fA(_p,_F,null,"bool"),TF={kernelName:_p,backendName:"cpu",kernelFunc:CF},EF={kernelName:Cp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:i,alpha:o,beta:u}=r;zR(s,"LRN");const l=s.shape[3],c=l-1,h=n.data.get(s.dataId).values,d=gh(s.shape),p=new Float32Array(d);function f(e){const t=e%l;let n=e-t+Math.max(0,t-a);const r=e-t+Math.min(t+a,c);let s=0;for(;n<=r;n++){const e=h[n];s+=e*e}return s}for(let e=0;e<d;e++){const t=f(e),n=h[e]*Math.pow(i+o*t,-u);p[e]=n}return n.makeTensorInfo(s.shape,s.dtype,p)}},NF={kernelName:Tp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:i}=t,{depthRadius:o,bias:u,alpha:l,beta:c}=r;zR(i,"LRNGrad");const h=gh(i.shape),d=i.shape[3],p=n.data.get(i.dataId).values,f=n.data.get(s.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),b=h;for(let e=0;e<b;e++){const t=e%d,n=e-t+Math.max(0,t-o),r=e-t+Math.min(d,t+o+1);let s=0;for(let e=n;e<r;e++)s+=Math.pow(f[e],2);s=l*s+u;for(let t=n;t<r;t++){let n=-2*l*c*f[t]*m[e]/s;e===t&&(n+=Math.pow(s,-c)),n*=p[e],g[t]+=n}}return n.makeTensorInfo(i.shape,s.dtype,g)}};function RF(e,t,n,r){const s=Sh(r,gh(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>a)&&(a=t)}s[n]=a}return s}function AF(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:i}=r,o=n;let u=s.shape;const l=u.length,c=kh(a,u);let h=c;const d=zx(h,l);let p=o.data.get(s.dataId).values;if(null!=d){const e=new Array(l);for(let t=0;t<e.length;t++)e[t]=u[d[t]];p=AA(p,u,s.dtype,d,e),h=Lx(h.length,l),u=e}zR(s,"max"),Fx("max",h,l);const[f,m]=Dx(u,h),g=RF(p,gh(m),f,s.dtype),b=o.write(g,f,s.dtype);let y=f;return i&&(y=Ox(f,c)),{dataId:b,shape:y,dtype:s.dtype}}const DF={kernelName:Ep,backendName:"cpu",kernelFunc:AF},OF=KR(((e,t)=>Math.max(e,t))),FF=fA(Np,OF),zF={kernelName:Np,backendName:"cpu",kernelFunc:FF},MF={kernelName:Rp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;zR(s,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;ph(Wy(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=Ry(s.shape,a,i,1,o,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&bh(l.inShape,l.outShape))c=GR({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=Oh(s.shape),r=YA(e,s.shape,s.dtype,t,l,"max");c=n.makeTensorInfo(l.outShape,s.dtype,r.values)}return c}},LF={kernelName:Dp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u,dataFormat:l}=r;zR(s,"maxPool3d");const c=Ay(s.shape,a,i,1,o,u,l),h=JA(n.data.get(s.dataId).values,s.shape,s.dtype,Oh(s.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}},BF={kernelName:Op,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=r;zR([s,a],"maxPool3DGrad");const c=Ay(a.shape,i,o,1,u,l),h=function(e,t){const n=vb(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,u=t.dilationWidth,l=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let b=0;b<t.outDepth;++b){const y=b*r-d;let x=y;for(;x<0;)x+=i;const w=Math.min(t.inDepth,l+y);for(let r=0;r<t.outHeight;++r){const l=r*s-p;let d=l;for(;d<0;)d+=o;const v=Math.min(t.inHeight,c+l);for(let s=0;s<t.outWidth;++s){const p=s*a-f;let $=p;for(;$<0;)$+=u;const k=Math.min(t.inWidth,h+p);let I=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<w;t+=i){const n=t-y;for(let r=d;r<v;r+=o){const s=r-l;for(let a=$;a<k;a+=u){const i=a-p,o=e.get(m,t,r,a,g);o>=I&&(I=o,S=n*c*h+s*c+i)}}}n.set(S,m,b,r,s,g)}}}return n}(n.bufferSync(a),c),d=c.strideDepth,p=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,b=c.dilationWidth,y=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,v=y-1-c.padInfo.front,$=w-1-c.padInfo.left,k=x-1-c.padInfo.top,I=vb(a.shape,"float32"),S=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-v,i=r-k,o=s-$;let u=0;for(let n=0;n<y;n+=m){const r=(a+n)/d;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let s=0;s<x;s+=g){const a=(i+s)/p;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let i=0;i<w;i+=b){const l=(o+i)/f;if(l<0||l>=c.outWidth||Math.floor(l)!==l)continue;const d=y*x*w-1-h.get(e,r,a,l,t)===n*x*w+s*w+i?1:0;0!==d&&(u+=S.get(e,r,a,l,t)*d)}}}I.set(u,e,n,r,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},PF={kernelName:Ap,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;zR([a,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,d=Ry(o.shape,u,l,1,c,h),p=n.data.get(o.dataId).values,f=vb(d.outShape,o.dtype,ZA(p,o.shape,o.dtype,d).values),m=d.strideHeight,g=d.strideWidth,b=d.dilationHeight,y=d.dilationWidth,x=d.effectiveFilterHeight,w=d.effectiveFilterWidth,v=w-1-d.padInfo.left,$=x-1-d.padInfo.top,k=vb(o.shape,"float32"),I=n.data.get(s.dataId).values,S=vb(s.shape,"float32",I);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inHeight;++n)for(let r=0;r<d.inWidth;++r){const s=n-$,a=r-v;let i=0;for(let n=0;n<x;n+=b){const r=(s+n)/m;if(!(r<0||r>=d.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=y){const o=(a+s)/g;if(o<0||o>=d.outWidth||Math.floor(o)!==o)continue;const u=x*w-1-f.get(e,r,o,t)===n*w+s?1:0;0!==u&&(i+=S.get(e,r,o,t)*u)}}k.set(i,e,n,r,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},WF={kernelName:Fp,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=t,u=n;zR(r,"MaxPoolWithArgmax");const l=u.data.get(r.dataId).values,c=Ry(r.shape,s,a,[1,1],i),[h,d]=function(e,t,n,r,s){const a=YA(e,0,n,Oh(t),s,"max"),i=ZA(e,t,n,s,!0,r);return[a.values,i.values]}(l,r.shape,r.dtype,o,c),p=u.write(h,c.outShape,r.dtype),f=u.write(d,c.outShape,r.dtype);return[{dataId:p,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},UF={kernelName:zp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=kh(a,s.shape),u=gh(Dx(s.shape,o)[1]),l=[],c=n.makeTensorInfo([],"float32",new Float32Array([u]));l.push(c);const h=dA({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});l.push(h);const d=IO({inputs:{a:h,b:c},backend:n});l.push(d);const p=eO({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:i}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},VF={kernelName:Mp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;zR(s,"min");const o=kh(a,s.shape);let u=o;const l=zx(u,s.shape.length);let c=s;null!=l&&(c=DA({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Lx(u.length,s.shape.length)),Fx("min",u,c.shape.length);const[h,d]=Dx(c.shape,u),p=gh(d),f=Lh(gh(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*p;let n=m[t];for(let e=0;e<p;++e){const r=m[t+e];(Number.isNaN(r)||r<n)&&(n=r)}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=wA({inputs:{x:g},backend:n,attrs:{shape:Ox(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},GF=KR(((e,t)=>Math.min(e,t))),HF=fA(Lp,GF),jF={kernelName:Lp,backendName:"cpu",kernelFunc:HF},qF={kernelName:Bp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,mode:i}=r;zR(s,"mirrorPad");const o=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),u=a.map((e=>e[0])),l=a.map(((e,t)=>e[0]+s.shape[t])),c="reflect"===i?0:1,h=n.data.get(s.dataId).values,d=s.shape.length,p=Oh(s.shape),f=gh(o),m=o.length,g=Oh(o),b=Sh(s.dtype,f);for(let e=0;e<f;e++){let t=Uh(e,m,g);for(let e=0;e<m;e++)t[e]<u[e]?t[e]=2*u[e]-t[e]-c:t[e]>=l[e]&&(t[e]=2*(l[e]-1)-t[e]+c);t=t.map(((e,t)=>e-u[t]));const n=Wh(t,d,p);b[e]=h[n]}return{dataId:n.write(b,o,s.dtype),shape:o,dtype:s.dtype}}},KF=KR(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),XF=fA(Pp,KF),YF={kernelName:Pp,backendName:"cpu",kernelFunc:XF};function ZF(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,i=s.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const u=kh([o],s.shape),l=AF({inputs:{x:s},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),c=Ox(l.shape,u),h=wA({inputs:{x:l},backend:n,attrs:{shape:c}}),d=TO({inputs:{a:s,b:h},backend:n}),p=gO({inputs:{x:d},backend:n}),f=eO({inputs:{x:p},backend:n,attrs:{axis:u,keepDims:!1}}),m=wA({inputs:{x:f},backend:n,attrs:{shape:c}}),g=IO({inputs:{a:p,b:m},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const JF={kernelName:Df,backendName:"cpu",kernelFunc:ZF},QF={kernelName:Wp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:i,normalized:o}=r;zR(s,"multinomial");const u=o?s:ZF({inputs:{logits:s},backend:n,attrs:{dim:-1}}),l=u.shape[0],c=u.shape[1],h=n.data.get(u.dataId).values,d=[l,a],p=Lh(gh(d),"int32");for(let e=0;e<l;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const r=nw.alea(i.toString()),s=e*a;for(let e=0;e<a;++e){const t=r();p[s+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){p[s+e]=r;break}}}return o||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(d,"int32",p)}};function ez(e,t,n){const r=Dm(-1,n);return YD([],t,r,e,n)}const tz={kernelName:Vp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;zR(r,"neg");const s=n.data.get(r.dataId).values,[a,i]=ez(s,r.shape,r.dtype);return n.makeTensorInfo(i,r.dtype,a)}},nz=sv,rz={kernelName:Hp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=r;zR(s,"NonMaxSuppression");const l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=nz(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},sz=av,az={kernelName:jp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=r;zR(s,"NonMaxSuppressionPadded");const c=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:d,validOutputs:p}=sz(c,h,i,o,u,l);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},iz=iv,oz={kernelName:qp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=r;zR(s,"NonMaxSuppressionWithScore");const c=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,d=i,p=o,f=u,m=l,{selectedIndices:g,selectedScores:b}=iz(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}},uz=KR(((e,t)=>e!==t?1:0)),lz=fA(Gp,uz,null,"bool"),cz={kernelName:Gp,backendName:"cpu",kernelFunc:lz},hz={kernelName:Xp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:i,onValue:o,offValue:u}=r;zR(s,"oneHot");const l=gh(s.shape),c=new Float32Array(l*i);c.fill(u);const h=n.data.get(s.dataId).values;for(let e=0;e<l;++e)h[e]>=0&&h[e]<i&&(c[e*i+h[e]]=o);return n.makeTensorInfo([...s.shape,i],a,c)}};function dz(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=lA({inputs:{input:r},backend:n}),t=dz({inputs:{x:e},backend:n}),s=vD({inputs:{input:r},backend:n}),a=dz({inputs:{x:s},backend:n}),i=iA({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return OO({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const pz={kernelName:nm,backendName:"cpu",kernelFunc:dz},fz={kernelName:Kp,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=lA({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=vD({inputs:{input:s},backend:r}),i=dz({inputs:{x:a},backend:r}),o=iA({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return OO({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function mz(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return yO({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{fh(a,e.shape,"All tensors passed to stack must have matching shapes"),ph(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],u=kD({inputs:t.map((e=>{const t=yO({inputs:{input:e},backend:n,attrs:{dim:s}});return o.push(t),t})),backend:n,attrs:{axis:s}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}const gz={kernelName:Yp,backendName:"cpu",kernelFunc:mz},bz={kernelName:Zp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:i}=r;zR(s,"pad");const o=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),u=a.map((e=>e[0])),l=n.data.get(s.dataId).values,c=gh(s.shape),h=s.shape.length,d=Oh(s.shape),p=gh(o),f=o.length,m=Oh(o),g=Sh(s.dtype,p);0!==i&&g.fill(i);for(let e=0;e<c;e++)g[Wh(Uh(e,h,d).map(((e,t)=>e+u[t])),f,m)]=l[e];return{dataId:n.write(g,o,s.dtype),shape:o,dtype:s.dtype}}},yz=KR(((e,t)=>Math.pow(e,t))),xz=fA(Jp,yz),wz={kernelName:Jp,backendName:"cpu",kernelFunc:xz};function vz(e,t,n,r){const[s,a]=Dx(e,r),i=cg(t,"int32"),o=Lh(gh(s),i),u=gh(a);for(let e=0;e<o.length;++e){const t=e*u;let r=1;for(let e=0;e<u;++e)r*=n[t+e];o[e]=r}return{outVals:o,outShape:s,outDtype:i}}const $z={kernelName:ef,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;zR(s,"prod");const o=s.shape.length,u=kh(a,s.shape),l=zx(u,o);let c=u,h=s;const d=[];null!=l&&(h=DA({inputs:{x:s},backend:n,attrs:{perm:l}}),d.push(h),c=Lx(c.length,o));const p=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=vz(h.shape,h.dtype,p,c);let b=m;return i&&(b=Ox(m,u)),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(b,g,f)}};function kz(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function Iz(e,t,n,r,s,a,i,o){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,r)=>{if(e<0||e>=n){const s=Uh(r,t.length,Oh(t)).join(",");throw new Error(`indices[${s}] = ${e} is not in [0, ${n})`)}}))}(a,i,t[0][0]-1),0===r.length)throw new Error("params.rank must be nonzero");const u=r[0],{outSplits:l,valueSlices:c,numValues:h}=function(e,t,n,r){const s=[];let a=0;const i=t.length-1+n.length,o=new Array(i).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],s=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let u=1;for(let e=0;e<t.length-1;++e){u*=t[e];const n=t[e+1];for(let t=1;t<u+1;++t)o[e].push(t*n)}for(let r=0;r<e.length;++r){let i=e[r],u=e[r]+1;for(let e=0;e<n.length;++e){const r=n[e],s=e+t.length-1;if(s>=0){const e=o[s],t=e[e.length-1]-r[i];for(let e=i;e<u;++e)o[s].push(r[e+1]+t)}i=r[i],u=r[u]}u!==i&&(s.push([i,u]),a+=u-i)}return{outSplits:o,valueSlices:s,numValues:a}}(a,i,e,u),d=function(e){const t=[];for(let n=0;n<e.length;++n){const r=_h("int32",e[n].length);t.push(r),e[n].forEach(((e,t)=>r[t]=e))}return t}(l),p=function(e,t,n,r,s){const a=t.slice();a[0]=s;const i=_h(n,gh(a)),o=e.length;return function(e,t,n,r,s,a){const i=kz(t,2)[1],o=kz(a,2)[1];let u=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<r;++t)s[u*o+t]=e[n*i+t];++u}}(e,t,r,0===o?0:o/t[0],i,a),[i,a]}(n,r,s,c,h);return[d,p[0],p[1]]}const Sz={kernelName:tf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=r,u=s.map((e=>n.data.get(e.dataId).values)),l=s.map((e=>e.shape)),c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,[d,p,f]=Iz(u,l,c,a.shape,a.dtype,h,i.shape),m=d.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,p);return m.concat([g])}},_z=2147483647;function Cz(e,t,n,r,s,a,i){if(t.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const o=0===t.length,u=0===s.length,l=0===i.length,c=[];o||c.push(t[0]),u||c.push(s[0]),l||c.push(i[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],d=_h("int32",h+1);d[0]=0;for(let t=0;t<h;++t){const n=o?e[0]:e[t],s=u?r[0]:r[t],i=l?a[0]:a[t];if(0===i)throw new Error("Requires delta != 0");let c;if(i>0&&s<n||i<0&&s>n)c=0;else if(c=Math.ceil(Math.abs((s-n)/i)),c>_z)throw new Error(`Requires ((limit - start) / delta) <= ${_z}`);d[t+1]=d[t]+c}const p=_h(n,d[h]);let f=0;for(let t=0;t<h;++t){const n=d[t+1]-d[t];let r=o?e[0]:e[t];const s=l?a[0]:a[t];for(let e=0;e<n;++e)p[f++]=r,r+=s}return[d,p]}const Tz={kernelName:nf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=Cz(i,r.shape,r.dtype,o,s.shape,u,a.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([c.length],r.dtype,c)]}};var Ez=zv;class Nz{constructor(e,t,n,r,s,a,i,o,u,l){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=s,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=o,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=Lv(l),this.raggedRank=Bv(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Ez.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Ez.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Ez.VALUE_ROWIDS:return Nz.getMaxWidthValueRowID(t);case Ez.ROW_SPLITS:return Nz.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Ez[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],s=0;for(let a=1;a<t;++a){const t=e[a];t!==r&&(r=t,s=Math.max(a-n,s),n=a)}return Math.max(t-n,s)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return Az(e,n)}calculateOutputSize(e){const t=this.valuesShape;Pv(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),r=Mv(this.raggedRank,n,t);r[0]<0&&(r[0]=e);for(let e=1;e<=this.raggedRank;++e)r[e]<0&&(r[e]=this.getMaxWidth(e));return r}calculateFirstParentOutputIndex(e,t,n){const r=Math.min(e,n),s=[];let a=0;for(let e=0;e<r;++e,a+=t)s.push(a);for(let t=r;t<e;++t)s.push(-1);return ph(s.length===e,(()=>"Final length of result must be equal to firstDimension.")),s}calculateOutputIndexRowSplit(e,t,n,r){const s=e.length,a=[];for(let i=0;i<s-1;++i){const s=e[i+1]-e[i];let o=Math.min(r,s),u=t[i];-1===u&&(o=0);for(let e=0;e<o;++e)a.push(u),u+=n;for(let e=0;e<s-o;++e)a.push(-1)}if(s>0&&a.length!==e[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,r){const s=e.length,a=[];if(0===s)return[];let i=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let u=t[o];a.push(u);for(let l=1;l<s;++l){const s=e[l];if(s===o)u>=0&&(++i,i<r?u+=n:u=-1);else{if(i=0,o=s,s>=t.length)throw new Error(`Got nextValueRowId=${s} which is not less than ${t.length}`);u=t[s]}a.push(u)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,r){const s=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case Ez.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,n,r);case Ez.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,n,r);default:throw new Error(`Unsupported partition type: ${Ez[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Ez.FIRST_DIM_SIZE:return e[0];case Ez.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Ez.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Ez[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const r=Az(t,!1),s=_h(this.valuesDType,gh(r));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)a=this.calculateOutputIndex(e-1,a,n[e],t[e]);this.setOutput(this.raggedRank,a,s,r)}return[r,s]}setOutput(e,t,n,r){if(0===n.length)return;const s=this.values,a=n;let i=r.slice();i=i.slice(e+1);const o=gh(i),u=t.length;let l=this.defaultValue;if(l.length!==o&&1!==l.length){const e=this.defaultValueShape;Bg((()=>{const t=Hy(l,e),n=Jy(t,i);l=n.dataSync()}))}let c=0,h=0,d=0;for(let e=0;e<=u;++e){let r=e<u?t[e]:-1;if(r!==d){if(h<d){const e=s.subarray(c*o);Rz(a.subarray(h*o),e,(d-h)*o)}if(e>=u){const e=n.length;r=Math.floor(e/o)}if(r>d)if(1===this.defaultValue.length)a.subarray(d*o,r*o).fill(this.defaultValue[0]),d=r;else for(;r>d;)Rz(a.slice(d*o),l,o),++d;r<0?(c=e+1,h=d):(c=e,h=d,d=h+1)}else++d}}}function Rz(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function Az(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function Dz(e,t,n,r,s,a,i,o,u,l){return new Nz(e,t,n,r,s,a,i,o,u,l).compute()}const Oz={kernelName:rf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:u}=r,l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,d=o.map((e=>n.data.get(e.dataId).values)),p=o.map((e=>e.shape)),[f,m]=Dz(l,s.shape,c,a.shape,a.dtype,h,i.shape,d,p,u);return n.makeTensorInfo(f,a.dtype,m)}};function Fz(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return Lh(0,r);const s=Lh(Math.abs(Math.ceil((t-e)/n)),r);t<e&&1===n&&(n=-1),s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+n;return s}const zz={kernelName:sf,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:i}=n,o=Fz(r,s,i,a);return t.makeTensorInfo([o.length],a,o)}},Mz=PR(of,(e=>1/e)),Lz={kernelName:of,backendName:"cpu",kernelFunc:Mz},Bz={kernelName:df,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r;zR(s,"resizeBilinear");const u=Oh(s.shape),[l,c]=o,[h,d,p,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(gh([h,l,c,f])),b=[a&&l>1?d-1:d,a&&c>1?p-1:p],y=[a&&l>1?l-1:l,a&&c>1?c-1:c];let x=0;const w=b[0]/y[0],v=b[1]/y[1];for(let e=0;e<h;e++)for(let t=0;t<l;t++){let n;n=i?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),s=n-r,a=Math.min(d-1,Math.ceil(n)),o=e*u[0]+r*u[1],l=e*u[0]+a*u[1];for(let e=0;e<c;e++){let t;t=i?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(p-1,Math.ceil(t)),c=o+n*u[2],h=l+n*u[2],d=o+a*u[2],b=l+a*u[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[d+e]-t)*r,i=a+(n+(m[b+e]-n)*r-a)*s;g[x++]=i}}}return n.makeTensorInfo([h,l,c,f],"float32",g)}},Pz={kernelName:pf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r;zR([a,s],"resizeBilinearGrad");const o=Oh(s.shape),[u,l,c,h]=s.shape,[,d,p]=a.shape,f=new Float32Array(u*l*c*h),m=[i&&d>1?l-1:l,i&&p>1?c-1:c],g=[i&&d>1?d-1:d,i&&p>1?p-1:p],b=m[0]/g[0],y=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<d;e++){const n=e*b,r=Math.floor(n),s=Math.min(Math.ceil(n),l-1),a=t+r*o[1],i=t+s*o[1],u=n-r,d=1-u;for(let e=0;e<p;e++){const t=e*y,n=Math.floor(t),r=Math.min(Math.ceil(t),c-1),s=t-n,l=1-s,p=a+n*o[2],m=a+r*o[2],g=i+n*o[2],b=i+r*o[2],v=d*l,$=d*s,k=u*l,I=u*s;for(let e=0;e<h;e++){const t=x[w++];f[p+e]+=t*v,f[m+e]+=t*$,f[g+e]+=t*k,f[b+e]+=t*I}}}}return n.makeTensorInfo([u,c,l,h],"float32",f)}},Wz={kernelName:cf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r;zR(s,"resizeNearestNeighbor");const u=Oh(s.shape),[l,c]=o,[h,d,p,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(h*l*c*f),b=[a&&l>1?d-1:d,a&&c>1?p-1:p],y=[a&&l>1?l-1:l,a&&c>1?c-1:c],x=b[0]/y[0],w=b[1]/y[1];let v=0;for(let e=0;e<h;e++){const t=e*u[0];for(let e=0;e<l;e++){const n=i?x*(e+.5):x*e;let r=Math.min(d-1,a?Math.round(n):Math.floor(n));i&&(r=Math.max(0,r));const s=t+r*u[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(p-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const r=s+n*u[2];for(let e=0;e<f;e++){const t=m[r+e];g[v++]=t}}}}return n.makeTensorInfo([h,l,c,f],s.dtype,g)}},Uz={kernelName:hf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r;zR([a,s],"resizeNearestNeighborGrad");const o=Oh(s.shape),u=Oh(a.shape),[l,c,h,d]=s.shape,[,p,f]=a.shape,m=new Float32Array(l*c*h*d),g=n.data.get(a.dataId).values,b=[i&&p>1?c-1:c,i&&f>1?h-1:h],y=[i&&p>1?p-1:p,i&&f>1?f-1:f],x=b[0]/y[0],w=b[1]/y[1],v=1/x,$=1/w,k=2*Math.ceil(v)+2,I=2*Math.ceil($)+2;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],r=Math.floor(e*v),s=Math.floor(r-k/2);for(let r=0;r<h;r++){const a=n+r*o[2],l=Math.floor(r*$),b=Math.floor(l-I/2);for(let n=0;n<d;n++){let o=0;for(let a=0;a<k;a++){const l=a+s;if(l<0||l>=p)continue;const d=t+l*u[1],m=l*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<I;e++){const t=e+b;if(t<0||t>=f)continue;const s=d+t*u[2],a=t*w;r===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[s+n])}}m[a+n]=o}}}}return n.makeTensorInfo(s.shape,s.dtype,m)}},Vz={kernelName:mf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r;zR(s,"reverse");const i=s.shape.length,o=kh(a,s.shape);if(0===i)return GR({inputs:{x:s},backend:n});const u=new Zm(s.shape,s.dtype),l=n.bufferSync(s);for(let e=0;e<u.size;e++){const t=u.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=s.shape[e]-1-n[e])),u.set(l.get(...n),...t)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},Gz={kernelName:sm,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:i}=t,o=n,u=Sh(r.dtype,gh(r.shape)),[l,c,h,d]=r.shape,[p,f]=Vv(i,c,h),m=Math.sin(s),g=Math.cos(s),b=o.data.get(r.dataId).values;for(let e=0;e<l;e++){const t=e*h*c*d;for(let e=0;e<c;e++){const n=e*(h*d);for(let r=0;r<h;r++){const s=r*d;for(let i=0;i<d;i++){const o=[l,e,r,i],y=o[2],x=o[1];let w=(y-p)*g-(x-f)*m,v=(y-p)*m+(x-f)*g;w=Math.round(w+p),v=Math.round(v+f);let $=a;"number"!=typeof a&&($=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c&&($=b[t+v*(h*d)+w*d+i]),u[t+n+s+i]=$}}}}return{dataId:o.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Hz=PR(gf,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),jz={kernelName:gf,backendName:"cpu",kernelFunc:Hz},qz=BR((e=>1/Math.sqrt(e))),Kz=WR(bf,qz),Xz={kernelName:bf,backendName:"cpu",kernelFunc:Kz};function Yz(e,t,n,r,s,a,i,o,u,l){const c=[r/s,s],h=e.values,d=t.values;if(0===r)return vb(n,t.dtype);const p=u instanceof Zm?u:vb(c,t.dtype);"string"==typeof u||"number"==typeof u?p.values.fill(u):"boolean"==typeof u&&p.values.fill(+u);for(let e=0;e<a;e++){const a=[];let u=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),u+=n*o[t]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)l?p.values[u*s+n]+=d[e*s+n]:p.values[u*s+n]=0===t.rank?d[0]:d[e*s+n]}return p}const Zz={kernelName:yf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=Jv(0,s,i),d=Yz(n.bufferSync(s),n.bufferSync(a),i,h,l,u,o,c,0,!0);return n.makeTensorInfo(i,d.dtype,d.values)}};function Jz(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<t?n=s+1:r=s;return r}function Qz(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<=t?n=s+1:r=s;return r}const eM={kernelName:wf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:i}=r,o=function(e,t,n,r,s,a){const i=_h("int32",n*s);for(let o=0;o<n;++o){const n=e.slice(o*r,(o+1)*r),u=o*s;for(let e=0;e<s;++e)i[u+e]="left"===a?Jz(n,t[e+u]):Qz(n,t[e+u])}return i}(n.data.get(s.dataId).values,n.data.get(a.dataId).values,s.shape[0],s.shape[1],a.shape[1],i);return n.makeTensorInfo(a.shape,"int32",o)}},tM={kernelName:vf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t;zR([r,s,a],"select");const i=r.shape.length,o=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=cg(s.dtype,a.dtype),h=Lh(gh(s.shape),c);let d=0;const p=0===i||i>1||1===s.shape.length?1:gh(s.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<p;t++)1===o[e]?h[d++]=u[e]:h[d++]=l[e];return n.makeTensorInfo(s.shape,c,h)}},nM=Qv,rM=e$,sM=PR($f,(e=>e>=0?rM*e:nM*(Math.exp(e)-1))),aM={kernelName:$f,backendName:"cpu",kernelFunc:sM},iM=PR(_f,(e=>e<0?-1:e>0?1:0)),oM={kernelName:_f,backendName:"cpu",kernelFunc:iM},uM=PR(If,(e=>Math.sin(e))),lM={kernelName:If,backendName:"cpu",kernelFunc:uM},cM=PR(Sf,(e=>Math.sinh(e))),hM={kernelName:Sf,backendName:"cpu",kernelFunc:cM},dM=Math.log(1.1920928955078125e-7)+2,pM=PR(Tf,(e=>{const t=e>-dM,n=e<dM,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s})),fM={kernelName:Tf,backendName:"cpu",kernelFunc:pM},mM={kernelName:Rf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:i}=r;zR([s],"spaceToBatchND");const o=gh(a),u=[[0,0]];u.push(...i);for(let e=1+a.length;e<s.shape.length;++e)u.push([0,0]);const l=bz.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),c=Gv(l.shape,a,o,!1),h=Hv(c.length,a.length,!1),d=jv(l.shape,a,o,!1),p=wA({inputs:{x:l},backend:n,attrs:{shape:c}}),f=DA({inputs:{x:p},backend:n,attrs:{perm:h}}),m=wA({inputs:{x:f},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}};function gM(e,t,n,r,s,a,i){const o=t[0],u=a[0],l=new Array(u),c=new Array(o),h=t[1];if(0===u){if(0!==o)throw new Error(_$(o));return[_h(n,0),[0,h],_h(s,0),l,c]}let d=!0,p=0;const f=new Array(u).fill(0);for(let t=0;t<o;++t){const n=e[t*h];if(n<0)throw new Error(C$(t,n));if(n>=u)throw new Error(T$(t,n,u));++f[n],d=d&&n>=p,p=n}let m=!0;for(let e=0;e<u;++e){const t=0===f[e];l[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&d){const t=e,n=r;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,l,c]}{const t=f[u-1],a=_h(n,t*h),d=_h(s,t),p=new Array(u).fill(0);for(let t=0;t<o;++t){const n=e[t*h],s=p[n],i=(0===n?0:f[n-1])+s;p[n]++;for(let n=0;n<h;++n)a[i*h+n]=e[t*h+n];d[i]=r[t],c[t]=i}for(let e=0;e<u;++e)if(0===p[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;d[t]=i}return[a,[t,h],d,l,c]}}const bM={kernelName:Of,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n        ${s.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,d,p,f,m]=gM(o,r.shape,r.dtype,u,s.dtype,l,c);return[n.makeTensorInfo(d,r.dtype,h),n.makeTensorInfo([d[0]],s.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};function yM(e,t,n,r,s){const a=gh(r),i=t[0],o=s.length,u=[];let l=1,c=-1;for(let e=0;e<o;++e){const t=s[e];if(-1===t){if(-1!==c)throw new Error(E$(c,e));c=e,u.push(1)}else{if(t<0)throw new Error(N$(e,t));l*=t,u.push(t)}}if(-1!==c){if(l<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(a/l);if(l*e!==a)throw new Error(A$(r,u));u[c]=e}if(gh(u)!==a)throw new Error(D$(r,u));const h=r.length,d=[];if(h>0){d[h-1]=1;for(let e=h-2;e>=0;--e)d[e]=d[e+1]*r[e+1]}const p=[];if(o>0){p[o-1]=1;for(let e=o-2;e>=0;--e)p[e]=p[e+1]*u[e+1]}const f=_h(n,i*o);for(let t=0;t<i;++t){let n=0;for(let r=0;r<h;++r)n+=e[t*h+r]*d[r];for(let e=0;e<o;++e)f[t*o+e]=Math.trunc(n/p[e]),n%=p[e]}return[f,[i,o],u]}const xM={kernelName:Ff,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(s.dataId).values),o=n.data.get(r.dataId).values,u=Array.from(n.data.get(a.dataId).values),[l,c,h]=yM(o,r.shape,r.dtype,i,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};function wM(e,t,n,r,s,a=!1,i=0){const o=r.length,u=[t[0],e.length/t[0]],l=u[1],c=o>0?s[o-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=c;const d=_h(n,h.reduce(((e,t)=>e*t),1));if(0===o)return c>0&&d.fill(i),[d,h];if(c<=0)throw new Error("segment ids must be >= 0");let p=0,f=1,m=0,g=s[p];for(;;){let t=0;if(f<o){if(t=s[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(z$(g,c));g>m&&d.fill(i,m*l,g*l);for(let t=p;t<f;++t){const n=r[t];if(n<0||n>=u[0])throw new Error(M$(t,r[t],u[0]));for(let t=0;t<l;t++)d[g*l+t]+=e[n*l+t]}if(a)for(let e=0;e<l;e++)d[g*l+e]/=f-p;if(p=f,++f,m=g+1,g=t,f>o)break}return m<c&&d.fill(i,m*l,c*l),[d,h]}const vM={kernelName:zf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=wM(i,r.shape,r.dtype,o,u,!0);return n.makeTensorInfo(c,r.dtype,l)}},$M={kernelName:Mf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=wM(i,r.shape,r.dtype,o,u);return n.makeTensorInfo(c,r.dtype,l)}},kM={kernelName:Lf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:h,outputSize:d}=Jv(0,s,o),p=!1,f=n.bufferSync(s);let m;switch(a.dtype){case"bool":m=Yz(f,n.bufferSync(a),o,d,c,l,u,h,Boolean(n.data.get(i.dataId).values[0]),p);break;case"float32":case"int32":m=Yz(f,n.bufferSync(a),o,d,c,l,u,h,n.data.get(i.dataId).values[0],p);break;case"string":m=Yz(f,n.bufferSync(a),o,d,c,l,u,h,Mm(n.data.get(i.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(o,m.dtype,m.values)}},IM={kernelName:Af,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:i}=r,o=kh(i,s.shape)[0],u=S$(s,a,o),l=new Array(s.shape.length).fill(0),c=s.shape.slice();return u.map((e=>{const t=[...c];t[o]=e;const r=aD({inputs:{x:s},backend:n,attrs:{begin:l,size:t}});return l[o]+=e,r}))}},SM=BR((e=>Math.sqrt(e))),_M=PR(Ef,(e=>Math.sqrt(e))),CM={kernelName:Ef,backendName:"cpu",kernelFunc:_M},TM={kernelName:Pf,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;zR(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];a[e]=t*t}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},EM=KR(((e,t)=>{const n=e-t;return n*n})),NM=fA(Bf,EM),RM={kernelName:Bf,backendName:"cpu",kernelFunc:NM},AM=BR(((e,t)=>{const{pattern:n,replaceGlobal:r,rewrite:s}=t;return e.replace(new RegExp(n,r?"g":""),s)})),DM={kernelName:Wf,backendName:"cpu",kernelFunc:WR(Wf,AM)},OM=PR(rm,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),FM={kernelName:rm,backendName:"cpu",kernelFunc:OM};function zM(e,t,n,r){const s=vb(e,t.dtype);for(let e=0;e<s.size;e++){const a=s.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+r[e];s.set(t.get(...i),...a)}return s}const MM={kernelName:Uf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=r;zR(s,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:b,begin:y,end:x,strides:w}=Sy(s.shape,a,i,o,u,l,c,h,d);let v;if(m)v=wA({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||b){ph(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=dy(y,x,w),t=aD({inputs:{x:s},backend:n,attrs:{begin:y,size:e}});v=wA({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=zM(p,n.bufferSync(s),w,y);v=n.makeTensorInfo(f,e.dtype,e.values)}return v}};class LM{constructor(e,t,n,r,s,a){this.separator=zm(e),this.nGramWidths=t,this.leftPad=zm(n),this.rightPad=zm(r),this.padWidth=s,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,a){for(let i=0;i<s;++i){const o=this.getPadWidth(a),u=Math.max(0,o-i),l=Math.max(0,o-(s-(i+1))),c=a-(u+l),h=t+(u>0?0:i-o);let d=0;d+=u*this.leftPad.length;for(let t=0;t<c;++t)d+=e[h+t].length;d+=l*this.rightPad.length,d+=(u+l+c-1)*this.separator.length,n[r+i]=new Uint8Array(d);const p=n[r+i];let f=0;const m=e=>e.forEach((e=>p[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let s=1;s<r;++s){let r=t[s]>=e;if(r=r&&t[s]<=n,!r)throw new Error(`Invalid split value ${t[s]}, must be in [${e}, ${n}]`);e=t[s]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=r-1,a=_h("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=s;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=s;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),a[e]=a[e-1]+r}const i=new Array(a[s]);for(let n=0;n<s;++n){const r=t[n];let s=a[n];if(this.nGramWidths.forEach((a=>{const o=t[n+1]-t[n],u=this.getNumNGrams(o,a);this.createNGrams(e,r,i,s,u,a),s+=u})),this.preserveShort&&s===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const o=a+2*this.padWidth,u=1;this.createNGrams(e,r,i,s,u,o)}}return[i,a]}}function BM(e,t,n,r,s,a,i,o){return new LM(n,r,s,a,i,o).compute(e,t)}const PM={kernelName:Vf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:h}=t,d=n.data.get(c.dataId).values,p=n.data.get(h.dataId).values,[f,m]=BM(d,p,s,a,i,o,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function WM(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let a=e.indexOf(s);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||r.push(t),a=(e=e.subarray(a+1)).indexOf(s)}return void(n&&0===e.length||r.push(e))}let s=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(s,a);n&&0===t.length||r.push(t),s=a+1}}function UM(e,t,n){const r=e.length,s=[];let a=0,i=0;const o=new Array(r);for(let u=0;u<r;++u){const r=s.length;WM(e[u],t,n,s);const l=s.length-r;o[u]=l,a+=l,i=Math.max(i,l)}const u=_h("int32",2*a),l=new Array(a),c=[r,i];let h=0;for(let e=0;e<r;++e)for(let t=0;t<o[e];++t)u[2*h]=e,u[2*h+1]=t,l[h]=s[h],++h;return[u,l,c]}const VM={kernelName:Gf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,u=n.data.get(i.dataId).values[0],[l,c,h]=UM(o,u,s),d=c.length;return[n.makeTensorInfo([d,2],"int32",l),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function GM(e,t){const n=_h("int32",e.length);for(let r=0;r<e.length;++r)n[r]=Am(e[r]).modulo(t).getLowBitsUnsigned();return n}const HM={kernelName:Hf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const i=GM(n.data.get(a.dataId).values,s);return n.makeTensorInfo(a.shape,"int32",i)}},jM=PR(qf,(e=>Math.tan(e))),qM={kernelName:qf,backendName:"cpu",kernelFunc:jM},KM=PR(Kf,(e=>Math.tanh(e))),XM={kernelName:xf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{tensor:r,indices:s,updates:a}=t,{sliceRank:i,numUpdates:o,sliceSize:u,strides:l,outputSize:c}=Jv(0,s,r.shape),h=n.bufferSync(s),d=n.bufferSync(a),p=n.bufferSync(r),f=Yz(h,d,r.shape,c,u,o,i,l,p,!1);return n.makeTensorInfo(r.shape,f.dtype,f.values)}};function YM(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=vb(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r}const ZM={kernelName:Xf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;zR(s,"tile");const i=YM(n.bufferSync(s),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},JM=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function QM(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const s=r-n+1,a=t-n+1,i=Math.log(s),o=.5*Math.exp(2*i/3),u=.5*Math.sqrt(i*o*(s-o)/s)*Math.sign(a-s/2);QM(e,t,Math.max(n,Math.floor(t-a*o/s+u)),Math.min(r,Math.floor(t+(s-a)*o/s+u)))}const s=e[t];let a=n,i=r;for(dh(e,n,t),JM(e[r],s)>0&&dh(e,n,r);a<i;){for(dh(e,a,i),a++,i--;JM(e[a],s)<0;)a+=1;for(;JM(e[i],s)>0;)i-=1}0===JM(e[n],s)?dh(e,n,i):(i+=1,dh(e,i,r)),i<=t&&(n=i+1),t<=i&&(r=i-1)}}function eL(e,t,n,r,s){const a=t[t.length-1],[i,o]=[e.length/a,a],u=Sh(n,i*r),l=Sh("int32",i*r);for(let t=0;t<i;t++){const n=t*o,a=e.subarray(n,n+o);let i=new Array(a.length);a.forEach(((e,t)=>i[t]={value:e,index:t})),r<i.length&&(QM(i,r),i=i.slice(0,r)),s&&i.sort(JM);const c=t*r,h=u.subarray(c,c+r),d=l.subarray(c,c+r);for(let e=0;e<r;e++)h[e]=i[e].value,d[e]=i[e].index}const c=t.slice();return c[c.length-1]=r,[vb(c,n,u),vb(c,"int32",l)]}const tL={kernelName:Yf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:i}=r;zR(s,"topk");const o=n.data.get(s.dataId).values,[u,l]=eL(o,s.shape,s.dtype,a,i);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},nL={kernelName:Zf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{image:s,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:u,outputShape:l}=n,[c,h,d,p]=s.shape,[f,m]=null!=l?l:[h,d],g=[c,f,m,p],b=Oh(s.shape),y=b[0],x=b[1],w=b[2],v=Oh(g),$=v[0],k=v[1],I=v[2],S=Sh(s.dtype,gh(g));S.fill(u);const _=r.data.get(s.dataId).values,C=r.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?C:C.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let s=0;s<p;++s){let a;const l=t[6]*r+t[7]*n+1;if(0===l)continue;const c=(t[0]*r+t[1]*n+t[2])/l,p=(t[3]*r+t[4]*n+t[5])/l,f=rL(c,d,o),m=rL(p,h,o);switch(i){case"nearest":a=aL(_,h,d,y,x,w,e,m,f,s,u);break;case"bilinear":a=iL(_,h,d,y,x,w,e,m,f,s,u);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}S[e*$+n*k+r*I+s]=a}return r.makeTensorInfo(g,s.dtype,S)}return{dataId:r.write(S,g,s.dtype),shape:s.shape,dtype:s.dtype}}};function rL(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return ch(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return ch(0,n,t-1)}(e,t);case"nearest":return function(e,t){return ch(0,e,t-1)}(e,t);default:return e}}function sL(e,t,n,r,s,a,i,o,u,l,c){return 0<=o&&o<t&&0<=u&&u<n?e[i*r+o*s+u*a+l]:c}function aL(e,t,n,r,s,a,i,o,u,l,c){return sL(e,t,n,r,s,a,i,Math.round(o),Math.round(u),l,c)}function iL(e,t,n,r,s,a,i,o,u,l,c){const h=Math.floor(o),d=Math.floor(u),p=h+1,f=d+1;return(p-o)*((f-u)*sL(e,t,n,r,s,a,i,h,d,l,c)+(u-d)*sL(e,t,n,r,s,a,i,h,f,l,c))+(o-h)*((f-u)*sL(e,t,n,r,s,a,i,p,d,l,c)+(u-d)*sL(e,t,n,r,s,a,i,p,f,l,c))}function oL(e,t,n,r){const s=kh(t,n)[0],a=[1,n[0],1];for(let e=0;e<s;e++)a[0]*=n[e];a[1]=n[s];for(let e=s+1;e<n.length;e++)a[2]*=n[e];const i=new Map,o=new Int32Array(n[s]),u=new Zm(a,r,e),l=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[s];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)e.push(u.get(n,t,r));n=e.join(",")}const r=i.get(n);if(null!=r)o[t]=r;else{const e=i.size;i.set(n,e),o[t]=e,l.push(t)}}const h=a.slice();h[1]=i.size;const d=new Zm(h,r);l.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)d.set(u.get(n,e,r),n,t,r)}));const p=n.slice();return p[s]=h[1],{outputValues:d.values,outputShape:p,indices:o}}const uL={kernelName:Qf,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;zR(a,"unique");const i=r.data.get(a.dataId).values,{outputValues:o,outputShape:u,indices:l}=oL(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}},lL={kernelName:em,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s.shape.length,o=s.shape[a],u=new Array(i-1);let l=0;for(let e=0;e<i;e++)e!==a&&(u[l++]=s.shape[e]);const c=new Array(i).fill(0),h=s.shape.slice();h[a]=1;const d=new Array(o);for(let e=0;e<d.length;e++){c[a]=e;const t=aD({inputs:{x:s},backend:n,attrs:{begin:c,size:h}});d[e]=wA({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return d}},cL={kernelName:tm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:i}=r;zR(s,"unsortedSegmentSum");const o=[],u=[],l=s.shape.length-a.shape.length;let c=a;for(let e=0;e<l;++e){const t=yO({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,u.push(t)}for(let e=0;e<i;++e){const t=Dm(e,"int32"),r=n.makeTensorInfo([],"int32",t),a=aO({inputs:{a:r,b:c},backend:n}),i=dA({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),l=JD({inputs:{a:i,b:s},backend:n}),h=eO({inputs:{x:l},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),u.push(r),u.push(a),u.push(i),u.push(l),u.push(h)}const h=mz({inputs:o,backend:n,attrs:{axis:0}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},hL=[IA,_A,TA,NA,xA,RA,FA,zA,MA,LA,PA,UA,GA,qA,XA,QA,eD,tD,nD,kA,rD,oD,cD,dD,pD,pA,gD,yD,oA,xD,ID,_D,CD,TD,ED,ND,RD,DD,FD,zD,MD,LD,BD,PD,UD,VD,GD,HD,jD,qD,KD,XD,nO,VR,rO,iO,fO,bO,xO,$O,DO,FO,zO,BO,UO,VO,GO,jO,KO,ZO,eF,HR,tF,$D,rF,aF,oF,qR,cF,pF,mF,yF,wF,kF,SF,TF,EF,NF,DF,zF,MF,LF,BF,PF,WF,UF,VF,jF,qF,YF,QF,QD,tz,rz,az,oz,cz,hz,fz,gz,bz,wz,ZR,$z,Sz,Tz,Oz,zz,cA,SO,Lz,QR,tA,vA,Bz,Pz,Wz,Uz,Vz,Gz,jz,Xz,Zz,eM,tM,aM,sA,oM,lM,hM,iD,JF,fM,mM,bM,xM,vM,$M,kM,IM,CM,TM,RM,DM,FM,MM,PM,VM,HM,EO,tO,qM,{kernelName:Kf,backendName:"cpu",kernelFunc:KM},XM,ZM,tL,nL,OA,uL,lL,cL,pz];for(const e of hL)mm(e);const dL={},pL={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function fL(e,t){if(!(e in dL)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if(qh().getBool("IS_SAFARI")||"undefined"==typeof OffscreenCanvas||2!==e){if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}return new OffscreenCanvas(300,150)}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete dL[e]}),!1),qh().getBool("SOFTWARE_WEBGL_ENABLED")&&(pL.failIfMajorPerformanceCaveat=!1),1===e?n.getContext("webgl",pL)||n.getContext("experimental-webgl",pL):n.getContext("webgl2",pL)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;dL[e]=n}const n=dL[e];return null==n||n.isContextLost()?(delete dL[e],fL(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),dL[e])}var mL,gL,bL;function yL(e,t){return[t,e]}function xL(e){const t=gh(e);return xh(Math.ceil(t/4))}function wL(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function vL(e,t){const n=e;let r,s,a,i,o,u,l,c,h,d;return 2===qh().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,l=4,c=1,h=n.HALF_FLOAT,d=n.FLOAT,u=n.RGBA8):(r=e.RGBA,s=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,l=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT,u=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function $L(e,t){const n=t();return qh().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function kL(e){return!!(qh().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function IL(e,t){return DL(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(mL||(mL={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(gL||(gL={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(bL||(bL={}));const SL=/ERROR: [0-9]+:([0-9]+):/g;function _L(e,t){const n=SL.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],s=e.split("\n"),a=s.length.toString().length+2,i=s.map(((e,t)=>wh((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const u=i.slice(0,r-1),l=i.slice(r-1,r),c=i.slice(r);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${wh(l[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function CL(e,t){if($L(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function TL(e,t,n,r,s,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&($L(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),$L(e,(()=>e.vertexAttribPointer(o,s,e.FLOAT,!1,a,i))),$L(e,(()=>e.enableVertexAttribArray(o))),!0)}function EL(e,t,n,r){$L(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),$L(e,(()=>e.activeTexture(e.TEXTURE0+n))),$L(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),$L(e,(()=>e.uniform1i(n,r)))}function NL(e,t,n){$L(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),$L(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function RL(e,t){$L(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),$L(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function AL(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function DL(e,t,n){const r=$L(e,(()=>t()));if(null==r)throw new Error(n);return r}function OL(e,t=2){return gh(e.slice(0,e.length-t))}function FL(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function zL(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[OL(e),...FL(e)]),t}function ML(e){return e%2==0}function LL(e,t){if(bh(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e[e.length-1],r=t[t.length-1];if(n===r)return!0;if(ML(n)&&ML(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&ML(e[0])&&ML(t[0])}let BL,PL;function WL(e,t){return null!=e.getExtension(t)}function UL(e){try{if(null!=fL(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function VL(e){const t=vL(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function GL(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&ph("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const HL=qh();function jL(){let e,t,n,r,s,a,i,o,u,l;return 2===qh().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o=qh().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:u,defineRound:l}}function qL(e,t,n="index"){const r=Oh(t);return r.map(((t,s)=>`int ${e[s]} = ${n} / ${t}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`)).join("")}function KL(e,t,n="index"){const r=Oh(t);return r.map(((t,s)=>`int ${e[s]} = ${n} / outShapeStrides[${s}]; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * outShapeStrides[${s}]`:`index -= ${e[s]} * outShapeStrides[${s}]`};`)).join("")}function XL(e){const t=Oh(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}HL.registerFlag("HAS_WEBGL",(()=>HL.getNumber("WEBGL_VERSION")>0)),HL.registerFlag("WEBGL_VERSION",(()=>UL(2)?2:UL(1)?1:0)),HL.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),HL.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===HL.get("WEBGL_VERSION"))),HL.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),HL.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),HL.registerFlag("WEBGL_PACK",(()=>HL.getBool("HAS_WEBGL"))),HL.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>HL.getBool("WEBGL_PACK"))),HL.registerFlag("WEBGL_PACK_CLIP",(()=>HL.getBool("WEBGL_PACK"))),HL.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>HL.getBool("WEBGL_PACK"))),HL.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>HL.getBool("WEBGL_PACK"))),HL.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>HL.getBool("WEBGL_PACK"))),HL.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>HL.getBool("WEBGL_PACK"))),HL.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>HL.getBool("WEBGL_PACK"))),HL.registerFlag("WEBGL_PACK_REDUCE",(()=>HL.getBool("WEBGL_PACK"))),HL.registerFlag("WEBGL_LAZILY_UNPACK",(()=>HL.getBool("WEBGL_PACK"))),HL.registerFlag("WEBGL_CONV_IM2COL",(()=>HL.getBool("WEBGL_PACK"))),HL.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",(()=>HL.getBool("WEBGL_PACK"))),HL.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==BL){const t=fL(e);BL=t.getParameter(t.MAX_TEXTURE_SIZE)}return BL}(HL.getNumber("WEBGL_VERSION")))),HL.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==PL){const t=fL(e);PL=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,PL)}(HL.getNumber("WEBGL_VERSION")))),HL.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=HL.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=fL(e);return t=WL(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:WL(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),HL.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>HL.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Ig())),HL.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=fL(e);if(1===e){if(!WL(t,"OES_texture_float"))return!1}else if(!WL(t,"EXT_color_buffer_float"))return!1;return VL(t)}(HL.getNumber("WEBGL_VERSION")))),HL.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!HL.getBool("WEBGL_FORCE_F16_TEXTURES")&&HL.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),HL.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=fL(e);if(1!==e){if(WL(t,"EXT_color_buffer_float"))return VL(t);const e="EXT_color_buffer_half_float";if(WL(t,e)){const n=t.getExtension(e);return function(e,t){const n=vL(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(s),a}(t,n)}return!1}return!!WL(t,"OES_texture_float")&&!!WL(t,"WEBGL_color_buffer_float")&&VL(t)}(HL.getNumber("WEBGL_VERSION")))),HL.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=HL.getNumber("WEBGL_VERSION"))&&null!=fL(e).fenceSync;var e})),HL.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>HL.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),HL.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if("number"!=typeof e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),HL.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Ig()?1:-1),(e=>{if("number"!=typeof e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),HL.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),HL.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),HL.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),HL.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),HL.registerFlag("WEBGL_EXP_CONV",(()=>!1)),HL.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>HL.getBool("IS_TEST"))),HL.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),HL.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),HL.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1)),HL.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));const YL="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:ZL}=r;function JL(e,t,n){const r=[];if(e.forEach((e=>{const t=gh(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=uB(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const s=r.join("\n"),a=e.map((e=>function(e,t,n=!1,r){let s="";s+=n?eB(e,r):QL(e,r);const a=e.shapeInfo.logicalShape,i=t.logicalShape;return a.length<=i.length&&(s+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=ZL(e.shapeInfo.logicalShape,t.logicalShape),u=oB(i),l=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+l]} = 0;`)).join("\n");let d="";d=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+l]}`)).join(", ");let p="return outputValue;";const f=1===gh(e.shapeInfo.logicalShape),m=1===gh(t.logicalShape);if(1!==a||f||m){if(f&&!m)p=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?p="return vec4(outputValue.x);":o.indexOf(e)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${d});\n      ${p}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===u&&null==e.shapeInfo.flatOffset&&bh(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=oB(u),c=ZL(e.shapeInfo.logicalShape,t.logicalShape),h=u-o;let d;const p=["x","y","z","w","u","v"];d=0===o?"":u<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${p[e+h]} = 0;`)).join("\n");let f="";return f=u<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+h]}`)).join(", "),`\n    float ${s}() {\n      ${l} coords = getOutputCoords();\n      ${d}\n      return get${r}(${f});\n    }\n  `}(e,t)),s}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,o=jL(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let l,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${tB}\n    ${nB}\n    ${rB}\n  `}(o);return t.isPacked?(l=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===r[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `:1===r[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(bh(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),a=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),a=s*Math.ceil(e[e.length-2]/2);let i=a,o="",u="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,u=`b${t}, `+u;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${u});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(l=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return bh(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${KL(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const r=qL(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${KL(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const r=qL(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=qL(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=qL(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(h+=sB),[h,u,c,s,l,a,n.userCode].join("\n")}function QL(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[s,a]=e.shapeInfo.texShape;if(1===s&&1===a)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=aB(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,u]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${o}, ${u}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${iB(e)}\n      }\n    `;const s=e.shapeInfo.texShape,a=s[0],i=s[1];if(1===i&&1===a)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=aB(n);return 1===i?t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===a?t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape;if(null!=a&&bh(n,a)){if(t)return`\n      float ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=a[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=Ih(n),u=i;if(u.length<n.length){const n=["row","col"];return`\n      ${QL(lB(e,u),t)}\n      float ${s}(int row, int col) {\n        return ${s}(${cB(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${iB(e)}\n      }\n    `;const l=a[0],c=a[1],h=aB(r);return 1===c?t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `:1===l?t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `:t?`\n      float ${s}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${l}, ${c}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[1]*n[2],i=n[2],{newShape:o,keptDims:u}=Ih(n),l=o;if(l.length<n.length){const n=["row","col","depth"];return`\n        ${QL(lB(e,l),t)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${cB(n,u)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${iB(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],d=c[1],p=e.shapeInfo.flatOffset;if(d===a&&null==p)return t?`\n      float ${s}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(d===i&&null==p)return t?`\n      float ${s}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const f=aB(r);return t?`\n    float ${s}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `:`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[3],i=n[2]*a,o=n[1]*i,{newShape:u,keptDims:l}=Ih(n);if(u.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${QL(lB(e,u),t)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${cB(n,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${iB(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${r}Shape[3];`,m=`int stride1 = ${r}Shape[2] * stride2;`,g=`int stride0 = ${r}Shape[1] * stride1;`;if(p===o&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(p===a&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const b=aB(r);return t?`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${b});\n      return sampleTexture(${r}, uv);\n    }\n  `:`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${b});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],a=t[3]*s,i=t[2]*a,o=t[1]*i,{newShape:u,keptDims:l}=Ih(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${QL(lB(e,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${cB(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${iB(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1];if(p===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${aB(n)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=Ih(t);if(s.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${QL(lB(e,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${cB(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,u=t[3]*o,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${iB(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${aB(n)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function eB(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${jL().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=jL();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],u=jL();if(null!=a&&bh(n,a))return t?`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${u.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${u.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${s}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${u.texture2D}(${r}, uv);\n    }\n  `;const l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${u.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const r=[1,2],a=["b","row","col"];return`\n        ${eB(lB(e,n.slice(1)),t)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${cB(a,r)});\n        }\n      `}const o=jL();if(t)return`\n    vec4 ${s}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${r}, uv);\n    }\n  `;const u=i[0],l=i[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${l}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${o.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=jL();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],l=u[0],c=u[1],h=Math.ceil(a[i-1]/2);let d=h*Math.ceil(a[i-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<i-1;e++)p=`int b${e}, `+p,d*=a[i-e-1],f=`b${e} * ${d} + `+f;return`\n    vec4 ${r}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const tB="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",nB="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",rB="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",sB="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function aB(e){return`offset${e}`}function iB(e){const t=e.name,n=gh(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function oB(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function uB(e,t,n){const{newShape:r,keptDims:s}=Ih(t),a=t.length,i=e&&3===a&&1===t[0],o=i?t.slice(1):r,u=!e&&a>1&&!bh(t,n)&&r.length<a||i;return{useSqueezeShape:u,uniformShape:u?o:t,keptDims:s}}function lB(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function cB(e,t){return t.map((t=>e[t])).join(", ")}function hB(e,t,n){const r=[],s=[];let a,i,o,u=null,l=null;l=e.getUniformLocation(n,"NAN",!1),1===qh().getNumber("WEBGL_VERSION")&&(u=e.getUniformLocation(n,"INFINITY",!1));const c=!1;for(const s of t.variableNames){const a={name:s,uniform:e.getUniformLocation(n,s,c),offset:e.getUniformLocation(n,`offset${s}`,c)};t.enableShapeUniforms&&(a.shape=e.getUniformLocation(n,`${s}Shape`,c),a.texShape=e.getUniformLocation(n,`${s}TexShape`,c)),r.push(a)}if(t.enableShapeUniforms&&(a=e.getUniformLocation(n,"outShape",c),o=e.getUniformLocation(n,"outShapeStrides",c),i=e.getUniformLocation(n,"outTexShape",c)),t.customUniforms)for(const r of t.customUniforms)s.push(e.getUniformLocation(n,r.name,c));return{variablesLocations:r,customUniformLocations:s,infLoc:u,nanLoc:l,outShapeLocation:a,outShapeStridesLocation:o,outTexShapeLocation:i}}function dB(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,s=t[n],a=s.shape;if(!bh(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&s.isUniform)return;const i=e.texShape,o=s.isUniform?null:s.texData.texShape;if(!bh(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}function pB(e){return qh().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class fB{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=mL.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=jL();this.outputShape=e,this.enableShapeUniforms=pB(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?KL(["r","c","d"],e):qL(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class mB{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=mL.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=jL();this.outputShape=e,this.enableShapeUniforms=pB(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?KL(["r","c","d"],e):qL(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class gB{constructor(e){this.variableNames=["A"],this.outTexUsage=gL.DOWNLOAD;const t=jL();this.outputShape=e,this.userCode=`\n      ${YL}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class bB{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=gL.DOWNLOAD;const t=jL();this.outputShape=e,this.userCode=`\n      ${YL}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const yB={R:0,G:1,B:2,A:3};class xB{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=jL();this.outputShape=e,this.enableShapeUniforms=pB(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)");let a="";for(let e=0;e<n.length;e++){const t=n[e];a+=`\n          if(offset == ${e}) {\n            result = values[${yB[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":XL(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${a}\n        }\n        ${r.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class wB{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=jL();this.outputShape=e,this.enableShapeUniforms=pB(this.outputShape.length);let r="",s="result";t&&(s="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let s=0;s<=1;s++){const a=2*t+s;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${s} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${s};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":XL(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${s};\n        }\n    `}}function vB(e,t,n,r,s,a){!function(e,t){const n=qh().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return DL(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return $L(e,(()=>e.bindTexture(o,i))),$L(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),$L(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),$L(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),$L(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===qh().getNumber("WEBGL_VERSION")?$L(e,(()=>e.texImage2D(o,0,r,t,n,0,s,a,null))):$L(e,(()=>e.texStorage2D(o,1,r,t,n))),$L(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[n,t]}}function $B(e){return e.internalFormatFloat}function kB(e){return e.internalFormatHalfFloat}function IB(e){return e.downloadTextureFormat}function SB(e){return e.internalFormatPackedFloat}function _B(e){return e.internalFormatPackedHalfFloat}class CB{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=qh().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,function(e,t){dL[e]=t}(t,e)):this.gl=fL(t),e=this.gl,2===qh().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>$L(t,(()=>t.createVertexArray())),this.bindVertexArray=e=>$L(t,(()=>t.bindVertexArray(e))),this.deleteVertexArray=e=>$L(t,(()=>t.deleteVertexArray(e))),this.getVertexArray=()=>$L(t,(()=>t.getParameter(t.VERTEX_ARRAY_BINDING)))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>$L(e,(()=>t.createVertexArrayOES())),this.bindVertexArray=n=>$L(e,(()=>t.bindVertexArrayOES(n))),this.deleteVertexArray=n=>$L(e,(()=>t.deleteVertexArrayOES(n))),this.getVertexArray=()=>$L(e,(()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES)))}let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===qh().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=IL(this.gl,e),WL(this.gl,t))this.textureHalfFloatExtension=IL(this.gl,t);else if(qh().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),WL(this.gl,r))this.colorBufferHalfFloatExtension=IL(this.gl,r);else if(qh().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",WL(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!WL(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function(e){return function(e,t){const n=DL(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return $L(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),$L(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=DL(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return $L(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),$L(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return DL(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=vL(this.gl,this.textureHalfFloatExtension)}get debug(){return qh().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;$L(e,(()=>e.finish())),$L(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),$L(e,(()=>e.deleteFramebuffer(this.framebuffer))),$L(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),$L(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),$L(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=yL(t,n);return vB(e,s,a,$B(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=yL(t,n);return vB(e,s,a,kB(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=yL(t,n);return vB(e,s,a,IB(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){$L(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===qh().getNumber("WEBGL_VERSION")?$L(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):$L(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===qh().getNumber("WEBGL_VERSION")?$L(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):$L(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),$L(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let i,o,u;$L(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=e.UNSIGNED_BYTE,u=e.RGBA):(i=new Float32Array(n*r*4),o=e.FLOAT,u=a.internalFormatPackedFloat),i.set(s),2===qh().getNumber("WEBGL_VERSION")?$L(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,o,i))):$L(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,o,i))),$L(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=wL(t,n);return vB(e,s,a,_B(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=wL(t,n);return vB(e,s,a,SB(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(RL(this.gl,this.framebuffer),this.outputTexture=null),$L(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[s,a]=yL(t,n),i=new Uint8Array(t*n*4);return $L(e,(()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return function(e,t,n,r,s,a,i){const o=e,u=new Float32Array(function(e,t){const[n,r]=wL(e,t);return n*r*4}(a,i));return o.bindBuffer(o.PIXEL_PACK_BUFFER,t),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,u),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n){const r=e.createBuffer();$L(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const s=16*t*n;return $L(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,s,e.STREAM_READ))),$L(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),$L(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(qh().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else qh().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,qh().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return $L(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){const t=jL();return function(e,t){const n=DL(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if($L(e,(()=>e.shaderSource(n,t))),$L(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t));const n=function(e){return DL(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);$L(t,(()=>t.attachShader(n,this.vertexShader))),$L(t,(()=>t.attachShader(n,e))),function(e,t){if($L(e,(()=>e.linkProgram(t))),!qh().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n);const r=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&CL(t,r),r}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);const t=this.gl;$L(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer))),function(e,t,n){$L(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),TL(e,t,"clipSpacePos",n,3,20,0)&&TL(e,t,"uv",n,2,20,12)}(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&($L(this.gl,(()=>this.gl.deleteProgram(e))),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&CL(this.gl,this.program),$L(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return DL(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),$L(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),EL(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=wL(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&CL(this.gl,this.program),AL(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}$L(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),$L(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=IL(this.gl,2===qh().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===qh().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===qh().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await vh((()=>this.disposed||this.isQueryAvailable(e,qh().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,qh().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in qh().platform&&(n=qh().platform.setTimeoutCustom.bind(qh().platform)),vh((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),NL(this.gl,e,this.framebuffer),this.debug&&AL(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(NL(this.gl,this.outputTexture,this.framebuffer),this.debug&&AL(this.gl)):RL(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;NL(r,e,this.framebuffer),this.debug&&AL(r),this.outputTexture=e,$L(r,(()=>r.viewport(0,0,t,n))),$L(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),$L(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{mx:TB,XI:EB,Nk:NB,f6:RB,ct:AB,YG:DB,hH:OB,z3:FB,sG:zB,uM:MB,vS:LB,qB:BB,GG:PB,rq:WB,lg:UB,WR:VB,cu:GB,GE:HB,px:jB,jC:qB,He:KB,hE:XB,BF:YB,Dk:ZB,cl:JB,_B:QB,ub:eP,_f:tP,Ku:nP,qy:rP,Zy:sP,bu:aP,zv:iP,dH:oP,HS:uP,yH:lP,l3:cP,z9:hP,x6:dP,_m:pP,eW:fP,GK:mP,SP:gP,yr:bP,dl:yP,Dw:xP,xT:wP,_X:vP,wz:$P}=s;function kP(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function IP(e,t){return 1===t?[e]:kP(e,t)}class SP{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=pB(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=IP("rc",this.rank),t=oB(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),s=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${s}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let s=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)s=`${e[e.length-1-t]},`+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class _P{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=pB(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r,s;this.userCode=`\n      ${r=t,s=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${s?function(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),s=new Array(n-1);s[n-2]=r[n-1];for(let e=n-3;e>=0;--e)s[e]=`(${s[e+1]} * ${r[e+1]})`;return s}(e.map(((e,t)=>t)),t);return r.map(((t,s)=>`int ${e[s]} = ${n} / ${r[s]}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${r[s]}`:`index -= ${e[s]} * ${r[s]}`};`)).join("")}(["r","c","d"],"inputShape"):qL(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":XL(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class CP{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,n){const r=EP(t,n),s=NP(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=TP(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].pop();return this.usedTextures[s].push(e),e}let i;return r===bL.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===bL.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===bL.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===bL.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===bL.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=EP(n,r),a=NP(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=TP(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=qh().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],l=u&&u.indexOf(e);if(null==l||l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u[l]=u[u.length-1],u.pop(),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function TP(e,t,n,r,s){const a=function(e,t){switch(e){case bL.PACKED_2X2_FLOAT32:return SB(t);case bL.PACKED_2X2_FLOAT16:return _B(t);case bL.UNPACKED_FLOAT32:return $B(t);case bL.UNPACKED_FLOAT16:return kB(t);case bL.PACKED_4X1_UNSIGNED_BYTE:return IB(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let i;if(s){const[t,n]=wL(e[0],e[1]);i=t*n}else{const[t,n]=yL(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return i*o}function EP(e,t){if(e===gL.UPLOAD)return bL.PACKED_2X2_FLOAT32;if(e===gL.RENDER||null==e)return function(e){return qh().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?bL.PACKED_2X2_FLOAT32:bL.UNPACKED_FLOAT32:e?bL.PACKED_2X2_FLOAT16:bL.UNPACKED_FLOAT16}(t);if(e===gL.DOWNLOAD||e===gL.PIXELS)return bL.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function NP(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class RP{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=pB(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const AP="if (isnan(x)) return x;",DP="return x;",OP="return abs(x);",FP="return (x >= 0.0) ? x : (exp(x) - 1.0);",zP=AP+"\n  return (x < 0.0) ? 0.0 : x;\n",MP=AP+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",LP="return x;",BP="return 1.0 / (1.0 + exp(-1.0 * x));",PP="return x;",WP="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",UP="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",VP="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",GP="return 1.0 / (1.0 + exp(-1.0 * x));";class HP{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=pB(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class jP{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=pB(this.outputShape.length);const t=e.length,n=IP("rc",t),r=oB(t),s=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const qP=V$,KP={},XP=qh().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class YP extends oh{nextDataId(){return YP.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!qh().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof CB)t=e;else{const n=fL(qh().getNumber("WEBGL_VERSION"),e);t=new CB(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=fL(qh().getNumber("WEBGL_VERSION"));t=new CB(e),this.binaryCache=((n=qh().getNumber("WEBGL_VERSION"))in KP||(KP[n]={}),KP[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new CP(this.gpgpu),this.numMBBeforeWarning=null==qh().global.screen?1024:qh().global.screen.height*qh().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new ih(this,Mg())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,r,s,a){const i=this.makeTensorInfo(t,n),o=this.texData.get(i.dataId);o.isPacked=!1,o.texture={texture:e,texShape:[r,s]},o.texShape=[r,s];const u=zL(t),l=new xB(u,!1,a),c=this.runWebGLProgram(l,[i],n,[[r,s]]);return c.shape=t,o.texture=null,this.disposeIntermediateTensorInfo(i),c.dataId}write(e,t,n){if((qh().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||qh().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:gL.UPLOAD,refCount:1}),r}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,r,s){if(qh().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:gL.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new HP(i,LP):new RP(i,LP);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;return u&&(l=Fm()),c="complex64"===r?o$(this.readSync(s.real.dataId),this.readSync(s.imag.dataId)):this.getValuesFromTexture(e),u&&(this.downloadWaitMs+=Fm()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=s){let t;t=o?new HP(r,LP):new RP(r,LP);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if(qh().getBool("DEBUG")&&!qh().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===qh().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==a&&qh().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...xL(r))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);l=o$(e[0],e[1])}else if(null==c)l=this.getValuesFromTexture(e);else{const e=gh(r);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=u&&this.disposeIntermediateTensorInfo(u),null!=c){const e=this.gpgpu.gl;$L(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,l),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Mg().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:s,slice:a,dtype:i,isPacked:o,texture:u}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=o?new HP(s,LP):new RP(s,LP);const r=this.runWebGLProgram(n,[{dataId:e,shape:s,dtype:i}],i),a=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),a}if(null==u)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const l=this.decode(e,t.customTexShape),c=Mg().makeTensorFromTensorInfo(l),h=this.texData.get(l.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Mm(e)));return vb(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return vb(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!kL(n)){if(qh().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=gh(t);if(qh().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...xL(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=qh().getBool("WEBGL_PACK")&&!0===r,i=a?zL(t):t,o=a?new bB(i):new gB(i),u=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture.texture,l.texShape[0],l.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),c}timerAvailable(){return qh().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=Bm(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=Bm(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(qh().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);i.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return qh().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Fm(),endMs:null}}endTimer(e){return qh().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Fm(),e)}async getQueryTime(e){if(qh().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=XP){return qh().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&gh(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){um("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return qP(e.shape,t)}packedUnaryOp(e,t,n){const r=new HP(e.shape,t),s=this.compileAndRun(r,[e],n);return Mg().makeTensorFromTensorInfo(s)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=oP(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(qh().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,OP,e.dtype);const t=new RP(e.shape,OP),n=this.compileAndRun(t,[e]);return Mg().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Eh(n[0])){const s=n.map((e=>zm(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){return Mg().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new jP(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new SP(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[OL(e.shape),...FL(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[OL(t),...FL(t)],a=new _P(s,n),i=[n],o=this.runWebGLProgram(a,[r],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:s,dtype:a}=n;null!=t&&ph(gh(s)<=t[0]*t[1]*4,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."));const i=zL(s);let o;o=r?new mB(i):new fB(i);const u=[null!=t?t:xL(i)];return{dtype:a,shape:s,dataId:this.runWebGLProgram(o,[{shape:i,dtype:a,dataId:e}],a,u,!0,t).dataId}}runWebGLProgram(e,t,n,r,s=!1,a){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===mL.DENSE){const t=null!=a?a:xL(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===gh(i.shape))return o.values=Sh(i.dtype,0),i;const u=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&gh(t.shape)<=qh().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!LL(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),u.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let r="";t.concat(n).forEach((t=>{const s=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:u}=uB(e.packedInputs,t.shape,a);let l="",c="",h="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];l=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=Oh(o);h=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const d=t.shape.length,p=2===o.length&&bh(t.shape,a),f=1===gh(t.shape),m=jb(t.shape,n.shape),g=!e.packedInputs&&d===n.shape.length&&bh(a,n.texData.texShape),b=e.packedInputs||o.length>2?"":`${a[0]>1}_${a[1]>1}`;r+=`${d}_${g}_${i?u:""}_${o.length}_${f}_${m}_${p}_${l}_${c}_${h}_${b}_${s}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${s}`}}));const s=e.userCode;let a=e.constructor.name;return a+="_"+r+"_"+s+`${qh().getNumber("WEBGL_VERSION")}`,a}(e,l,c),d=this.getAndSaveBinary(h,(()=>function(e,t,n,r){const s=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),a=s.map((e=>e.shapeInfo)),i={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},o=JL(s,i,t),u=function(e,t){const n=DL(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if($L(e,(()=>e.shaderSource(n,t))),$L(e,(()=>e.compileShader(n))),qh().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw _L(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,o),l=e.createProgram(u);return qh().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:u,source:o,webGLProgram:l,inShapeInfos:a,outShapeInfo:i,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(l),Object.assign({program:t,fragmentShader:u,source:o,webGLProgram:l,inShapeInfos:a,outShapeInfo:i},hB(e,t,l)))}(this.gpgpu,e,l,c))),p=null!=this.activeTimers;let f;p&&(f=this.startTimer()),qh().get("ENGINE_COMPILE_ONLY")||function(e,t,n,r,s){t.program.enableShapeUniforms||(dB(t.inShapeInfos,n),dB([t.outShapeInfo],[r]));const a=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,i[0],i[1]):e.setOutputMatrixTexture(a.texture,i[0],i[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===qh().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let r=0;r<n.length;++r){const s=n[r],{uniform:a,offset:i,shape:o,texShape:u}=t.variablesLocations[r];if(o){const{uniformShape:n}=uB(t.program.packedInputs,s.shape,s.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(o,new Int32Array(n));break;case 2:e.gl.uniform2iv(o,new Int32Array(n));break;case 3:e.gl.uniform3iv(o,new Int32Array(n));break;case 4:e.gl.uniform4iv(o,new Int32Array(n))}}if(u&&e.gl.uniform2i(u,s.texData.texShape[0],s.texData.texShape[1]),null!=a)if(s.isUniform)if(gh(s.shape)<2)e.gl.uniform1f(a,s.uniformValues[0]);else{let t=s.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=s.texData.slice&&null!=i&&e.gl.uniform1i(i,s.texData.slice.flatOffset),e.setInputMatrixTexture(s.texData.texture.texture,a,r)}const o=t.outShapeLocation;if(o)switch(r.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=Oh(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&s)for(let n=0;n<t.program.customUniforms.length;++n){const r=t.program.customUniforms[n],a=t.customUniformLocations[n],i=s[n];if("float"===r.type)e.gl.uniform1fv(a,i);else if("vec2"===r.type)e.gl.uniform2fv(a,i);else if("vec3"===r.type)e.gl.uniform3fv(a,i);else if("vec4"===r.type)e.gl.uniform4fv(a,i);else if("int"===r.type)e.gl.uniform1iv(a,i);else if("ivec2"===r.type)e.gl.uniform2iv(a,i);else if("ivec3"===r.type)e.gl.uniform3iv(a,i);else{if("ivec4"!==r.type)throw Error(`uniform type ${r.type} is not supported yet.`);e.gl.uniform4iv(a,i)}}e.executeProgram()}(this.gpgpu,d,l,c,r),u.forEach((e=>this.disposeIntermediateTensorInfo(e))),p&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=qh().getNumber("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Fm();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!qh().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===s){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,r,s=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,r,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(qh().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Bg((()=>{if(!qh().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=qh().getBool("DEBUG");qh().set("DEBUG",!1);const t=this.abs(Ab(1e-8)).dataSync()[0];if(qh().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const u=null!=this.activeTimers;let l;u&&(l=Fm());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=qh().getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=qh().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(r===1/0&&qh().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=n/2),t&&(n*=2,r*=2,1===(e=e.map(((t,n)=>n>=e.length-2?hh(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=Ih(e);e=t.newShape}let s=gh(e),a=null;e.length<=1&&s<=n?a=[1,s]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const i=null!=a&&Math.max(...a)>r&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||i)if(t){const t=OL(e);let n=2,r=2;e.length&&([n,r]=FL(e)),s=t*(n/2)*(r/2),a=xh(s).map((e=>2*e))}else a=xh(s);return a}(n,o),t.texShape=c),null!=s){const e=zL(n);let a,i=c[1],h=c[0];const d=s instanceof Uint8Array||s instanceof Uint8ClampedArray;!o&&d||([i,h]=wL(c[0],c[1])),a=o?new wB(e,d):new xB(e,d);const p=d?[h,i]:c,f=this.makeTensorInfo(p,r),m=this.texData.get(f.dataId);m.usage=d?gL.PIXELS:gL.UPLOAD,m.texShape=p,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,h,s);const g=[[h,i]],b=!0,y=this.runWebGLProgram(a,[f],r,g,b),x=this.texData.get(y.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,qh().get("ENGINE_COMPILE_ONLY")?this.disposeData(y.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(y.dataId)),this.disposeIntermediateTensorInfo(f),u&&(this.uploadWaitMs+=Fm()-l)}else{const e=this.acquireTexture(c,i,r,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*Th(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await Dv(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw _L(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:t,customUniformLocations:n,infLoc:r,nanLoc:s,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:o}=hB(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=s,e.outShapeLocation=a,e.outShapeStridesLocation=i,e.outTexShapeLocation=o}}createTensorFromGPUData(e,t,n){e.channels=e.channels||"RGBA";const{texture:r,height:s,width:a,channels:i}=e,o=Mg().backend;if(!o.gpgpu.gl.isTexture(r))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const u=o.writeTexture(r,t,n,s,a,i);return Mg().makeTensorFromDataId(u,t,n,o)}}YP.nextDataId=0,Sg()&&Ug("webgl",(()=>new YP),2);const ZP="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class JP{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Kb(t,n),this.enableShapeUniforms=pB(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const QP="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class eW{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Kb(t,n);const s=this.outputShape.length;this.enableShapeUniforms=pB(s);let a="";if(r)if(0===s||1===gh(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${oB(s)} coords = getOutputCoords();\n        `,1===s)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=IP("coords",s);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= outShape[${s} - 2];\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= outShape[${s} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function tW(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const nW={kernelName:dp,backendName:"webgl",kernelFunc:tW};function rW(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),i=n.texData.get(a.dataId),o=tW({inputs:{x:r},backend:n}),u=tW({inputs:{x:s},backend:n});return i.complexTensorInfos={real:o,imag:u},a}const sW={kernelName:Id,backendName:"webgl",kernelFunc:rW},aW="return (a < 0.) ? b * a : a;",iW="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",oW={kernelName:yp,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r,i=n.makeTensorInfo([],"float32",Dm(a,"float32")),o=qh().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new eW(iW,s.shape,i.shape):new JP(aW,s.shape,i.shape),u=n.runWebGLProgram(o,[s,i],"float32");return n.disposeIntermediateTensorInfo(i),u}},uW="return (a < 0.) ? b * a : a;",lW="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",cW={kernelName:Qp,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=qh().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new eW(lW,r.shape,s.shape):new JP(uW,r.shape,s.shape);return n.runWebGLProgram(a,[r,s],"float32")}},hW="if (isnan(x)) return x;";function dW({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:i}=s,o=a,u=r||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,u);return o.makeTensorInfo(i.shape,u,t)}let l;return l=qh().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new HP(i.shape,t):new RP(i.shape,e),o.runWebGLProgram(l,[i],u)}}function pW({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:i,backend:o})=>{const{a:u,b:l}=i,c=o;if(r&&"complex64"===u.dtype){const t=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:u.shape},a={dataId:r.dataId,dtype:r.dtype,shape:l.shape},i=new JP(e,u.shape,l.shape);return c.runWebGLProgram(i,[s,a],cg(n.dtype,r.dtype))})),a=rW({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const h=a||cg(u.dtype,l.dtype);if(("string"===u.dtype||"string"===l.dtype||c.shouldExecuteOnCPU([u,l]))&&null!=s){const e=c.texData.get(u.dataId).values,t=c.texData.get(l.dataId).values,n="string"===u.dtype?W$(e):e,r="string"===u.dtype?W$(t):t,[a,i]=s(u.shape,l.shape,n,r,h),o=c.makeTensorInfo(i,h);return c.texData.get(o.dataId).values=a,o}let d;return d=qh().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new eW(t,u.shape,l.shape,n):new JP(e,u.shape,l.shape),c.runWebGLProgram(d,[u,l],h)}}function fW(e,t=!1){if("linear"===e)return t?PP:DP;if("relu"===e)return t?UP:zP;if("elu"===e)return t?WP:FP;if("relu6"===e)return t?VP:MP;if("prelu"===e)return t?lW:uW;if("leakyrelu"===e)return t?iW:aW;if("sigmoid"===e)return t?GP:BP;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class mW{constructor(e,t,n,r=!1,s=!1,a=!1,i=null,o=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=pB(this.outputShape.length);const l=r?e[1]:e[2],c=Math.ceil(l/2),h=r?"i * 2, rc.y":"rc.y, i * 2",d=s?"rc.z, i * 2":"i * 2, rc.z",p=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const b=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let y="rc.x",x="rc.x";e[0]<t[0]?y=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(x=`imod(rc.x, ${t[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${y};\n        int batchB = ${x};\n        for (int i = 0; i < ${c}; i++) {\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${d});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${f[0]});\n          result += (${p[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${b}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const gW={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class bW{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Kb(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const yW="return a * b;";function xW(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=cg(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new bW(gW.REAL,r.shape,s.shape),i=new bW(gW.IMAG,r.shape,s.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(a,o,"float32"),l=n.runWebGLProgram(i,o,"float32"),c=rW({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[i,o]=YB(r.shape,s.shape,e.values,t.values,a),u=n.makeTensorInfo(o,a);return n.texData.get(u.dataId).values=i,u}let i;return i=qh().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new eW(yW,r.shape,s.shape):new JP(yW,r.shape,s.shape),n.runWebGLProgram(i,[r,s],a)}const wW={kernelName:Up,backendName:"webgl",kernelFunc:xW};function vW(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,i=n,o=gh(s.shape),u=$h(a,o),l=gh(u);ph(o===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(s.dataId);return!c.isPacked||LL(s.shape,u)||null!==c.texture&&LL(c.shape,u)?(i.incRef(s.dataId),{dataId:s.dataId,shape:u,dtype:s.dtype}):function(e,t,n){const r=[OL(e.shape),...FL(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[OL(t),...FL(t)],i=new _P(a,r),o=[r],u=n.runWebGLProgram(i,[s],e.dtype,o,!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(s,u,i)}const $W={kernelName:lf,backendName:"webgl",kernelFunc:vW};class kW{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];const i=4*Math.floor(n/4),o=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${yh(e)?e.toPrecision(2):e}, ones);`}let l="";s%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class IW{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,d="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}function SW(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=Uv(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let i=0;i<s.length;i++){const{inSize:o,windowSize:u,outSize:l}=s[i];let c,h;c="mean"===n?0===i?new kW({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},o):new kW({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l}):new IW({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},n),h=a,a=r.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(h)}return a}class _W{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=oB(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class CW{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=oB(this.rank),s=kP("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=s[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function TW(e,t,n){const r=qh().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new CW(e.shape,t):new _W(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function EW(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;return function(e,t,n,r){const s=t,a=e.shape.length,i=kh(s,e.shape);let o=i;const u=zx(o,a),l=null!=u;let c=e;l&&(c=TW(e,u,r),o=Lx(o.length,a)),Fx("sum",o,a);const[h,d]=Dx(c.shape,o);let p=h;n&&(p=Ox(h,i));const f=gh(d),m=vW({inputs:{x:c},attrs:{shape:[gh(e.shape)/f,f]},backend:r}),g=SW(m,hg(e.dtype),"sum",r),b=vW({inputs:{x:g},attrs:{shape:p},backend:r});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),l&&r.disposeIntermediateTensorInfo(c),b}(s,a,i,n)}const NW={kernelName:Nf,backendName:"webgl",kernelFunc:EW};function RW(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,i=n,o=s.shape.length,u=new Array(o);for(let e=0;e<u.length;e++)u[e]=s.shape[a[e]];let l;if(i.shouldExecuteOnCPU([s])){const e=i.texData.get(s.dataId).values,t=vP(e,s.shape,s.dtype,a,u);l=i.makeTensorInfo(u,s.dtype),i.texData.get(l.dataId).values=t}else l=TW(s,a,i);return l}const AW={kernelName:Jf,backendName:"webgl",kernelFunc:RW},DW=1e3;function OW({a:e,b:t,transposeA:n,transposeB:r,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const l=e.shape.length,c=t.shape.length,h=n?e.shape[l-2]:e.shape[l-1],d=r?t.shape[c-1]:t.shape[c-2],p=n?e.shape[l-1]:e.shape[l-2],f=r?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),b=gh(m),y=gh(g),x=Kb(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,f]);ph(h===d,(()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[b,h,p]:[b,p,h],v=r?[y,f,d]:[y,d,f],$=vW({inputs:{x:e},backend:s,attrs:{shape:w}}),k=vW({inputs:{x:t},backend:s,attrs:{shape:v}}),I=[$,k],S=Math.max(b,y),_=n?$.shape[1]:$.shape[2],C=null!=a,T=null!=i,E="leakyrelu"===u,N=null!=u?fW(u,!0):null;let R;if((1===p||1===f)&&_>DW&&!1===(C||T||E||null!=N)){let e=$,t=k;n&&(e=RW({inputs:{x:$},backend:s,attrs:{perm:[0,2,1]}}),I.push(e)),r&&(t=RW({inputs:{x:k},backend:s,attrs:{perm:[0,2,1]}}),I.push(t));const a=1===f;let i=e;1!==f&&(i=vW({inputs:{x:e},backend:s,attrs:{shape:[S,_,1]}}),I.push(i));const o=1===f?2:1;let u=t;a&&(u=vW({inputs:{x:t},backend:s,attrs:{shape:[S,1,_]}}),I.push(u));const l=xW({inputs:{a:i,b:u},backend:s});R=EW({inputs:{x:l},backend:s,attrs:{axis:o,keepDims:!0}}),I.push(l)}else{const u=cg(e.dtype,t.dtype),l=new mW(w,v,[S,p,f],n,r,C,N,T,E),c=[$,k];if(null!=a&&c.push(a),T&&c.push(i),E){const e=s.makeTensorInfo([],"float32",Dm(o,"float32"));c.push(e),I.push(e)}R=s.runWebGLProgram(l,c,u)}const A=vW({inputs:{x:R},backend:s,attrs:{shape:x}});I.push(R);for(const e of I)s.disposeIntermediateTensorInfo(e);return A}const FW={kernelName:am,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=r;return OW({a:s,b:a,transposeA:u,transposeB:l,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},zW="return abs(x);",MW={kernelName:Jh,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=oP(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let s;return s=qh().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new HP(r.shape,zW):new RP(r.shape,zW),n.runWebGLProgram(s,[r],r.dtype)}},LW=dW({opSnippet:AP+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),BW={kernelName:Qh,backendName:"webgl",kernelFunc:LW},PW=dW({opSnippet:AP+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),WW={kernelName:ed,backendName:"webgl",kernelFunc:PW},UW="return a + b;",VW=pW({opSnippet:UW,packedOpSnippet:UW,supportsComplex:!0,cpuKernelImpl:TB}),GW={kernelName:td,backendName:"webgl",kernelFunc:VW};class HW{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class jW{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const qW={kernelName:nd,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return tW({inputs:{x:s[0]},backend:r});if(s.length>qh().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map((e=>e.dtype)).reduce(((e,t)=>cg(e,t))),i=s.map((e=>e.shape)),o=qh().getBool("WEBGL_PACK")?new jW(s[0].shape,i):new HW(s[0].shape,i);return r.runWebGLProgram(o,s,a)}},KW={kernelName:rd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=s.shape.length,u=kh(a,s.shape);let l=u;const c=zx(l,o);let h=s;null!=c&&(h=RW({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Lx(l.length,o)),Fx("all",l,o);const[d,p]=Dx(h.shape,l),f=vW({inputs:{x:h},backend:n,attrs:{shape:[-1,gh(p)]}}),m=SW(f,f.dtype,"all",n);let g;return g=vW(i?{inputs:{x:m},backend:n,attrs:{shape:Ox(d,u)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},XW={kernelName:sd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=s.shape.length,u=kh(a,s.shape);let l=u;const c=zx(l,o);let h=s;null!=c&&(h=RW({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Lx(l.length,o)),Fx("any",l,o);const[d,p]=Dx(h.shape,l),f=vW({inputs:{x:h},backend:n,attrs:{shape:[-1,gh(p)]}}),m=SW(f,f.dtype,"any",n);let g;return g=vW(i?{inputs:{x:m},backend:n,attrs:{shape:Ox(d,u)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class YW{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class ZW{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,ph(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=e[e.length-1],a=Math.ceil(s/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,u=oB(o),l=IP("coords",o);let c,h;if(1===a){h=o+1;const e=oB(h);c=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[o-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[o-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[o-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[o-2]};`}else h=o,c=`\n        ${u} sourceLocR = coords;\n        ++${l[o-1]};\n        ${u} sourceLocG = coords;\n        ++${l[o-2]};\n        ${u} sourceLocA = coords;\n        --${l[o-1]};\n        ${u} sourceLocB = coords;\n        --${l[o-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map((e=>"int "+e)),m=IP("sourceLocR",h-1).concat("inIdx.r"),g=IP("sourceLocG",h-1).concat("inIdx.g"),b=IP("sourceLocB",h-1).concat("inIdx.b"),y=IP("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${y.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`,$=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${$}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${l[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function JW(e,t,n,r=null){let s=t.shape[0],a=t.shape[1];null!=r&&(s=r.shape[0],a=r.shape[1]);const i=Uv(a),o={windowSize:i,inSize:a,batchSize:s,outSize:Math.ceil(a/i)},u=new YW(o,n,null==r),l=[t];null!=r&&l.push(r);const c=e.runWebGLProgram(u,l,"int32");if(1===c.shape[1])return c;const h=JW(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function QW(e,t,n,r=null){const s=null!=r?r.shape:t.shape,a=Uv(s[s.length-1]),i=new ZW(s,a,n,null==r),o=null==r?[t]:[t,r],u=e.runWebGLProgram(i,o,"int32");if(u.shape.length===t.shape.length){const r=QW(e,t,n,u);return e.disposeIntermediateTensorInfo(u),r}return u}function eU(e,t,n,r){const s=[n];if(Fx("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.shape.length),!qh().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let i=t;null!==a&&a.isPacked&&(i=e.unpackTensor(t),n.push(i));const[o,u]=Dx(i.shape,s),l=gh(u),c=vW({inputs:{x:i},backend:e,attrs:{shape:[-1,l]}});n.push(c);const h=JW(e,c,r);n.push(h);const d=vW({inputs:{x:h},backend:e,attrs:{shape:o}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),d}return QW(e,t,r)}const tU={kernelName:ad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let i=kh(a,s.shape);const o=zx(i,s.shape.length);let u=s;const l=[];null!=o&&(u=RW({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=Lx(i.length,u.shape.length)),Fx("argMax",[i[0]],u.shape.length);const c=eU(n,u,i[0],"max");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},nU={kernelName:id,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let i=kh(a,s.shape);const o=zx(i,s.shape.length);let u=s;const l=[];null!=o&&(u=RW({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=Lx(i.length,u.shape.length)),Fx("argMin",[i[0]],u.shape.length);const c=eU(n,u,i[0],"min");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},rU=dW({opSnippet:AP+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),sU={kernelName:od,backendName:"webgl",kernelFunc:rU},aU=dW({opSnippet:AP+"return log(x + sqrt(x * x + 1.0));"}),iU={kernelName:ud,backendName:"webgl",kernelFunc:aU},oU=dW({opSnippet:AP+"\n  return atan(x);\n"}),uU={kernelName:ld,backendName:"webgl",kernelFunc:oU},lU=pW({opSnippet:ZP+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+QP+"\n  return result;\n"}),cU={kernelName:hd,backendName:"webgl",kernelFunc:lU},hU=dW({opSnippet:AP+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),dU={kernelName:cd,backendName:"webgl",kernelFunc:hU};class pU{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let b="0.0";if(f||(b="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let y=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(y="avgValue / max(count, 1.0)");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${y});\n      }\n    `}}class fU{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,b=e.padInfo.left;this.outputShape=e.outShape;const y="avg"===t;let x="0.0";if(y||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${b});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / max(count, 1.0)");const v=4*Math.floor(a/4),$=a%4,k=`\n      if (${y}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${b});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${k}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===$}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${k}\n            } else if (${2===$}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${k}\n            } else if (${3===$}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${k}\n            }\n          }\n        }\n        setOutput(${w});\n      }\n    `}}const mU={kernelName:dd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;GL(s,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;ph(Wy(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=Ry(s.shape,a,i,1,o,u);if(1===l.filterWidth&&1===l.filterHeight&&bh(l.inShape,l.outShape))return tW({inputs:{x:s},backend:n});const c=new pU(l,"avg",!1);return n.runWebGLProgram(c,[s],"float32")}},gU={kernelName:fd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u,dataFormat:l}=r,c=Ay(s.shape,a,i,[1,1,1],o,u,l),h=new fU(c,"avg",!1);return n.runWebGLProgram(h,[s],"float32")}};class bU{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=o-1-e.padInfo.top,c=u-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yU{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=d-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xU={kernelName:md,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r,h=Ay(i.shape,o,u,[1,1,1],l,c),d=new yU(h);return n.runWebGLProgram(d,[s],i.dtype)}},wU={kernelName:pd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;GL([s,a],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=r,c=Ry(i.shape,o,u,1,l),h=new bU(c);return n.runWebGLProgram(h,[s],i.dtype)}},vU={kernelName:gd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:i,transposeB:o}=r;return OW({a:s,b:a,transposeA:i,transposeB:o,backend:n})}};class $U{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Kb(e,t),Kb(e,n);let i="0.0";null!=r&&(Kb(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(Kb(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class kU{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Kb(e,t),Kb(e,n);let i="vec4(0.0)";null!=r&&(Kb(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(Kb(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const IU={kernelName:op,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:s,variance:a,offset:i,scale:o}=e;ph(s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ph(null==i||s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ph(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const l=[r,s,a];let c=null;null!=i&&(c=i.shape,l.push(i));let h=null;null!=o&&(h=o.shape,l.push(o));const d=qh().getBool("WEBGL_PACK_NORMALIZATION")?new kU(r.shape,s.shape,a.shape,c,h,u):new $U(r.shape,s.shape,a.shape,c,h,u);return t.runWebGLProgram(d,l,l[0].dtype)}};class SU{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=oB(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return _U.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${_U[t]} = start[${t}] + coords.${_U[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const _U=["x","y","z","w","u","v"];class CU{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=oB(this.rank),n=IP("coords",this.rank),r=IP("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function TU(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:i}=r,[o,u]=Iy(s,a,i);if(cy(s,o,u),0===gh(u))return n.makeTensorInfo(u,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=n.texData.get(s.dataId),t=uP(e.values,o,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,t)}const{isPacked:l}=n.texData.get(s.dataId),c=$y(s.shape,o,u);if(l||!c){const e=qh().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new CU(u):new SU(u),t=[o];return n.runWebGLProgram(e,[s],s.dtype,t)}return n.uploadToGPU(s.dataId),function(e,t,n,r){const s=r.texData.get(e.dataId),a=r.makeTensorInfo(n,e.dtype),i=r.texData.get(a.dataId);Object.assign(i,s),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=ky(t,Oh(e.shape));s.slice&&(o+=s.slice.flatOffset),i.slice={flatOffset:o,origDataId:s.slice&&s.slice.origDataId||e.dataId};const u=r.dataRefCount.get(i.slice.origDataId)||1;return r.dataRefCount.set(i.slice.origDataId,u+1),a}(s,o,u,n)}const EU={kernelName:kf,backendName:"webgl",kernelFunc:TU},NU={kernelName:bd,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:i}=r;ph(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),u=Gv(s.shape,a,o),l=Hv(u.length,a.length),c=jv(s.shape,a,o),h=qv(i,a.length),d=Kv(c,i,a.length),p=[],f=vW({inputs:{x:s},backend:n,attrs:{shape:u}}),m=RW({inputs:{x:f},backend:n,attrs:{perm:l}}),g=vW({inputs:{x:m},backend:n,attrs:{shape:c}}),b=TU({inputs:{x:g},backend:n,attrs:{begin:h,size:d}});return p.push(f),p.push(m),p.push(g),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},RU={kernelName:yd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=n.readSync(s.dataId),u=n.readSync(a.dataId),l=EB(o,u,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,l)}},AU={kernelName:xd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=qh().getBool("WEBGL_PACK_BINARY_OPERATIONS"),i=qh().getNumber("WEBGL_VERSION");if(n.shouldExecuteOnCPU([r,s])||1===i){const e=n.texData.get(r.dataId).values,t=n.texData.get(s.dataId).values,[a,i]=RB(r.shape,s.shape,e,t,r.dtype),o=n.makeTensorInfo(i,r.dtype);return n.texData.get(o.dataId).values=a,o}let o;return o=a?new eW("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",r.shape,s.shape,!1):new JP("\n  return float(int(a.r) & int(b.r));\n",r.shape,s.shape),n.runWebGLProgram(o,[r,s],r.dtype)}},DU={kernelName:wd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.readSync(r.dataId),i=n.readSync(s.dataId),o=Kb(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},OU=pW({opSnippet:"return float(a != b);",cpuKernelImpl:JB,dtype:"bool"}),FU={kernelName:Gp,backendName:"webgl",kernelFunc:OU};function zU(e){const{inputs:t,backend:n}=e,{input:r}=t;return tW({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const MU={kernelName:af,backendName:"webgl",kernelFunc:zU},LU={kernelName:vd,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:s}=t,{x:a}=n,{dtype:i}=s;if("complex64"===i){if("complex64"===a.dtype)return tW({inputs:{x:a},backend:r});const t=Zx(a.shape),n=e({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=rW({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===a.dtype){const t=zU({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(t),n}if(!Ch(a.dtype,i)){const e=tW({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}if(r.shouldExecuteOnCPU([a])){const e=r.texData.get(a.dataId).values,[t,n,s]=AB(e,a.shape,a.dtype,i);return r.makeTensorInfo(t,n,s)}if("int32"===i)return function(e,t){const n=new RP(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(a,r);if("bool"===i){const e=r.makeTensorInfo([],"bool",Sh("bool",1)),t=OU({inputs:{a:a,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},BU="return ceil(x);",PU=dW({opSnippet:BU,packedOpSnippet:BU,cpuKernelImpl:DB}),WU={kernelName:$d,backendName:"webgl",kernelFunc:PU};class UU{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class VU{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const GU={kernelName:kd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:i}=r;let o;o=qh().getBool("WEBGL_PACK_CLIP")?new VU(s.shape):new UU(s.shape);const u=[[a],[i]];return n.runWebGLProgram(o,[s],s.dtype,u)}};class HU{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function jU(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const qU={kernelName:Sd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new HU(r.shape),i=[jU(r,s.complexTensorInfos.real),jU(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class KU{constructor(e){this.outputShape=[],this.outputShape=Fv(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class XU{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Fv(e,t);const n=this.outputShape,r=n.length,s=oB(r),a=IP("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const u=i[t],l=i.slice(-2),c=i.join();let h=`if (${u} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${u} < ${o[e]}  && ${u} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${YU(i,u,t)}),\n            vec2(${YU(l,u,t)}));\n        }`}const d=o.length,p=o[o.length-1];h+=`\n        return getChannel(\n          getT${d}(${YU(i,u,p)}),\n          vec2(${YU(l,u,p)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function YU(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function ZU(e){const{inputs:t,backend:n}=e,{input:r}=t;return tW({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const JU={kernelName:fp,backendName:"webgl",kernelFunc:ZU};function QU(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>zU({inputs:{input:e},backend:n}))),s=e.map((e=>ZU({inputs:{input:e},backend:n}))),a=QU(r,t,n),i=QU(s,t,n),o=rW({inputs:{real:a,imag:i},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),s.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let s=n.shouldExecuteOnCPU(e);if("string"===r&&(s=!0),s){const s=e.map((e=>{const r=gh(e.shape.slice(t));return vW({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),a=s.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=Fv(s.map((e=>e.shape)),1),o=1===s[0].shape[0],u=OB(a,i,r,o),l=Fv(e.map((e=>e.shape)),t),c=n.makeTensorInfo(l,r,u);return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const a=e.filter((e=>gh(e.shape)>0)),i=qh().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&a[0].shape.length>1;if(1===a.length){const t=i?new RP(e[0].shape,LP):new HP(e[0].shape,LP);return n.runWebGLProgram(t,e,r)}const o=qh().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(a.length>o){const e=[];for(let r=0;r<a.length;r+=o){const s=a.slice(r,r+o);e.push(QU(s,t,n))}const r=QU(e,t,n);for(const t of e)n.disposeIntermediateTensorInfo(t);return r}if(i){const e=new XU(a.map((e=>e.shape)),t);return n.runWebGLProgram(e,a,r)}const{tensors2D:u,outShape:l}=function(e,t,n){const r=Fv(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>vW({inputs:{x:e},attrs:{shape:[-1,gh(e.shape.slice(t))]},backend:n}))),outShape:r}}(a,t,n),c=new KU(u.map((e=>e.shape))),h=n.runWebGLProgram(c,u,r);u.forEach((e=>n.disposeIntermediateTensorInfo(e)));const d=vW({inputs:{x:h},attrs:{shape:l},backend:n});return n.disposeIntermediateTensorInfo(h),d}function eV(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=kh(s,t[0].shape)[0];Ov(t.map((e=>e.shape)),a);const i=Fv(t.map((e=>e.shape)),a);if(0===gh(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>gh(e.shape)>0));return 1===o.length?tW({inputs:{x:o[0]},backend:n}):QU(o,a,n)}const tV={kernelName:_d,backendName:"webgl",kernelFunc:eV};class nV{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,b=m?2:3,y=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${b}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${w}\n        setOutput(result);\n      }\n    `}}class rV{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class sV{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=pB(this.outputShape.length);const a=e.padInfo.left,i=e.strideWidth,o=e.dilationWidth,u=e.filterHeight,l=e.filterWidth,c=l;let h="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<l;e++)h+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;h+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<l;e++)h+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;h+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(h+=`\n           xC = xCCorner + ${n*o};\n           `,1===i){if(n<l&&(a%2==1?(h+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,h+=1===o&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):h+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<l)){const e=a%2==0?hh(o):o;o%2==0&&a%2==1||o%2!=0&&a%2!=1?(h+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,h+=o>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):h+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<l&&(a%2==1?(h+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<l&&(h+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(h+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<l&&(h+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<l&&(h+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<l&&(h+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}h+="\n     }\n   ",h+="\n     }\n   ",h+="\n     }\n   ";let d="",p="";n&&(d=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:s?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,p="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${d}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${h}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${p}\n         setOutput(result);\n       }\n     `}}class aV{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=pB(this.outputShape.length);const{dataFormat:n}=t,r=jL(),s="channelsLast"===n,a=s?1:2,i=s?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let u="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)u+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${s}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function iV(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function oV({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const u=e.shape,l=r.texData.get(e.dataId),c=n.inChannels,h=u[0]*u[1]*u[2],d=n.outChannels,p="channelsLast"===n.dataFormat,f=!1;let m;const g=[];if(null!=a){const e=iV(a.shape,p);null!=e&&(a=vW({inputs:{x:a},backend:r,attrs:{shape:e}}),g.push(a))}if(null!=s){const e=iV(s.shape,p);null!=e&&(s=vW({inputs:{x:s},backend:r,attrs:{shape:e}}),g.push(s))}if((1!==h&&1!==d||!(c>DW))&&l.isPacked&&p&&null!=l.texture&&u[2]%2!=0&&bh(l.shape.slice(-3),u.slice(-3))){const c=u[0]*u[1]*(u[2]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},d=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,ph(LL(l.shape,h.shape),(()=>`packed reshape ${l.shape} to ${h.shape} isn't free`));const p=vW({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(p);const b=OW({a:h,b:p,backend:r,transposeA:!1,transposeB:f,bias:s,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),y=r.texData.get(b.dataId);ph(y.isPacked,(()=>"batchMatMul result is expected to be packed")),l.shape=d,y.shape=n.outShape,m=tW({inputs:{x:b},backend:r}),m.shape=n.outShape,g.push(b)}else{const u=n.outHeight*n.outWidth,l=vW({inputs:{x:e},backend:r,attrs:{shape:p?[n.batchSize,u,n.inChannels]:[n.batchSize,n.inChannels,u]}}),c=vW({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=OW({a:p?l:c,b:p?c:l,transposeA:!p,transposeB:f,backend:r,bias:s,activation:o,preluActivationWeights:a,leakyreluAlpha:i});m=vW({inputs:{x:h},backend:r,attrs:{shape:n.outShape}}),g.push(l),g.push(c),g.push(h)}for(const e of g)r.disposeIntermediateTensorInfo(e);return m}function uV({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:u,filterHeight:l,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=n,f="channelsLast"===p,m=u*l*c,g=d*h,b=[n.batchSize,m,g],y=[];if(null!=a){const e=iV(a.shape,f);null!=e&&(a=vW({inputs:{x:a},backend:r,attrs:{shape:e}}),y.push(a))}if(null!=s){const e=iV(s.shape,f);null!=e&&(s=vW({inputs:{x:s},backend:r,attrs:{shape:e}}),y.push(s))}const x=vW({inputs:{x:t},backend:r,attrs:{shape:[1,m,gh(t.shape)/m]}});y.push(x);const w=new aV(b,n),v=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],$=r.runWebGLProgram(w,[e],"float32",v),k=vW({inputs:{x:$},backend:r,attrs:{shape:b}});y.push($),y.push(k);const I=null!=s,S=null!=a,_="leakyrelu"===o,C=o?fW(o,!0):null,T=new mW(f?k.shape:x.shape,f?x.shape:k.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,I,C,S,_),E=f?[k,x]:[x,k];if(s&&E.push(s),S&&E.push(a),_){const e=r.makeTensorInfo([],"float32",Dm(i,"float32"));E.push(e),y.push(e)}const N=r.runWebGLProgram(T,E,"float32"),R=vW({inputs:{x:N},backend:r,attrs:{shape:n.outShape}});y.push(N);for(const e of y)r.disposeIntermediateTensorInfo(e);return R}const lV={kernelName:Cd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=r,h=Vy(u),d=Dy(s.shape,a.shape,i,l,o,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&qh().getBool("WEBGL_EXP_CONV")){const e=new sV(d),t=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];p=n.runWebGLProgram(e,[s,a],"float32",t)}else if(qh().getBool("WEBGL_CONV_IM2COL"))p=uV({x:s,filter:a,convInfo:d,backend:n});else{const e=new nV(d);p=n.runWebGLProgram(e,[s,a],"float32")}else p=oV({x:s,filter:a,convInfo:d,backend:n});const f=vW({inputs:{x:p},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(p),f}};class cV{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              ${a?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hV{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class dV{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class pV{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const fV={kernelName:Td,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r,h=Vy(u),d=Dy(s.shape,c,i,1,o,l,!1,h),p=new cV(d);return n.runWebGLProgram(p,[s,a],"float32")}};class mV{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=pB(this.outputShape.length);const t=e.filterHeight,n=e.filterWidth,r=t-1-e.padInfo.top,s=n-1-e.padInfo.left;this.userCode=`\n      const ivec2 pads = ivec2(${r}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            int wCPerm = ${n} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const gV={kernelName:Ed,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=r,h=Vy(l),d=Dy(i,a.shape,o,1,u,c,!1,h);if(qh().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===h){const e=[[d.strideHeight,d.strideWidth]],t=new mV(d);return n.runWebGLProgram(t,[s,a],"float32",e)}{const e=new hV(d);return n.runWebGLProgram(e,[s,a],"float32")}}},bV={kernelName:Nd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r,l=Oy(s.shape,a.shape,i,u,o),c=new rV(l);return n.runWebGLProgram(c,[s,a],"float32")}},yV={kernelName:Rd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,filterShape:u}=r,l=Oy(s.shape,u,i,1,o),c=new dV(l);return n.runWebGLProgram(c,[s,a],"float32")}},xV={kernelName:Ad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:i,strides:o,inputShape:u}=r,l=Oy(u,a.shape,o,1,i),c=new pV(l);return n.runWebGLProgram(c,[s,a],"float32")}},wV=dW({opSnippet:hW+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${QP}\n  return result;\n`}),vV={kernelName:Dd,backendName:"webgl",kernelFunc:wV},$V=dW({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),kV={kernelName:Od,backendName:"webgl",kernelFunc:$V};class IV{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=e,[l]=t,[c,h]=n;this.outputShape=[l,c,h,u];const d="bilinear"===r?1:0,[p,f]=[i-1+".0",o-1+".0"],[m,g,b]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${p}`],[y,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${y});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${b};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const SV={kernelName:Md,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:l}=r,c=new IV(s.shape,a.shape,o,u,l);return n.runWebGLProgram(c,[s,a,i],"float32")}};var _V;!function(e){e.Prod="*",e.Sum="+"}(_V||(_V={}));class CV{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const s=this.outputShape.length,a=this.op===_V.Prod?"1.0":"0.0",i=n?a:`getX(${TV(s,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1];let u="",l="";n?(u=r?"end != "+(o-1):"end != 0",l=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${o}`:"end >= pow2",l=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${oB(s)} coords = getOutputCoords();\n        int end = ${EV(s,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${l};\n          ${EV(s,"coords",this.op)} = idx;\n          val ${this.op}= getX(${TV(s,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function TV(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function EV(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function NV(e,t,n,r,s,a){const i=t.shape.length,o=zx([r],i);let u=t;null!=o&&(u=RW({inputs:{x:t},backend:n,attrs:{perm:o}}));const l=Lx(1,i)[0];if(l!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);const c=u.shape[l];let h=tW({inputs:{x:u},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const r=new CV(e,u.shape,!1,a),s=[[t]],i=h;h=n.runWebGLProgram(r,[h],h.dtype,s),n.disposeIntermediateTensorInfo(i)}if(s){const t=new CV(e,u.shape,s,a),r=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=o){const e=RW({inputs:{x:h},backend:n,attrs:{perm:Mx(o)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(u),e}return h}const RV={kernelName:Fd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r;return NV(_V.Prod,s,n,a,i,o)}},AV={kernelName:zd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r;return NV(_V.Sum,s,n,a,i,o)}},DV={kernelName:Ld,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=n.readSync(s.dataId),t=n.readSync(a.dataId),r=EB(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=NB(e,t,i,o);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class OV{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const FV={kernelName:Bd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:i}=r,o=s.shape[0],u=("NHWC"===i?s.shape[1]:s.shape[2])*a,l=("NHWC"===i?s.shape[2]:s.shape[3])*a,c=("NHWC"===i?s.shape[3]:s.shape[1])/(a*a),h=new OV("NHWC"===i?[o,u,l,c]:[o,c,u,l],a,i);return n.runWebGLProgram(h,[s],s.dtype)}};class zV{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=pB(this.outputShape.length);const a=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let u="",l="";n&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,l="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${l}\n        setOutput(result);\n      }\n    `}}class MV{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=pB(this.outputShape.length);const a=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,u=e.dilationWidth,l=e.filterHeight,c=e.filterWidth,h=c;let d="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)d+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;d+=`\n    for (int r = 0; r < ${l}; r++) {\n      `;for(let e=0;e<c;e++)d+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;d+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(h+1)/2;e++){const t=2*e;if(d+=`\n          xC = xCCorner + ${t*u};\n          `,1===o){if(t<c&&(i%2==1?(d+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,d+=1===u&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):d+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=i%2==0?hh(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(d+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,d+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):d+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(i%2==1?(d+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(d+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(d+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(d+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(d+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(d+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}d+="\n    }\n  ",d+="\n      }\n    ";let p="",f="";n&&(p=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${p}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${d}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const LV={kernelName:Pd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u,dimRoundingMode:l}=r;let c=u;null==c&&(c=[1,1]),ph(Wy(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=Dy(s.shape,a.shape,i,c,o,l,!0);let d;d=qh().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new MV(h):new zV(h);const p=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(d,[s,a],"float32",p)}};class BV{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class PV{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const WV={kernelName:Wd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r,h=Dy(s.shape,c,i,o,u,l,!0),d=new BV(h);return n.runWebGLProgram(d,[s,a],"float32")}},UV={kernelName:Ud,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=r,h=Dy(c,a.shape,i,o,u,l,!0),d=new PV(h);return n.runWebGLProgram(d,[s,a],"float32")}};class VV{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const GV={kernelName:Vd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=[...r.shape,...r.shape],a=gh(r.shape),i=vW({inputs:{x:r},backend:n,attrs:{shape:[a]}}),o=new VV(a),u=n.runWebGLProgram(o,[i],i.dtype),l=vW({inputs:{x:u},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),l}};class HV{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:u,dilationWidth:l}=e,{top:c,left:h}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const jV={kernelName:Gd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r,l=Ny(s.shape,a.shape,i,o,"NHWC",u);let c;const h=new HV(l);c=n.runWebGLProgram(h,[s,a],"float32");const d=vW({inputs:{x:c},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(c),d}},qV={kernelName:Kd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:i,summedDims:o,idDims:u}=x$(s,a.length);v$(i.length,u,a);const{path:l,steps:c}=$$(o,u),h=c.length;let d=null,p=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=w$(p,u[t]);let s;k$(e)?s=a[t]:(s=RW({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const i=s.shape.slice();for(let e=0;e<r.length;++e)i.splice(r[e],0,1);bh(s.shape,i)||(s=vW({inputs:{x:s},backend:n,attrs:{shape:i}}),f.push(s)),null===d?d=s:(d=xW({inputs:{a:s,b:d},backend:n}),f.push(d))}e<h-1&&(l[e]>=0&&(d=EW({inputs:{x:d},backend:n,attrs:{axis:l[e]-(i.length-p),keepDims:!1}}),f.push(d)),p--)}for(const e of f)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},KV=dW({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),XV={kernelName:Xd,backendName:"webgl",kernelFunc:KV},YV={kernelName:Yd,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=qh().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new eW("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new JP("return (b >= 0.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}},ZV=pW({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:FB}),JV={kernelName:Jd,backendName:"webgl",kernelFunc:ZV},QV=dW({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${t$};\n  float a1 = ${n$};\n  float a2 = ${r$};\n  float a3 = ${s$};\n  float a4 = ${a$};\n  float a5 = ${i$};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),eG={kernelName:Zd,backendName:"webgl",kernelFunc:QV},tG=dW({opSnippet:hW+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:zB,dtype:"float32"}),nG={kernelName:Qd,backendName:"webgl",kernelFunc:tG};function rG(e){const{inputs:t,attrs:n,backend:r}=e,{dim:s}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let u=s;return s<0&&(ph(-(i+1)<=s,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),u=i+s+1),o.splice(u,0,1),vW({inputs:{x:a},backend:r,attrs:{shape:o}})}const sG={kernelName:ep,backendName:"webgl",kernelFunc:rG},aG="return exp(x) - 1.0;",iG=dW({opSnippet:aG,packedOpSnippet:aG,cpuKernelImpl:MB}),oG={kernelName:tp,backendName:"webgl",kernelFunc:iG};class uG{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function lG(e,t,n){const r=n.texData.get(e.dataId),s=gh(e.shape),a=e.shape[e.shape.length-1],i=vW({inputs:{x:e},backend:n,attrs:{shape:[s/a,a]}}),o=i.shape,u=new uG("real",o,t),l=new uG("imag",o,t),c=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:o},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(u,c,"float32"),d=n.runWebGLProgram(l,c,"float32"),p=rW({inputs:{real:h,imag:d},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d);const f=vW({inputs:{x:p},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(p),f}const cG={kernelName:np,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return lG(r,!1,n)}};class hG{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function dG(e){const{backend:t,attrs:n}=e,{shape:r,value:s}=n;let{dtype:a}=n;if(a=a||Rh(s),"string"===a){const e=_h(a,gh(r));return e.fill(s),t.makeTensorInfo(r,a,e)}{const e=new hG(r,s),n=[[s]];return t.runWebGLProgram(e,[],a,n)}}const pG={kernelName:rp,backendName:"webgl",kernelFunc:dG};class fG{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const mG={kernelName:sp,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new fG(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},gG="return floor(x);",bG=dW({opSnippet:gG,packedOpSnippet:gG,cpuKernelImpl:LB}),yG={kernelName:ap,backendName:"webgl",kernelFunc:bG},xG=pW({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),wG={kernelName:ip,backendName:"webgl",kernelFunc:xG};class vG{constructor(e){this.variableNames=["A"];const t=jL(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class $G{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=jL(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const kG={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,l]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[l,u],h=[l,u,a];if(o||i){const e=qh().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=IG&&e===SG||(SG=e,IG=document.createElement("canvas").getContext("2d",{willReadFrequently:SG})),IG.canvas.width=u,IG.canvas.height=l,IG.drawImage(s,0,0,u,l),s=IG.canvas}const d=n.makeTensorInfo(c,"int32");n.texData.get(d.dataId).usage=gL.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),s);const p=qh().getBool("WEBGL_PACK")?new $G(h):new vG(h),f=n.runWebGLProgram(p,[d],"int32");return n.disposeData(d.dataId),f}};let IG,SG=qh().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const _G={kernelName:im,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=r,m=Vy(c),g=Dy(s.shape,a.shape,u,h,l,d,!1,m);let b;const y=[],x=null!=i,w=null!=o,v="leakyrelu"===p,$=()=>{const e=[s,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=vW({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return y.push(t),t}return e};if(x&&e.push(t(i,c)),w&&e.push(t(o,c)),v){const t=n.makeTensorInfo([],"float32",Dm(f,"float32"));e.push(t),y.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&qh().getBool("WEBGL_EXP_CONV")){const e=p?fW(p,!0):null,t=new sV(g,x,e,w,v),r=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],s=$();b=n.runWebGLProgram(t,s,"float32",r)}else if(qh().getBool("WEBGL_CONV_IM2COL"))b=uV({x:s,filter:a,convInfo:g,backend:n,bias:i,activation:p,preluActivationWeights:o,leakyreluAlpha:f});else{const e=p?fW(p,!1):null,t=new nV(g,x,e,w,v),r=$();b=n.runWebGLProgram(t,r,"float32")}else b=oV({x:s,filter:a,convInfo:g,backend:n,bias:i,activation:p,preluActivationWeights:o,leakyreluAlpha:f});const k=vW({inputs:{x:b},backend:n,attrs:{shape:g.outShape}});return y.push(b),y.forEach((e=>n.disposeIntermediateTensorInfo(e))),k}},CG={kernelName:om,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=r,f=[];let m=c;null==m&&(m=[1,1]),ph(Wy(u,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`));const g=Dy(s.shape,a.shape,u,m,l,h,!0),b=qh().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,y=d?fW(d,b):null,x=[s,a],w=null!=i,v=null!=o,$="leakyrelu"===d;if(w&&x.push(i),v&&x.push(o),$){const e=n.makeTensorInfo([],"float32",Dm(p,"float32"));x.push(e),f.push(e)}let k;k=b?new MV(g,w,y,v,$):new zV(g,w,y,v,$);const I=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],S=n.runWebGLProgram(k,x,"float32",I);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};class TG{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;const s=oB(n.length);let a="\n    int index;";for(let e=0;e<this.sliceDim;e++)a+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const EG={kernelName:lp,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=s.shape,i=a[a.length-1],o=gh(r.shape),[u,l,c,h]=Xv(r,s),d=vW({inputs:{x:s},backend:n,attrs:{shape:[l,i]}}),p=vW({inputs:{x:r},backend:n,attrs:{shape:[gh(r.shape)/c,c]}});if(n.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=n.readSync(s.dataId),t=n.bufferSync(r),a=BB(e,t,r.dtype,l,i,c,h,r.shape,o);return n.makeTensorInfo(u,r.dtype,a.values)}const f=new TG(i,h,[l,c],r.shape),m=n.runWebGLProgram(f,[p,d],p.dtype),g=vW({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),g}};class NG{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=oB(this.rank),r=function(e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let r=0;r<e.length;r++)2===r?n.push("index"):n.push(`${t[r]}`);return n.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function RG(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:i,batchDims:o}=r,u=kh(i,s.shape)[0];if(qh().get("DEBUG")){const e=n.readSync(a.dataId),t=s.shape[u];for(let n=0;n<e.length;++n){const r=e[n];ph(r<=t-1&&r>=0,(()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`))}}const l=P$(s,a,u,o),c=gh(a.shape),h=[],d=vW({inputs:{x:s},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),p=vW({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,c/l.batchSize]}});h.push(d),h.push(p);const f=[l.batchSize,l.outerSize,c/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.bufferSync(p),t=n.bufferSync(d),r=PB(t,e,f);return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,r.dtype,r.values)}const m=new NG(d.shape,f),g=n.runWebGLProgram(m,[d,p],d.dtype);h.push(g);const b=vW({inputs:{x:g},backend:n,attrs:{shape:l.outputShape}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}const AG={kernelName:up,backendName:"webgl",kernelFunc:RG},DG=pW({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:WB,dtype:"bool"}),OG={kernelName:cp,backendName:"webgl",kernelFunc:DG},FG=pW({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:UB}),zG={kernelName:hp,backendName:"webgl",kernelFunc:FG},MG={kernelName:pp,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return lG(r,!0,n)}},LG=dW({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),BG={kernelName:mp,backendName:"webgl",kernelFunc:LG},PG=dW({opSnippet:"return float(isinf(x));",dtype:"bool"}),WG={kernelName:gp,backendName:"webgl",kernelFunc:PG},UG=dW({opSnippet:"return float(isnan(x));",dtype:"bool"}),VG={kernelName:bp,backendName:"webgl",kernelFunc:UG},GG=pW({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:VB,dtype:"bool"}),HG={kernelName:xp,backendName:"webgl",kernelFunc:GG},jG=pW({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:GB,dtype:"bool"}),qG={kernelName:wp,backendName:"webgl",kernelFunc:jG},KG={kernelName:vp,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=HB(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},XG=dW({opSnippet:hW+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:jB}),YG={kernelName:$p,backendName:"webgl",kernelFunc:XG},ZG=dW({opSnippet:hW+"\n  return log(1.0 + x);\n"}),JG={kernelName:kp,backendName:"webgl",kernelFunc:ZG},QG=pW({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),eH={kernelName:Ip,backendName:"webgl",kernelFunc:QG},tH=dW({opSnippet:"return float(!(x >= 1.0));"}),nH={kernelName:Sp,backendName:"webgl",kernelFunc:tH},rH=pW({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),sH={kernelName:_p,backendName:"webgl",kernelFunc:rH};class aH{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class iH{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const oH={kernelName:Cp,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:i,alpha:o,beta:u}=r,l=qh().getBool("WEBGL_PACK_NORMALIZATION")?new iH(s.shape,a,i,o,u):new aH(s.shape,a,i,o,u);return n.runWebGLProgram(l,[s],s.dtype)}};class uH{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const lH={kernelName:Tp,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:i}=t,{depthRadius:o,bias:u,alpha:l,beta:c}=r,h=new uH(s.shape,o,u,l,c);return n.runWebGLProgram(h,[s,a,i],s.dtype)}};function cH(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:i}=r,o=s.shape.length,u=kh(a,s.shape);let l=u;const c=zx(l,o),h=null!=c,d=n.shouldExecuteOnCPU([s]);let p=s;if(h){if(d){const e=n.texData.get(p.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const r=vP(e,s.shape,s.dtype,c,t);p=n.makeTensorInfo(t,s.dtype),n.texData.get(p.dataId).values=r}else p=TW(s,c,n);l=Lx(l.length,o)}Fx("max",l,o);const[f,m]=Dx(p.shape,l);let g,b=f;if(i&&(b=Ox(f,u)),d){const e=n.texData.get(p.dataId).values,t=qB(e,gh(m),b,s.dtype);g=n.makeTensorInfo(b,s.dtype),n.texData.get(g.dataId).values=t}else g=function(e,t,n,r){const s=gh(t),a=vW({inputs:{x:e},attrs:{shape:[gh(e.shape)/s,s]},backend:r}),i=SW(a,e.dtype,"max",r),o=vW({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}(p,m,b,n);return h&&n.disposeIntermediateTensorInfo(p),g}const hH={kernelName:Ep,backendName:"webgl",kernelFunc:cH},dH=pW({opSnippet:ZP+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+QP+"\n  return result;\n",cpuKernelImpl:KB}),pH={kernelName:Np,backendName:"webgl",kernelFunc:dH},fH={kernelName:Rp,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;GL(s,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;ph(Wy(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=Ry(s.shape,a,i,1,o,u);if(1===l.filterWidth&&1===l.filterHeight&&bh(l.inShape,l.outShape))return tW({inputs:{x:s},backend:n});const c=new pU(l,"max",!1);return n.runWebGLProgram(c,[s],s.dtype)}},mH={kernelName:Dp,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dataFormat:u,dimRoundingMode:l}=r,c=Ay(s.shape,a,i,[1,1,1],o,l,u),h=new fU(c,"max",!1);return n.runWebGLProgram(h,[s],s.dtype)}};class gH{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=s-1-e.padInfo.top,o=a-1-e.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bH{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=u-1-e.padInfo.top,d=l-1-e.padInfo.left,p=o*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const yH={kernelName:Op,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r,h=Ay(i.shape,o,u,[1,1,1],l,c),d=new fU(h,"max",!0),p=n.runWebGLProgram(d,[i],i.dtype),f=new bH(h),m=n.runWebGLProgram(f,[s,p],i.dtype);return n.disposeIntermediateTensorInfo(p),m}},xH={kernelName:Ap,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;GL([a,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,d=Ry(o.shape,u,l,1,c,h),p=new pU(d,"max",!0),f=n.runWebGLProgram(p,[o],o.dtype),m=new gH(d),g=n.runWebGLProgram(m,[s,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}},wH={kernelName:Fp,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=t,u=n;ph(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const l=[1,1];ph(Wy(a,l),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`));const c=Ry(r.shape,s,a,l,i),[h,d]=function(e,t,n,r){let s=new pU(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");return s=new pU(n,"max",!0,!0,t),[a,r.runWebGLProgram(s,[e],"float32")]}(r,o,c,u);return[h,d]}},vH={kernelName:zp,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:s,axis:a}=t,i=n,o=r.shape.length,u=kh(a,r.shape);let l=u;const c=zx(l,o),h=null!=c,d=i.shouldExecuteOnCPU([r]),p=[];let f=r;if(h){if(d){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=vP(e,r.shape,r.dtype,c,t);f=i.makeTensorInfo(t,r.dtype),i.texData.get(f.dataId).values=n}else f=TW(r,c,i);p.push(f),l=Lx(l.length,o)}Fx("sum",l,o);const[m,g]=Dx(f.shape,l);let b=m;s&&(b=Ox(m,u));const y=function(e,t,n,r){const s=gh(t),a=vW({inputs:{x:e},attrs:{shape:[gh(e.shape)/s,s]},backend:r}),i=SW(a,"float32","mean",r),o=vW({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}(f,g,b,i);for(const e of p)i.disposeIntermediateTensorInfo(e);return y}},$H={kernelName:Mp,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=s.shape.length,u=kh(a,s.shape);let l=u;const c=zx(l,o);let h=s;null!=c&&(h=RW({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Lx(l.length,s.shape.length)),Fx("min",l,o);const[d,p]=Dx(h.shape,l),f=vW({inputs:{x:h},backend:n,attrs:{shape:[-1,gh(p)]}}),m=SW(f,f.dtype,"min",n);let g;return g=vW(i?{inputs:{x:m},backend:n,attrs:{shape:Ox(d,u)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},kH=pW({opSnippet:ZP+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+QP+"\n  return result;\n",cpuKernelImpl:XB}),IH={kernelName:Lp,backendName:"webgl",kernelFunc:kH};class SH{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=oB(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class _H{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=oB(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=IP("rc",r),u=IP("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h="reflect"===n?0:1;let d="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;d=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;d=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[r-2]} += 1;\n        if(${o[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${o[r-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const CH={kernelName:Bp,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,i=qh().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _H(r.shape,s,a):new SH(r.shape,s,a);return t.runWebGLProgram(i,[r],r.dtype)}},TH=pW({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+QP+"\n  return result;\n"}),EH={kernelName:Pp,backendName:"webgl",kernelFunc:TH};class NH{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const RH=pW({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),AH={kernelName:qd,backendName:"webgl",kernelFunc:RH},DH="return a - b;",OH=pW({opSnippet:DH,packedOpSnippet:DH,supportsComplex:!0,cpuKernelImpl:yP}),FH={kernelName:jf,backendName:"webgl",kernelFunc:OH};function zH(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,i=kh([a],s.shape),o=cH({inputs:{x:s},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),u=Ox(o.shape,i),l=vW({inputs:{x:o},backend:n,attrs:{shape:u}}),c=OH({inputs:{a:s,b:l},backend:n}),h=tG({inputs:{x:c},backend:n}),d=EW({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),p=vW({inputs:{x:d},backend:n,attrs:{shape:u}}),f=RH({inputs:{a:h,b:p},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),f}const MH={kernelName:Df,backendName:"webgl",kernelFunc:zH},LH={kernelName:Wp,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:i,normalized:o}=r,u=o?s:zH({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),l=u.shape[0],c=u.shape[1],h=new NH(l,c,a),d=[[i]],p=n.runWebGLProgram(h,[u],"int32",d);return o||n.disposeIntermediateTensorInfo(u),p}},BH=AP+"\n  return -x;\n",PH={kernelName:Vp,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=ZB(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let s;return s=qh().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new HP(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new RP(r.shape,BH),n.runWebGLProgram(s,[r],r.dtype)}},WH=sv,UH={kernelName:Hp,backendName:"webgl",kernelFunc:function(e){um("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=WH(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},VH=av,GH={kernelName:jp,backendName:"webgl",kernelFunc:function(e){um("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),{selectedIndices:d,validOutputs:p}=VH(c,h,i,o,u,l);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},HH=iv,jH={kernelName:qp,backendName:"webgl",kernelFunc:function(e){um("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),d=i,p=o,f=u,m=l,{selectedIndices:g,selectedScores:b}=HH(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class qH{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const KH={kernelName:Xp,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:i,onValue:o,offValue:u}=r,l=gh(s.shape),c=new qH(l,i,o,u),h=vW({inputs:{x:s},backend:n,attrs:{shape:[l]}}),d=n.runWebGLProgram(c,[h],a);n.disposeIntermediateTensorInfo(h);const p=vW({inputs:{x:d},backend:n,attrs:{shape:[...s.shape,i]}});return n.disposeIntermediateTensorInfo(d),p}};function XH(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=zU({inputs:{input:r},backend:n}),t=XH({inputs:{x:e},backend:n}),s=ZU({inputs:{input:r},backend:n}),a=XH({inputs:{x:s},backend:n}),i=rW({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return dG({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const YH={kernelName:nm,backendName:"webgl",kernelFunc:XH},ZH={kernelName:Kp,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=zU({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=ZU({inputs:{input:s},backend:r}),i=XH({inputs:{x:a},backend:r}),o=rW({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return dG({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}},JH={kernelName:Yp,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return rG({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{fh(a,e.shape,"All tensors passed to stack must have matching shapes"),ph(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],u=eV({inputs:t.map((e=>{const t=rG({inputs:{input:e},backend:n,attrs:{dim:s}});return o.push(t),t})),backend:n,attrs:{axis:s}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}};class QH{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=oB(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class ej{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=oB(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=IP("rc",r),u=IP("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[`${s} rc = outputLoc;`,`${o[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${l}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let e=0,t=1===r?2:4;e<t;e++)p+=`\n        ${h[e]}\n        if (${d}) {\n          result[${e}] = float(value);\n        } else {\n          ${s} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;p+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const tj=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:i}=r;if(0===gh(s.shape)){const e=a.map(((e,t)=>e[0]+s.shape[t]+e[1]));return dG({backend:n,attrs:{shape:e,value:i,dtype:s.dtype}})}const o=qh().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ej(s.shape,a,i):new QH(s.shape,a,i),u=[[i]];return n.runWebGLProgram(o,[s],s.dtype,u)},nj={kernelName:Zp,backendName:"webgl",kernelFunc:tj},rj=pW({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+QP+"\n  return result;\n"}),sj={kernelName:Jp,backendName:"webgl",kernelFunc:rj},aj={kernelName:ef,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=s.shape.length,u=[],l=kh(a,s.shape);let c=l;const h=zx(c,o);let d,p=s;if(null!=h&&(p=RW({inputs:{x:s},backend:n,attrs:{perm:h}}),c=Lx(c.length,o),u.push(p)),Fx("prod",c,o),n.shouldExecuteOnCPU([p])){const e=n.texData.get(p.dataId).values,{outVals:t,outShape:r,outDtype:s}=QB(p.shape,p.dtype,e,c);d=n.makeTensorInfo(r,s,t)}else{const[e,t]=Dx(p.shape,c),r=gh(t),a=vW({inputs:{x:p},backend:n,attrs:{shape:[-1,r]}}),i=SW(a,hg(s.dtype),"prod",n);d=vW({inputs:{x:i},backend:n,attrs:{shape:e}}),u.push(a),u.push(i)}if(i){u.push(d);const e=Ox(d.shape,l);d=vW({inputs:{x:d},backend:n,attrs:{shape:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},ij={kernelName:tf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=r,u=s.map((e=>n.readSync(e.dataId))),l=s.map((e=>e.shape)),c=n.readSync(a.dataId),h=n.readSync(i.dataId),[d,p,f]=eP(u,l,c,a.shape,a.dtype,h,i.shape,o),m=d.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,p);return m.concat([g])}},oj={kernelName:nf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:s,deltas:a}=t,i=n.readSync(r.dataId),o=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=tP(i,r.shape,r.dtype,o,s.shape,u,a.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([c.length],r.dtype,c)]}},uj={kernelName:rf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),h=n.readSync(i.dataId),d=o.map((e=>n.readSync(e.dataId))),p=o.map((e=>e.shape)),[f,m]=nP(l,s.shape,c,a.shape,a.dtype,h,i.shape,d,p,u);return n.makeTensorInfo(f,a.dtype,m)}},lj=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:i}=n,o=rP(r,s,a,i);return t.makeTensorInfo([o.length],i,o)},cj={kernelName:sf,backendName:"webgl",kernelFunc:lj},hj=dW({opSnippet:"return 1.0 / x;"}),dj={kernelName:of,backendName:"webgl",kernelFunc:hj},pj=dW({opSnippet:AP+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),fj={kernelName:uf,backendName:"webgl",kernelFunc:pj},mj=dW({opSnippet:AP+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),gj={kernelName:ff,backendName:"webgl",kernelFunc:mj};class bj{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class yj{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const xj={kernelName:df,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[u,l]=o,c=qh().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new yj(s.shape,u,l,a,i):new bj(s.shape,u,l,a,i);return n.runWebGLProgram(c,[s],"float32")}};class wj{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const vj={kernelName:pf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new wj(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class $j{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],h=r?"0.5":"0.0";let d;d=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class kj{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],h=r?"0.5":"0.0";let d;d=s?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const Ij={kernelName:cf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[u,l]=o,c=qh().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new kj(s.shape,u,l,a,i):new $j(s.shape,u,l,a,i);return n.runWebGLProgram(c,[s],s.dtype)}};class Sj{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const _j={kernelName:hf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new Sj(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class Cj{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=oB(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class Tj{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=IP("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=oB(n);function o(n){const r=e.map(((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const Ej={kernelName:mf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r,i=s.shape.length,o=kh(a,s.shape);if(0===i)return tW({inputs:{x:s},backend:n});const u=qh().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Tj(s.shape,o):new Cj(s.shape,o);return n.runWebGLProgram(u,[s],s.dtype)}};class Nj{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let s="";s="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${s}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Rj={kernelName:sm,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:i}=t,o=n,u=new Nj(r.shape,a),[l,c]=Vv(i,r.shape[1],r.shape[2]),h=[[l,c,Math.sin(s),Math.cos(s)]];return o.runWebGLProgram(u,[r],r.dtype,h)}},Aj=dW({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),Dj={kernelName:gf,backendName:"webgl",kernelFunc:Aj},Oj=dW({opSnippet:"return inversesqrt(x);",cpuKernelImpl:sP}),Fj={kernelName:bf,backendName:"webgl",kernelFunc:Oj};class zj{constructor(e,t,n,r,s,a,i=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const u=oB(s.length),l=oB(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const h=`getIndices(${c})`;let d="";1===r?d="i":2===r&&(d="i, coords[1]");const p=`getUpdates(${d})`;let f="";o&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides";this.userCode=`\n        ${u} strides = ${u}(${s});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${h});\n              flattenedIndex += index * ${g};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(${m}, sum, float(found)));\n        }\n      `}}class Mj{constructor(e,t,n,r,s,a,i=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const u=oB(s.length),l=oB(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const h=`getIndices(${c})`;let d="";1===r?d="i":2===r&&(d="i, coords[1]");const p=`getUpdates(${d})`;let f="";o&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides",b=t>1?"strides[j + 1]":"strides";this.userCode=`\n        ${u} strides = ${u}(${s});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${e}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${t}; j+=2) {\n              ivec4 index = round(${h});\n              flattenedIndex += index.xz * ${g};\n              if (j + 1 < ${t}) {\n                flattenedIndex += index.yw * ${b};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${p};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${m}, sum, found));\n        }\n      `}}const Lj={kernelName:yf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=Jv(0,s,i),d=[h/l,l];if(0===h)return n.makeTensorInfo(i,s.dtype);const p=vW({inputs:{x:s},backend:n,attrs:{shape:[u,o]}}),f=vW({inputs:{x:a},backend:n,attrs:{shape:[u,l]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0]));let g;g=qh().getBool("WEBGL_PACK")?new Mj(u,o,p.shape.length,f.shape.length,c,d):new zj(u,o,p.shape.length,f.shape.length,c,d);const b=n.runWebGLProgram(g,[f,p,m],f.dtype),y=vW({inputs:{x:b},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(m),y}};class Bj{constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const s=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===qh().getNumber("WEBGL_VERSION")?"while (left < right) {":s,i="left"===r?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${i} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const Pj={kernelName:wf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:i}=r,o=new Bj(s.shape[0],s.shape[1],a.shape[1],i),u=[[s.shape[1]]];return n.runWebGLProgram(o,[s,a],"int32",u)}};class Wj{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<t.length;r++)i.push(`${n[r]}`),r<e&&a.push(`${n[r]}`);r=a.join(),s=i.join()}const a=oB(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const Uj={kernelName:vf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,i=new Wj(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(i,[r,s,a],cg(s.dtype,a.dtype))}},Vj=dW({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Qv};\n  float scale = ${e$};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),Gj={kernelName:$f,backendName:"webgl",kernelFunc:Vj},Hj=dW({opSnippet:hW+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:iP}),jj={kernelName:Cf,backendName:"webgl",kernelFunc:Hj},qj=dW({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),Kj={kernelName:_f,backendName:"webgl",kernelFunc:qj},Xj=dW({opSnippet:hW+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${QP}\n  return result;\n`}),Yj={kernelName:If,backendName:"webgl",kernelFunc:Xj},Zj=dW({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),Jj={kernelName:Sf,backendName:"webgl",kernelFunc:Zj},Qj=dW({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),eq={kernelName:Tf,backendName:"webgl",kernelFunc:Qj},tq={kernelName:Rf,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:i}=r;ph(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),u=[[0,0]];u.push(...i);for(let e=1+a.length;e<s.shape.length;++e)u.push([0,0]);const l=[],c=tj({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),h=Gv(c.shape,a,o,!1),d=Hv(h.length,a.length,!1),p=jv(c.shape,a,o,!1),f=vW({inputs:{x:c},backend:n,attrs:{shape:h}}),m=RW({inputs:{x:f},backend:n,attrs:{perm:d}}),g=vW({inputs:{x:m},backend:n,attrs:{shape:p}});return l.push(c),l.push(f),l.push(m),l.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},nq={kernelName:Of,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n         ${s.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(r.dataId),u=n.readSync(s.dataId),l=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,d,p,f,m]=lP(o,r.shape,r.dtype,u,s.dtype,l,c);return[n.makeTensorInfo(d,r.dtype,h),n.makeTensorInfo([d[0]],s.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}},rq={kernelName:Ff,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(s.dataId)),o=n.readSync(r.dataId),u=Array.from(n.readSync(a.dataId)),[l,c,h]=cP(o,r.shape,r.dtype,i,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}},sq={kernelName:zf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(r.dataId),o=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=hP(i,r.shape,r.dtype,o,u,!0);return n.makeTensorInfo(c,r.dtype,l)}},aq={kernelName:Mf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(r.dataId),o=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=hP(i,r.shape,r.dtype,o,u);return n.makeTensorInfo(c,r.dtype,l)}},iq={kernelName:Lf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:h,outputSize:d}=Jv(0,s,o),p=!1;if("string"===a.dtype){const e=n.bufferSync(s),t=n.bufferSync(a),r=Mm(n.readSync(i.dataId)[0]),f=aP(e,t,o,d,c,l,u,h,r,p);return n.makeTensorInfo(o,f.dtype,f.values)}const f=new zj(l,u,s.shape.length,a.shape.length,h,[d,1],p),m=n.runWebGLProgram(f,[a,s,i],a.dtype),g=vW({inputs:{x:m},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(m),g}},oq={kernelName:Af,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:i}=r,o=kh(i,s.shape)[0],u=S$(s,a,o),l=s.shape.length,c=new Array(l).fill(0),h=s.shape.slice();return u.map((e=>{const t=[...h];t[o]=e;const r=TU({inputs:{x:s},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,r}))}},uq="return sqrt(x);",lq=dW({opSnippet:uq,packedOpSnippet:uq,cpuKernelImpl:dP}),cq={kernelName:Ef,backendName:"webgl",kernelFunc:lq},hq={kernelName:Pf,backendName:"webgl",kernelFunc:dW({opSnippet:"return x * x;"})},dq="return (a - b) * (a - b);",pq=pW({opSnippet:dq,packedOpSnippet:dq}),fq={kernelName:Bf,backendName:"webgl",kernelFunc:pq},mq={kernelName:Wf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");const a=W$(n.readSync(s.dataId)),i=pP(a,"string",r);return n.makeTensorInfo(s.shape,"string",i)}},gq={kernelName:rm,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=AP+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new RP(r.shape,s);return n.runWebGLProgram(a,[r],r.dtype)}};class bq{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=oB(n.length),a=oB(n.length);let i="";if(1===r)i="coords * strides + begin";else{let e=0;i=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const yq={kernelName:Uf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=r,{finalShapeSparse:p,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:b,begin:y,end:x,strides:w}=Sy(s.shape,a,i,o,u,l,c,h,d);let v;if(m)v=vW({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||b){ph(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=dy(y,x,w),t=TU({inputs:{x:s},backend:n,attrs:{begin:y,size:e}});v=vW({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([s])){const e=n.readSync(s.dataId),t=vb(s.shape,s.dtype,e),r=fP(p,t,w,y);v=n.makeTensorInfo(f,s.dtype,r.values)}else{const e=new bq(y,w,p);v=n.runWebGLProgram(e,[s],s.dtype)}const $=vW({inputs:{x:v},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(v),$}},xq={kernelName:Vf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:h}=t,d=n.readSync(c.dataId),p=n.readSync(h.dataId),[f,m]=mP(d,p,s,a,i,o,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}},wq={kernelName:Gf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),u=n.readSync(i.dataId)[0],[l,c,h]=gP(o,u,s),d=c.length;return[n.makeTensorInfo([d,2],"int32",l),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},vq={kernelName:Hf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=bP(i,s);return n.makeTensorInfo(a.shape,"int32",o)}},$q=dW({opSnippet:"return tan(x);"}),kq={kernelName:qf,backendName:"webgl",kernelFunc:$q},Iq=dW({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),Sq={kernelName:Kf,backendName:"webgl",kernelFunc:Iq},_q={kernelName:xf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{tensor:s,indices:a,updates:i}=t,{}=r,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=Jv(0,a,s.shape),d=[h/l,l];if(0===h)return n.makeTensorInfo(s.shape,a.dtype);const p=vW({inputs:{x:a},backend:n,attrs:{shape:[u,o]}}),f=vW({inputs:{x:i},backend:n,attrs:{shape:[u,l]}}),m=vW({inputs:{x:s},backend:n,attrs:{shape:d}}),g=new zj(u,o,p.shape.length,f.shape.length,c,d,!1,!0),b=n.runWebGLProgram(g,[f,p,m],m.dtype),y=vW({inputs:{x:b},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),y}};class Cq{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=oB(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function Tq(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;if("string"===s.dtype||s.shape.length>5){const e=n.readSync(s.dataId),t="string"===s.dtype?e.map((e=>Mm(e))):e,r=vb(s.shape,s.dtype,t),i=xP(r,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new Cq(s.shape,a);return n.runWebGLProgram(i,[s],s.dtype)}const Eq={kernelName:Xf,backendName:"webgl",kernelFunc:Tq};class Nq{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class Rq{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function Aq(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function Dq(e){let t=1;for(;t<e;)t*=2;return t}const Oq={kernelName:Yf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:i}=r,o=qh().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),u=qh().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),l=s.shape,c=l[l.length-1];if(n.shouldExecuteOnCPU([s])||c<o||a>u){const e=n.readSync(s.dataId),[t,r]=wP(e,l,s.dtype,a,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===a)return l[l.length-1]=0,[n.makeTensorInfo(l,s.dtype,[]),n.makeTensorInfo(l,"int32",[])];if(1===c)return[s,dG({attrs:{shape:l,dtype:"int32",value:0},backend:n})];const h=n.texData.get(s.dataId),d=null!==h&&h.isPacked,p=d?n.unpackTensor(s):s,f=gh(l)/c,m=vW({inputs:{x:p},attrs:{shape:[f,c]},backend:n});d&&Aq(n,p);const g=Dq(a),b=Dq(c);let y=null;const x=()=>null===y?[m,m]:[m,y],w=(e,t,r)=>{const s=x(),a=new Nq(r),i=[[c],[null===y?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=y;y=n.runWebGLProgram(a,s,"int32",i),Aq(n,o)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,b])}for(let e=b;e>g;e/=2){const t=x(),r=new Rq([f,e/2]),s=[[c],[null===y?1:0],[g]],a=y;y=n.runWebGLProgram(r,t,"int32",s),Aq(n,a);const i=g/2,o=2*i;for(let e=i;e>=1;e/=2)w(o,e,y.shape)}let v=y;y=TU({inputs:{x:y},backend:n,attrs:{begin:0,size:[f,a]}}),Aq(n,v);let $=RG({inputs:{x:m,indices:y},backend:n,attrs:{axis:1,batchDims:1}});Aq(n,m);const k=l.slice(0,-1);k.push(a),v=y,y=vW({inputs:{x:y},attrs:{shape:k},backend:n}),Aq(n,v);const I=$;return $=vW({inputs:{x:$},attrs:{shape:k},backend:n}),Aq(n,I),[$,y]}};class Fq{constructor(e,t,n,r,s,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(r){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${s});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${s});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const zq={kernelName:Zf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:u,outputShape:l}=r,[c,h,d,p]=s.shape,[f,m]=null!=l?l:[h,d],g=new Fq(h,d,i,o,u,[c,f,m,p]);return n.runWebGLProgram(g,[s,a],"float32")}},Mq={kernelName:Qf,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;GL(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=r.readSync(a.dataId),{outputValues:o,outputShape:u,indices:l}=$P(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}},Lq={kernelName:em,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s,o=i.shape.length,u=s.shape[a],l=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(l[c++]=i.shape[e]);const h=[],d=new Array(o).fill(0),p=i.shape.slice();p[a]=1;const f=new Array(u);for(let e=0;e<f.length;e++){d[a]=e;const t=TU({inputs:{x:i},backend:n,attrs:{begin:d,size:p}}),r=vW({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=r,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class Bq{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const Pq={kernelName:tm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:i}=r,o=s.shape.length,u=[];let l=0;const c=zx([l],o);let h=s;null!=c&&(h=RW({inputs:{x:s},backend:n,attrs:{perm:c}}),u.push(h),l=Lx(1,o)[0]);const d=B$(h.shape,l,i),p=gh([h.shape[l]]),f=vW({inputs:{x:h},backend:n,attrs:{shape:[-1,p]}});u.push(f);const m=hg(s.dtype),g=(e,t,r,s,a)=>{const i=e.shape[0],o=e.shape[1],l=L$(o,a),c=new Bq({windowSize:l,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,r],s);if(u.push(h),h.shape[1]===a)return h;const d=lj({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),p=Tq({inputs:{x:d},backend:n,attrs:{reps:[o/l]}});return u.push(d),u.push(p),g(h,t,p,s,a)},b=vW({inputs:{x:g(f,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:d}});let y=b;if(null!=c){u.push(b);const e=Mx(c);y=RW({inputs:{x:y},backend:n,attrs:{perm:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},Wq=[FW,MW,BW,WW,GW,qW,KW,XW,tU,nU,sU,iU,uU,cU,dU,mU,gU,xU,wU,vU,IU,NU,RU,AU,DU,LU,WU,GU,sW,qU,tV,lV,fV,gV,bV,yV,xV,vV,kV,SV,RV,AV,DV,FV,LV,WV,UV,GV,jV,qV,XV,YV,JV,eG,nG,sG,oG,cG,pG,mG,yG,wG,kG,_G,CG,EG,AG,OG,zG,nW,MG,JU,BG,WG,VG,oW,HG,qG,KG,YG,JG,eH,nH,sH,oH,lH,hH,pH,fH,mH,yH,xH,wH,vH,$H,IH,CH,EH,LH,wW,PH,UH,GH,jH,FU,KH,ZH,JH,nj,sj,cW,aj,ij,oj,uj,cj,MU,AH,dj,fj,gj,$W,xj,vj,Ij,_j,Ej,Rj,Dj,Fj,Lj,Pj,Uj,Gj,jj,Kj,Yj,Jj,EU,MH,eq,tq,nq,rq,sq,aq,iq,oq,cq,hq,fq,mq,gq,yq,xq,wq,vq,FH,NW,kq,Sq,_q,Eq,Oq,zq,AW,Mq,Lq,Pq,YH];for(const e of Wq)mm(e);const Uq=[];function Vq(e){let t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:x;const r=new Set;function s(n){if(I(e,n)&&(e=n,t)){const t=!Uq.length;for(const t of r)t[1](),Uq.push(t,e);if(t){for(let e=0;e<Uq.length;e+=2)Uq[e][0](Uq[e+1]);Uq.length=0}}}function a(t){s(t(e))}return{set:s,update:a,subscribe:function(i){const o=[i,arguments.length>1&&void 0!==arguments[1]?arguments[1]:x];return r.add(o),1===r.size&&(t=n(s,a)||x),i(e),()=>{r.delete(o),0===r.size&&t&&(t(),t=null)}}}}const Gq=Vq("Upload an image to get started."),Hq=Vq(null),jq=document.createElement("canvas");jq.width=400,jq.height=300;const qq=jq.getContext("2d");qq.fillStyle="#f0f0f0",qq.fillRect(0,0,jq.width,jq.height),qq.font="24px Arial",qq.fillStyle="#333333",qq.textAlign="center",qq.textBaseline="middle",qq.fillText("Upload an image",jq.width/2,jq.height/2);const Kq=Vq(qq.getImageData(0,0,jq.width,jq.height));var Xq=async function(e,t){Gq.set(`Fetching ${t} model..."`);const n=await fetch(e,{method:"GET",headers:{"Content-Type":"application/octet-stream"},mode:"cors",credentials:"omit"});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const r=Number(n.headers.get("Content-Length")),s=new Uint8Array(r);let a=0;const i=n.body?.getReader();if(!i)throw new Error("Failed to get reader for model stream");for(;;){const{done:e,value:n}=await i.read();if(e)break;s.set(n,a),a+=n.length;const o=a/r*100;Gq.set(`Fetching ${t} model, ${o.toFixed(2)}%`)}const o=new Blob([s],{type:"application/octet-stream"});return await o.arrayBuffer()};function Yq(e){let t,n,r,s,a,i;return{c(){var e,a;t=d("div"),n=d("input"),r=f(),s=d("img"),g(n,"type","file"),g(s,"alt","Uploaded"),e=s,a="display",null=="none"?e.style.removeProperty(a):e.style.setProperty(a,"none","")},m(o,u){c(o,t,u),l(t,n),l(t,r),l(t,s),e[2](s),a||(i=m(n,"change",e[1]),a=!0)},p:x,i:x,o:x,d(n){n&&h(t),e[2](null),a=!1,i()}}}function Zq(e,t,n){let r,s=!1;const a=async e=>{Gq.set(`Uploaded image is ${e.width}x${e.height}px. Loading the encoder model (~28 MB).`),s=!0;const t=document.createElement("canvas");t.width=1024,t.height=1024;const n=t.getContext("2d");if(n){const t=Math.min(1024/e.width,1024/e.height),r=e.width*t,a=e.height*t,i=(1024-r)/2,o=(1024-a)/2;n.fillStyle="white",n.fillRect(0,0,1024,1024),n.drawImage(e,i,o,r,a);const u=n.getImageData(0,0,1024,1024);Kq.update((e=>u));const l=[],c=[.485,.456,.406],h=[.229,.224,.225];for(let e=0;e<u.data.length;e+=4)for(let t=0;t<3;t++){const n=(u.data[e+t]/255-c[t])/h[t];l.push(n)}const d=function(e,t,n){if(mh(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Cg(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Og(e,t,r,n)}(l,[1024,1024,3]),p=Bg((()=>{const e=Rw(d,[2,0,1]);return yx(e,0)})),f="https://sam2-download.b-cdn.net/sam2_hiera_small.encoder.with_runtime_opt.ort";try{const e=await Xq(f,"encoder"),t=await _e.create(e,{executionProviders:["webgpu"],graphOptimizationLevel:"disabled"}),n={image:new we(p.dataSync(),p.shape)},r=Date.now(),s=await t.run(n),a=(Date.now()-r)/1e3;console.log({results:s}),Hq.update((e=>({...e,...s}))),Kq.set(u),Gq.set(`Embedding generated in ${a} seconds. Click on the image to generate a mask.`)}catch(e){console.error(e),Gq.set(`Error: ${e}`)}finally{s=!1}}};return C((()=>{r&&n(0,r.style.display="none",r)})),[r,async e=>{const t=e.target.files;if(FileReader&&t&&t.length){const e=new FileReader;e.onload=()=>{r&&(n(0,r.onload=async()=>await a(r),r),n(0,r.src=e.result,r))},e.readAsDataURL(t[0])}},function(e){E[e?"unshift":"push"]((()=>{r=e,n(0,r)}))}]}var Jq=class extends X{constructor(e){super(),q(this,e,Zq,Yq,I,{})}},Qq=function(e,t){const{data:n}=e,r=256,s=1024,a=[];for(let e=0;e<3;e++){const i=new Float32Array(1048576);for(let a=0;a<s;a++)for(let o=0;o<s;o++){const u=Math.floor(o*r/s),l=Math.floor(a*r/s)*r+u+e*r*r;i[a*s+o]=n[l]>t?1:0}a.push(i)}return a};function eK(e){let t,n,r,s,a,i,o,u,w,v,k,I;return{c(){t=d("div"),n=d("canvas"),r=f(),s=d("div"),a=d("label"),a.textContent="Mask Threshold:",i=f(),o=d("input"),u=f(),w=d("span"),v=p(e[1]),g(n,"class","svelte-x2sqag"),g(a,"for","threshold"),g(o,"type","range"),g(o,"id","threshold"),g(o,"min","0"),g(o,"max","20"),g(o,"step","0.1"),g(t,"class","container svelte-x2sqag")},m(h,d){c(h,t,d),l(t,n),e[7](n),l(t,r),l(t,s),l(s,a),l(s,i),l(s,o),y(o,e[1]),l(s,u),l(s,w),l(w,v),k||(I=[m(n,"click",e[2]),m(o,"change",e[8]),m(o,"input",e[8])],k=!0)},p(e,t){let[n]=t;2&n&&y(o,e[1]),2&n&&b(v,e[1])},i:x,o:x,d(n){n&&h(t),e[7](null),k=!1,$(I)}}}const tK=1024;function nK(e,t,n,r,s,a){const i=1024,o=n/i,u=r/1024;e.beginPath(),e.strokeStyle="white",e.lineWidth=2;for(let n=0;n<1024;n++)for(let r=0;r<i;r++){const l=n*i+r;if(r>0&&t[l-1]<=s||r<1023&&t[l+1]<=s||n>0&&t[l-i]<=s||n<1023&&t[l+i]<=s){const t=r*o+a.x,s=n*u+a.y;e.moveTo(t,s),e.lineTo(t+o,s),e.lineTo(t+o,s+u),e.lineTo(t,s+u),e.lineTo(t,s)}}e.stroke()}function rK(e,t,n,r,s,a,i){const o=1024,u=e.getImageData(i.x,i.y,a,a),l=a/o,c=a/1024;for(let e=0;e<1024;e++)for(let i=0;i<o;i++)if(t[e*o+i]>s){const t=Math.floor(i*l),s=Math.floor(e*c),o=Math.floor((i+1)*l),h=Math.floor((e+1)*c);for(let e=s;e<h;e++)for(let s=t;s<o;s++){const t=4*(e*a+s);u.data[t]=Math.floor((1-r)*u.data[t]+r*n[0]),u.data[t+1]=Math.floor((1-r)*u.data[t+1]+r*n[1]),u.data[t+2]=Math.floor((1-r)*u.data[t+2]+r*n[2]),u.data[t+3]=255}}e.putImageData(u,i.x,i.y)}function sK(e,t,n,r,s){if(!e||!t)return;const a=e.getContext("2d");if(!a)return;a.fillStyle="#f0f0f0",a.fillRect(0,0,e.width,e.height);const i=document.createElement("canvas");i.width=n,i.height=n;const o=i.getContext("2d");createImageBitmap(t).then((e=>{o.drawImage(e,0,0,n,n),a.drawImage(i,s.x,s.y,r,r)}))}function aK(e,t,n){let r,s,a;S(e,Hq,(e=>n(11,s=e))),S(e,Kq,(e=>n(6,a=e)));let i,o,u,l,{isUsingMobileSam:c=!1}=t,h=2;return C((()=>{if(!i)return;const e=new ResizeObserver((()=>{i.parentElement&&(n(0,i.width=i.parentElement.clientWidth,i),n(0,i.height=i.parentElement.clientHeight,i))}));return e.observe(i.parentElement),()=>{e.disconnect()}})),e.$$set=e=>{"isUsingMobileSam"in e&&n(3,c=e.isUsingMobileSam)},e.$$.update=()=>{8&e.$$.dirty&&(r=c?"https://sam2-download.b-cdn.net/models/mobilesam.decoder.quant.onnx":"https://sam2-download.b-cdn.net/sam2_hiera_small.decoder.onnx"),113&e.$$.dirty&&i&&(n(4,o=Math.min(i.width,i.height)),u=o/tK,n(5,l={x:(i.width-o)/2,y:(i.height-o)/2}),sK(i,a,tK,o,l)),113&e.$$.dirty&&sK(i,a,tK,o,l)},[i,h,async function(e){if(!i||!a||!s)return;const t=i.getBoundingClientRect(),n=(e.clientX-t.left-l.x)/u,c=(e.clientY-t.top-l.y)/u;console.log("Clicked position:",n,c),Gq.set(`Clicked on (${n}, ${c}). Downloading the decoder model if needed and generating masks...`);const d=i.getContext("2d");if(!d)return;sK(i,a,tK,o,l),d.fillStyle="rgba(0, 0, 139, 0.7)",d.fillRect(n*u+l.x-1,c*u+l.y-1,2,2);const p=new Float32Array([n,c,0,0]),f=new Float32Array([1,-1]),m=new we(p,[1,2,2]),g=new we(f,[1,2]);try{const e=await Xq(r,"decoder"),t=await _e.create(e,{executionProviders:["webgpu"]}),n=function(e,t,n){const{image_embed:r,high_res_feats_0:s,high_res_feats_1:a}=e;return{image_embed:r,high_res_feats_0:s,high_res_feats_1:a,point_coords:t,point_labels:n,mask_input:new we(new Float32Array(65536),[1,1,256,256]),has_mask_input:new we(new Float32Array([0]),[1])}}(s,m,g);console.log({decodingFeeds:n});const a=Date.now(),i=await t.run(n),{masks:u,iou_predictions:c}=i,p=(Date.now()-a)/1e3;Gq.set(`Inference completed in ${p} seconds`);const f=Qq(u,h/10),b=[[0,0,139],[0,139,0],[139,0,0]];for(let e=0;e<f.length;e++)rK(d,f[e],b[e%b.length],.3,.5,o,l);for(let e=0;e<f.length;e++)nK(d,f[e],o,o,.5,l);console.log("Masks drawn:",f.length)}catch(e){console.error(e),Gq.set(`Error running inference: ${e}`)}},c,o,l,a,function(e){E[e?"unshift":"push"]((()=>{i=e,n(0,i)}))},function(){var e;e=this.value,h=""===e?null:+e,n(1,h)}]}var iK=class extends X{constructor(e){super(),q(this,e,aK,eK,I,{isUsingMobileSam:3})}};function oK(e){let t,n,r,s,a,i,o,u,m,y,x,w;return m=new Jq({}),x=new iK({}),{c(){t=d("div"),n=d("h1"),n.textContent="Segment Anything 2, in WebGPU",r=f(),s=d("p"),a=p(e[0]),i=f(),o=d("p"),o.innerHTML='Built by <a href="http://lucasgelfond.online">Lucas Gelfond</a>. You can read my writeup\n    <a href="https://lucasgelfond.online/portfolio/webgpu-sam2">here</a>\n    or see the source code <a href="https://github.com/lucasgelfond/webgpu-sam2">here</a>.',u=f(),G(m.$$.fragment),y=f(),G(x.$$.fragment),g(n,"class","svelte-kp4era"),g(s,"class","svelte-kp4era"),g(o,"class","svelte-kp4era"),g(t,"class","container svelte-kp4era")},m(e,h){c(e,t,h),l(t,n),l(t,r),l(t,s),l(s,a),l(t,i),l(t,o),l(t,u),H(m,t,null),l(t,y),H(x,t,null),w=!0},p(e,t){let[n]=t;(!w||1&n)&&b(a,e[0])},i(e){w||(U(m.$$.fragment,e),U(x.$$.fragment,e),w=!0)},o(e){V(m.$$.fragment,e),V(x.$$.fragment,e),w=!1},d(e){e&&h(t),j(m),j(x)}}}function uK(e,t,n){let r;return S(e,Gq,(e=>n(0,r=e))),C((()=>{const e=new FontFace("UniversLTStd","url(/public/fonts/UniversLTStd.woff)");e.load().then((()=>{document.fonts.add(e)}))})),[r]}new class extends X{constructor(e){super(),q(this,e,uK,oK,I,{})}}({target:document.body})}()}();